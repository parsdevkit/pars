file(WRITE ${CONFIG_FILE_PATH} "$packageName = '${PROJECT_NAME}'\n")
file(APPEND ${CONFIG_FILE_PATH} "$toolsDir = $(Split-Path -parent $MyInvocation.MyCommand.Definition)\n")
file(APPEND ${CONFIG_FILE_PATH} "$packageNameWithBin = Join-Path -Path $packageName -ChildPath 'bin'\n")
file(APPEND ${CONFIG_FILE_PATH} "$installDir = Join-Path -Path $env:ProgramFiles -ChildPath $packageNameWithBin\n")
file(APPEND ${CONFIG_FILE_PATH} "\n")
file(APPEND ${CONFIG_FILE_PATH} "if (-not (Test-Path $installDir)) {\n")
file(APPEND ${CONFIG_FILE_PATH} "\tNew-Item -Path $installDir -ItemType Directory | Out-Null\n")
file(APPEND ${CONFIG_FILE_PATH} "\tWrite-Output \"Created installation directory: $installDir\"\n")
file(APPEND ${CONFIG_FILE_PATH} "}\n")
file(APPEND ${CONFIG_FILE_PATH} "\n")

if(${APP_ARCH} STREQUAL ${ARCH_ALL})
file(APPEND ${CONFIG_FILE_PATH} "$exeName = switch ($env:PROCESSOR_ARCHITECTURE) {\n")
file(APPEND ${CONFIG_FILE_PATH} "\t'${CHOCO_ARCH_X86}' { '${APP_NAME}-${ARCH_X86}${EXT}' }\n")
file(APPEND ${CONFIG_FILE_PATH} "\t'${CHOCO_ARCH_X86_64}' { '${APP_NAME}-${ARCH_X86_64}${EXT}' }\n")
file(APPEND ${CONFIG_FILE_PATH} "\t'${CHOCO_ARCH_ARM64}' { '${APP_NAME}-${ARCH_ARM64}${EXT}' }\n")
file(APPEND ${CONFIG_FILE_PATH} "\tdefault { throw 'Unsupported architecture: $env:PROCESSOR_ARCHITECTURE' }\n")
file(APPEND ${CONFIG_FILE_PATH} "}\n")
file(APPEND ${CONFIG_FILE_PATH} "\n")
else()
file(APPEND ${CONFIG_FILE_PATH} "$exeName = '${APP_NAME}${EXT}'\n")
endif()
file(APPEND ${CONFIG_FILE_PATH} "\n")
file(APPEND ${CONFIG_FILE_PATH} "$sourceExe = Join-Path -Path $toolsDir -ChildPath $exeName\n")
file(APPEND ${CONFIG_FILE_PATH} "$destinationExe = Join-Path -Path $installDir -ChildPath '${APP_NAME}${EXT}'\n")
file(APPEND ${CONFIG_FILE_PATH} "Copy-Item -Path $sourceExe -Destination $destinationExe -Force\n")
file(APPEND ${CONFIG_FILE_PATH} "Write-Output 'Installed appropriate executable for architecture: ${APP_ARCH}'\n")

file(APPEND ${CONFIG_FILE_PATH} "\n")
file(APPEND ${CONFIG_FILE_PATH} "$appDataDir = [System.IO.Path]::Combine($env:LOCALAPPDATA, $packageName)\n")
file(APPEND ${CONFIG_FILE_PATH} "$subFolders = @('data', 'logs', 'config', 'cache')\n")
file(APPEND ${CONFIG_FILE_PATH} "foreach ($subFolder in $subFolders) {\n")
file(APPEND ${CONFIG_FILE_PATH} "\t$subFolderPath = [System.IO.Path]::Combine($appDataDir, $subFolder)\n")
file(APPEND ${CONFIG_FILE_PATH} "\tif (-not (Test-Path $subFolderPath)) {\n")
file(APPEND ${CONFIG_FILE_PATH} "\t\tNew-Item -Path $subFolderPath -ItemType Directory | Out-Null\n")
file(APPEND ${CONFIG_FILE_PATH} "\t\tWrite-Output \"Created $subFolder folder at $subFolderPath\"\n")
file(APPEND ${CONFIG_FILE_PATH} "\t}\n")
file(APPEND ${CONFIG_FILE_PATH} "}\n")
file(APPEND ${CONFIG_FILE_PATH} "\n")
file(APPEND ${CONFIG_FILE_PATH} "Write-Output 'AppData folders created successfully.'\n")

file(APPEND ${CONFIG_FILE_PATH} "\n")
file(APPEND ${CONFIG_FILE_PATH} "$existingPath = [System.Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::Machine)\n")
file(APPEND ${CONFIG_FILE_PATH} "$pathList = $existingPath -split ';'\n")
file(APPEND ${CONFIG_FILE_PATH} "if ($pathList -notcontains $installDir) {\n")
file(APPEND ${CONFIG_FILE_PATH} "\t[System.Environment]::SetEnvironmentVariable('Path', \"$existingPath;$installDir\", [System.EnvironmentVariableTarget]::Machine)\n")
file(APPEND ${CONFIG_FILE_PATH} "\tWrite-Output 'Added installation directory to system PATH.'\n")
file(APPEND ${CONFIG_FILE_PATH} "}\n")

file(APPEND ${CONFIG_FILE_PATH} "$displayName = '${PROJECT_DISPLAY_NAME_RELEASETYPE}'\n")
file(APPEND ${CONFIG_FILE_PATH} "$version = '${VERSION_SEMVER_BUILD}'\n")
file(APPEND ${CONFIG_FILE_PATH} "$publisher = '${PROJECT_ORGANIZATION}'\n")
file(APPEND ${CONFIG_FILE_PATH} "$uninstallCmd = \"choco uninstall $packageName -y\"\n")

file(APPEND ${CONFIG_FILE_PATH} "\n")
file(APPEND ${CONFIG_FILE_PATH} "$registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$packageName\"\n")
file(APPEND ${CONFIG_FILE_PATH} "\n")
file(APPEND ${CONFIG_FILE_PATH} "if (-not (Test-Path $registryPath)) {\n")
file(APPEND ${CONFIG_FILE_PATH} "\tNew-Item -Path $registryPath -Force | Out-Null\n")
file(APPEND ${CONFIG_FILE_PATH} "\tWrite-Output \"Created registry key: $packageName.\"\n")
file(APPEND ${CONFIG_FILE_PATH} "}\n")
file(APPEND ${CONFIG_FILE_PATH} "Set-ItemProperty -Path $registryPath -Name 'DisplayName' -Value $displayName\n")
file(APPEND ${CONFIG_FILE_PATH} "Set-ItemProperty -Path $registryPath -Name 'DisplayVersion' -Value $version\n")
file(APPEND ${CONFIG_FILE_PATH} "Set-ItemProperty -Path $registryPath -Name 'UninstallString' -Value $uninstallCmd\n")
file(APPEND ${CONFIG_FILE_PATH} "Set-ItemProperty -Path $registryPath -Name 'Publisher' -Value $publisher\n")
file(APPEND ${CONFIG_FILE_PATH} "\n")
file(APPEND ${CONFIG_FILE_PATH} "\n")

file(APPEND ${CONFIG_FILE_PATH} "Write-Output 'Application registered in Add/Remove Programs successfully.'\n")
file(APPEND ${CONFIG_FILE_PATH} "Write-Output 'Installation completed successfully.'\n")
file(APPEND ${CONFIG_FILE_PATH} "\n")