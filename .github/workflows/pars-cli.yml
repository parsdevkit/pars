name: Pars CLI

on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
    - '!*-rc[0-9]+'

jobs:
  build-linux-386:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get Tag Name
        id: get_tag_name
        run: |
          echo "Tag name is: ${{ github.ref }}"

          TAG_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV

          VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//')
          echo "version=$VERSION" >> $GITHUB_ENV


      - name: Build Binary
        working-directory: ./src
        run: |
          mkdir -p ../releases
          GOOS=linux GOARCH=386 go build -o ../releases/bin ./pars.go

      - name: Archive Binary Build
        run: tar -czvf releases/pars-linux-386-bin.tar.gz -C releases/ bin


      - name: Build .deb Package
        run: |
          mkdir -p releases/deb/DEBIAN
          mkdir -p releases/deb/usr/local/bin
          cp releases/bin releases/deb/usr/local/bin/
          echo "Package: Pars" > releases/deb/DEBIAN/control
          echo "Version: ${{ env.version }}" >> releases/deb/DEBIAN/control
          echo "Section: base" >> releases/deb/DEBIAN/control
          echo "Priority: optional" >> releases/deb/DEBIAN/control
          echo "Architecture: i386" >> releases/deb/DEBIAN/control
          echo "Depends: libc6 (>= 2.7)" >> releases/deb/DEBIAN/control
          echo "Maintainer: Pars Dev Kit <info@parsdevkit.net>" >> releases/deb/DEBIAN/control
          echo "Description: Pars" >> releases/deb/DEBIAN/control
          
          dpkg-deb --build releases/deb releases/pars-linux-386.deb


      - name: Archive .deb Package
        run: tar -czvf releases/pars-linux-386.deb.tar.gz -C releases/ pars-linux-386.deb


      - name: Build .rpm Package
        run: |
          mkdir -p releases/rpm/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          mkdir -p releases/rpm/BUILD/pars
          cp releases/bin releases/rpm/BUILD/pars/
  
          # Create a SPEC file
          echo 'Name: pars' > releases/rpm/SPECS/pars.spec
          echo 'Version: ${{ env.version }}' >> releases/rpm/SPECS/pars.spec
          echo 'Release: 1%{?dist}' >> releases/rpm/SPECS/pars.spec
          echo 'Summary: Pars' >> releases/rpm/SPECS/pars.spec
          echo 'License: MIT' >> releases/rpm/SPECS/pars.spec
          echo 'Source0: %{name}-%{version}.tar.gz' >> releases/rpm/SPECS/pars.spec
          echo '%description' >> releases/rpm/SPECS/pars.spec
          echo 'Pars.' >> releases/rpm/SPECS/pars.spec
          echo '%prep' >> releases/rpm/SPECS/pars.spec
          echo '%setup -q' >> releases/rpm/SPECS/pars.spec
          echo '%build' >> releases/rpm/SPECS/pars.spec
          echo '%install' >> releases/rpm/SPECS/pars.spec
          echo 'mkdir -p %{buildroot}/usr/local/bin' >> releases/rpm/SPECS/pars.spec
          echo 'cp -a pars %{buildroot}/usr/local/bin/' >> releases/rpm/SPECS/pars.spec
          echo '%files' >> releases/rpm/SPECS/pars.spec
          echo '/usr/local/bin/pars' >> releases/rpm/SPECS/pars.spec
          echo '%changelog' >> releases/rpm/SPECS/pars.spec
          echo '* Pars Dev Kit <info@parsdevkit.net>' >> releases/rpm/SPECS/pars.spec
          echo '- Initial RPM package.' >> releases/rpm/SPECS/pars.spec
  
          # Build the RPM
          rpmbuild -bb releases/rpm/SPECS/pars.spec


      - name: Archive .rpm Package
        run: tar -czvf releases/pars-linux-386.rpm.tar.gz -C releases/RPMS/x86_64/ pars-${{ env.version }}.x86_64.rpm
  
  


      - name: Upload Linux 386 Artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux-386-build
          path: |
            releases/pars-linux-386-bin.tar.gz
            releases/pars-linux-386.deb.tar.gz
            releases/pars-linux-386.rpm.tar.gz




      # ******************************************



      # - name: Set up Snapcraft
      #   run: |
      #     sudo apt update
      #     sudo apt install snapcraft -y

      # - name: Build Snap Package for i386
      #   run: |
      #     mkdir -p releases/snap/i386
      #     snapcraft --target-arch=i386 --destructive-mode --output releases/snap/i386/pars_i386.snap

      # - name: Archive i386 Snap Package
      #   run: |
      #     tar -czvf releases/linux/386/pars-linux-i386.snap.tar.gz -C releases/snap/i386 pars_i386.snap

      # - name: Upload i386 Snap Package
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: linux-build-i386-snap
      #     path: releases/linux/386/pars-linux-i386.snap.tar.gz


  # build-linux-amd64:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.21'

  #     - name: Get Tag Name
  #       id: get_tag_name
  #       run: |
  #         echo "Tag name is: ${{ github.ref }}"

  #         TAG_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
  #         echo "tag_name=$TAG_NAME" >> $GITHUB_ENV

  #         VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//')
  #         echo "version=$VERSION" >> $GITHUB_ENV


  #     - name: Build Binary
  #       working-directory: ./src
  #       run: |
  #         mkdir -p ../releases
  #         GOOS=linux GOARCH=amd64 go build -o ../releases/bin ./pars.go

  #     - name: Archive Binary Build
  #       run: tar -czvf releases/pars-linux-amd64-bin.tar.gz -C releases/ bin

        

  #     # ******************************************


  #     - name: Build .deb Package
  #       run: |
  #         mkdir -p releases/deb/DEBIAN
  #         mkdir -p releases/deb/usr/local/bin
  #         cp releases/bin releases/deb/usr/local/bin/
  #         echo "Package: Pars" > releases/deb/DEBIAN/control
  #         echo "Version: ${{ env.version }}" >> releases/deb/DEBIAN/control
  #         echo "Section: base" >> releases/deb/DEBIAN/control
  #         echo "Priority: optional" >> releases/deb/DEBIAN/control
  #         echo "Architecture: amd64" >> releases/deb/DEBIAN/control
  #         echo "Depends: libc6 (>= 2.7)" >> releases/deb/DEBIAN/control
  #         echo "Maintainer: Pars Dev Kit <info@parsdevkit.net>" >> releases/deb/DEBIAN/control
  #         echo "Description: Pars" >> releases/deb/DEBIAN/control
          
  #         dpkg-deb --build releases/deb releases/pars-linux-amd64.deb


  #     - name: Archive .deb Package
  #       run: tar -czvf releases/pars-linux-amd64.deb.tar.gz -C releases/ pars-linux-amd64.deb


          


  #     - name: Upload Linux amd64 Artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: linux-amd64-build
  #         path: |
  #           releases/pars-linux-amd64-bin.tar.gz
  #           releases/pars-linux-amd64.deb.tar.gz


  # build-linux-arm:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.21'

  #     - name: Get Tag Name
  #       id: get_tag_name
  #       run: |
  #         echo "Tag name is: ${{ github.ref }}"

  #         TAG_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
  #         echo "tag_name=$TAG_NAME" >> $GITHUB_ENV

  #         VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//')
  #         echo "version=$VERSION" >> $GITHUB_ENV


  #     - name: Build Binary
  #       working-directory: ./src
  #       run: |
  #         mkdir -p ../releases
  #         GOOS=linux GOARCH=arm go build -o ../releases/bin ./pars.go

  #     - name: Archive Binary Build
  #       run: tar -czvf releases/pars-linux-arm-bin.tar.gz -C releases/ bin

        


  #     # ******************************************


  #     - name: Build .deb Package
  #       run: |
  #         mkdir -p releases/deb/DEBIAN
  #         mkdir -p releases/deb/usr/local/bin
  #         cp releases/bin releases/deb/usr/local/bin/
  #         echo "Package: Pars" > releases/deb/DEBIAN/control
  #         echo "Version: ${{ env.version }}" >> releases/deb/DEBIAN/control
  #         echo "Section: base" >> releases/deb/DEBIAN/control
  #         echo "Priority: optional" >> releases/deb/DEBIAN/control
  #         echo "Architecture: armhf" >> releases/deb/DEBIAN/control
  #         echo "Depends: libc6 (>= 2.7)" >> releases/deb/DEBIAN/control
  #         echo "Maintainer: Pars Dev Kit <info@parsdevkit.net>" >> releases/deb/DEBIAN/control
  #         echo "Description: Pars" >> releases/deb/DEBIAN/control
          
  #         dpkg-deb --build releases/deb releases/pars-linux-arm.deb


  #     - name: Archive .deb Package
  #       run: tar -czvf releases/pars-linux-arm.deb.tar.gz -C releases/ pars-linux-arm.deb


  #     - name: Upload Linux arm Artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: linux-arm-build
  #         path: |
  #           releases/pars-linux-arm-bin.tar.gz
  #           releases/pars-linux-arm.deb.tar.gz


  # build-linux-arm64:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.21'

  #     - name: Get Tag Name
  #       id: get_tag_name
  #       run: |
  #         echo "Tag name is: ${{ github.ref }}"

  #         TAG_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
  #         echo "tag_name=$TAG_NAME" >> $GITHUB_ENV

  #         VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//')
  #         echo "version=$VERSION" >> $GITHUB_ENV


  #     - name: Build Binary
  #       working-directory: ./src
  #       run: |
  #         mkdir -p ../releases
  #         GOOS=linux GOARCH=arm64 go build -o ../releases/bin ./pars.go

  #     - name: Archive Binary Build
  #       run: tar -czvf releases/pars-linux-arm64-bin.tar.gz -C releases/ bin

        

  #     # ******************************************


  #     - name: Build .deb Package
  #       run: |
  #         mkdir -p releases/deb/DEBIAN
  #         mkdir -p releases/deb/usr/local/bin
  #         cp releases/bin releases/deb/usr/local/bin/
  #         echo "Package: Pars" > releases/deb/DEBIAN/control
  #         echo "Version: ${{ env.version }}" >> releases/deb/DEBIAN/control
  #         echo "Section: base" >> releases/deb/DEBIAN/control
  #         echo "Priority: optional" >> releases/deb/DEBIAN/control
  #         echo "Architecture: arm64" >> releases/deb/DEBIAN/control
  #         echo "Depends: libc6 (>= 2.7)" >> releases/deb/DEBIAN/control
  #         echo "Maintainer: Pars Dev Kit <info@parsdevkit.net>" >> releases/deb/DEBIAN/control
  #         echo "Description: Pars" >> releases/deb/DEBIAN/control
          
  #         dpkg-deb --build releases/deb releases/pars-linux-arm64.deb


  #     - name: Archive .deb Package
  #       run: tar -czvf releases/pars-linux-arm64.deb.tar.gz -C releases/ pars-linux-arm64.deb


  #     - name: Upload Linux arm64 Artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: linux-arm64-build
  #         path: |
  #           releases/pars-linux-arm64-bin.tar.gz
  #           releases/pars-linux-arm64.deb.tar.gz





  # build-darwin-amd64:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.21'

  #     - name: Build Darwin amd64
  #       working-directory: ./src
  #       run: |
  #         mkdir -p ../releases/darwin/amd64
  #         GOOS=darwin GOARCH=amd64 go build -o ../releases/darwin/amd64/pars ./pars.go

  #     - name: Archive Darwin Build
  #       run: tar -czvf releases/darwin/amd64/pars-darwin-amd64.tar.gz -C releases/darwin/amd64/ pars

  #     - name: Upload Darwin Artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: darwin-build-amd64
  #         path: releases/darwin/amd64/pars-darwin-amd64.tar.gz




  # build-darwin-arm64:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.21'


  #     - name: Build Darwin arm64
  #       working-directory: ./src
  #       run: |
  #         mkdir -p ../releases/darwin/arm64
  #         GOOS=darwin GOARCH=arm64 go build -o ../releases/darwin/arm64/pars ./pars.go

  #     - name: Archive Darwin Build
  #       run: tar -czvf releases/darwin/arm64/pars-darwin-arm64.tar.gz -C releases/darwin/arm64/ pars

  #     - name: Upload Darwin Artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: darwin-build-arm64
  #         path: releases/darwin/arm64/pars-darwin-arm64.tar.gz





  # build-windows-386:
  #   runs-on: windows-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.21'

  #     - name: Build Windows 386
  #       working-directory: ./src
  #       run: |
  #         mkdir -p ../releases/windows/386
  #         set GOOS=windows
  #         set GOARCH=386
  #         go build -o ../releases/windows/386/pars.exe ./pars.go

  #     - name: Archive Windows Build
  #       run: Compress-Archive -Path releases/windows/386/* -Destination releases/windows/386/pars-windows-386.zip


  #     - name: Upload Windows Artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: windows-build-386
  #         path: releases/windows/386/pars-windows-386.zip




  # build-windows-amd64:
  #   runs-on: windows-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.21'

  #     - name: Build Windows amd64
  #       working-directory: ./src
  #       run: |
  #         mkdir -p ../releases/windows/amd64
  #         set GOOS=windows
  #         set GOARCH=amd64
  #         go build -o ../releases/windows/amd64/pars.exe ./pars.go

  #     - name: Archive Windows Build
  #       run: Compress-Archive -Path releases/windows/amd64/* -Destination releases/windows/amd64/pars-windows-amd64.zip


  #     - name: Upload Windows Artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: windows-build-amd64
  #         path: releases/windows/amd64/pars-windows-amd64.zip


  create_release:
    needs: 
      - build-linux-386
      # - build-linux-amd64
      # - build-linux-arm
      # - build-linux-arm64
      # - build-windows-386
      # - build-windows-amd64
      # - build-darwin-amd64
      # - build-darwin-arm64
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Tag Name
        id: get_tag_name
        run: |
          echo "Tag name is: ${{ github.ref }}"
          TAG_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: Release ${{ env.tag_name }}
          body: "test"
          draft: false
          prerelease: false






      #  386


      - name: Download Linux 386 Artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-386-build
          path: releases





      - name: Upload Linux 386 Binary Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./releases/pars-linux-386-bin.tar.gz
          asset_name: pars-linux-386.tar.gz
          asset_content_type: application/gzip

          
      - name: Upload Linux 386 .deb Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./releases/pars-linux-386.deb.tar.gz
          asset_name: pars-linux-386.deb.tar.gz
          asset_content_type: application/gzip

          
      - name: Upload Linux 386 .rpm Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./releases/pars-linux-386.rpm.tar.gz
          asset_name: pars-linux-386.rpm.tar.gz
          asset_content_type: application/gzip






      # #  amd64


      # - name: Download Linux amd64 Artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: linux-amd64-build
      #     path: releases





      # - name: Upload Linux amd64 Binary Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./releases/pars-linux-amd64-bin.tar.gz
      #     asset_name: pars-linux-amd64.tar.gz
      #     asset_content_type: application/gzip

          
      # - name: Upload Linux amd64 .deb Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./releases/pars-linux-amd64.deb.tar.gz
      #     asset_name: pars-linux-amd64.deb.tar.gz
      #     asset_content_type: application/gzip







      # #  arm



      # - name: Download Linux arm Artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: linux-arm-build
      #     path: releases



          

      # - name: Upload Linux arm Binary Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./releases/pars-linux-arm-bin.tar.gz
      #     asset_name: pars-linux-arm.tar.gz
      #     asset_content_type: application/gzip

          
      # - name: Upload Linux arm .deb Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./releases/pars-linux-arm.deb.tar.gz
      #     asset_name: pars-linux-arm.deb.tar.gz
      #     asset_content_type: application/gzip





      # #  arm64


      # - name: Download Linux arm64 Artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: linux-arm64-build
      #     path: releases





      # - name: Upload Linux arm64 Binary Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./releases/pars-linux-arm64-bin.tar.gz
      #     asset_name: pars-linux-arm64.tar.gz
      #     asset_content_type: application/gzip

          
      # - name: Upload Linux arm64 .deb Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./releases/pars-linux-arm64.deb.tar.gz
      #     asset_name: pars-linux-arm64.deb.tar.gz
      #     asset_content_type: application/gzip







      # - name: Download Darwin Artifact amd64
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: darwin-build-amd64
      #     path: releases       


      # - name: Upload MacOS Release Asset amd64
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./releases/pars-darwin-amd64.tar.gz
      #     asset_name: pars-macos-amd64.tar.gz
      #     asset_content_type: application/gzip


      # - name: Download Darwin Artifact arm64
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: darwin-build-arm64
      #     path: releases       

      # - name: Upload MacOS Release Asset arm64
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./releases/pars-darwin-arm64.tar.gz
      #     asset_name: pars-macos-arm64.tar.gz
      #     asset_content_type: application/gzip



      # - name: Download Windows Artifact 386
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: windows-build-386
      #     path: releases

      # - name: Upload Windows Release Asset 386
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./releases/pars-windows-386.zip
      #     asset_name: pars-windows-386.zip
      #     asset_content_type: application/zip

      # - name: Download Windows Artifact amd64
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: windows-build-amd64
      #     path: releases


      # - name: Upload Windows Release Asset amd64
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./releases/pars-windows-amd64.zip
      #     asset_name: pars-windows-amd64.zip
      #     asset_content_type: application/zip

