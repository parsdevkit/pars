name: Release Branch Management

on:
  workflow_dispatch: # Supports manuel trigger
  push:
    branches:
      - dev

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout dev branch
      uses: actions/checkout@v3
      with:
        ref: dev

    - name: Set up Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

    - name: Set up script and VERSION permissions
      run: |
        chmod +x ./scripts/*
        chmod +x VERSION

    - name: Get WORKING_VERSION from VERSION file
      id: get-version
      run: |
        source ./scripts/functions.sh
        WORKING_VERSION=$(read_key_value "VERSION" "WORKING_VERSION" "v1.0.0")
        echo "WORKING_VERSION=$WORKING_VERSION" >> $GITHUB_ENV

    - name: Check if release branch exists
      run: |
        # Check if release/<version> branch exists
        if git ls-remote --heads origin release/$WORKING_VERSION | grep "refs/heads/release/$WORKING_VERSION"; then
          # If exists, fetch it and merge dev into it
          git fetch origin release/$WORKING_VERSION:release/$WORKING_VERSION
          git checkout release/$WORKING_VERSION
          git merge --allow-unrelated-histories --strategy-option theirs dev || true
        else
          # If not exists, create new release branch from dev
          git checkout -b release/$WORKING_VERSION
        fi
        # Push the updated release branch
        git push origin release/$WORKING_VERSION

    - name: Bump version in dev
      run: |
        git checkout dev
        ./scripts/bump-version.sh

        source ./scripts/functions.sh
        NEW_WORKING_VERSION=$(read_key_value "VERSION" "WORKING_VERSION" "v1.0.0")
        echo "NEW_WORKING_VERSION=$NEW_WORKING_VERSION" >> $GITHUB_ENV

        git commit -am "Bump version after release $NEW_WORKING_VERSION"
        git push origin dev

