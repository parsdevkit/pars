name: Dev Workflow

on:
  workflow_dispatch: # Manuel tetikleme desteÄŸi
  push:
    branches:
      - dev

jobs:
  dev-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up script and VERSION permissions
        run: |
          chmod +x ./scripts/*
          chmod +x VERSION

      - name: Get WORKING_VERSION
        id: get-version
        run: |
          source ./scripts/functions.sh
          WORKING_VERSION=$(read_key_value "VERSION" "WORKING_VERSION" "v1.0.0")
          echo "WORKING_VERSION=$WORKING_VERSION" >> $GITHUB_ENV

      - name: Check if release branch exists
        id: check-branch
        run: |
          if git ls-remote --exit-code --heads origin release/$WORKING_VERSION; then
            echo "Branch release/$WORKING_VERSION already exists."
            echo "BRANCH_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Branch release/$WORKING_VERSION does not exist."
            echo "BRANCH_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create release branch (if not exists)
        if: env.BRANCH_EXISTS == 'false'
        run: |
          echo "Creating release branch release/$WORKING_VERSION"
          git checkout dev
          git checkout -b release/$WORKING_VERSION
          git push origin release/$WORKING_VERSION
          git checkout dev

      - name: Fetch and checkout release branch (if exists)
        if: env.BRANCH_EXISTS == 'true'
        run: |
          echo "Fetching and checking out release branch release/$WORKING_VERSION"
          git fetch origin release/$WORKING_VERSION:release/$WORKING_VERSION
          git checkout release/$WORKING_VERSION

      - name: Merge dev into release branch
        if: env.BRANCH_EXISTS == 'true'
        run: |
          echo "Merging dev into release/$WORKING_VERSION"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git merge dev --no-ff --commit --allow-unrelated-histories -m "Merge dev into release/$WORKING_VERSION"
          git push origin release/$WORKING_VERSION
          git checkout dev
          
      - name: Bump DEV version
        run: |
          ./scripts/bump-version.sh

      - name: Get NEW_WORKING_VERSION
        id: get-new-version
        run: |
          source ./scripts/functions.sh
          NEW_WORKING_VERSION=$(read_key_value "VERSION" "WORKING_VERSION" "v1.0.0")
          echo "NEW_WORKING_VERSION=$NEW_WORKING_VERSION" >> $GITHUB_ENV

      - name: Commit and push updated version
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add VERSION
          git commit -m "Bump dev version to $NEW_WORKING_VERSION"
          git push origin dev
 