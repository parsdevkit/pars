var __index = {"config":{"lang":["en","tr"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Pars Documentation","text":""},{"location":"conventions.html","title":"Conventions","text":"<p>This section explains several conventions used in this documentation.</p>"},{"location":"conventions.html#symbols","title":"Symbols","text":"<p>This documentation use some symbols for illustration purposes. Before you read on, please make sure you've made yourself familiar with the following list of conventions:</p>"},{"location":"conventions.html#version","title":"\u2013 Version","text":"<p>The tag symbol in conjunction with a version number denotes when a specific feature or behavior was added. Make sure you're at least on this version if you want to use it.</p>"},{"location":"conventions.html#default","title":"\u2013 Default value","text":"<p>Some properties in <code>mkdocs.yml</code> have default values for when the author does not explicitly define them. The default value of the property is always included.</p>"},{"location":"conventions.html#default","title":"\u2013 Default value is computed","text":"<p>Some default values are not set to static values but computed from other values, like the site language, repository provider, or other settings.</p>"},{"location":"conventions.html#default","title":"\u2013 Default value is empty","text":"<p>Some properties do not contain default values. This means that the functionality that is associated with them is not available unless explicitly enabled.</p>"},{"location":"conventions.html#metadata","title":"\u2013 Metadata property","text":"<p>This symbol denotes that the thing described is a metadata property, which can be used in Markdown documents as part of the front matter definition.</p>"},{"location":"conventions.html#multiple-instances","title":"\u2013 Multiple instances","text":"<p>This symbol denotes that the plugin supports multiple instances, i.e, that it can be used multiple times in the <code>plugins</code> setting in <code>mkdocs.yml</code>.</p>"},{"location":"conventions.html#feature","title":"\u2013 Optional feature","text":"<p>Most of the features are hidden behind feature flags, which means they must be explicitly enabled via <code>mkdocs.yml</code>. This allows for the existence of potentially orthogonal features.</p>"},{"location":"conventions.html#experimental","title":"\u2013 Experimental","text":"<p>Some newer features are still considered experimental, which means they might (although rarely) change at any time, including their complete removal (which hasn't happened yet).</p>"},{"location":"conventions.html#plugin","title":"\u2013 Plugin","text":"<p>Several features are implemented through MkDocs excellent plugin architecture, some of which are built-in and distributed with Material for MkDocs, so no installation is required.</p>"},{"location":"conventions.html#extension","title":"\u2013 Markdown extension","text":"<p>This symbol denotes that the thing described is a Markdown extension, which can be enabled in <code>mkdocs.yml</code> and adds additional functionality to the Markdown parser.</p>"},{"location":"conventions.html#required","title":"\u2013 Required value","text":"<p>Some (very few in fact) properties or settings are required, which means the authors must explicitly define them.</p>"},{"location":"conventions.html#customization","title":"\u2013 Customization","text":"<p>This symbol denotes that the thing described is a customization that must be added by the author.</p>"},{"location":"conventions.html#utility","title":"\u2013 Utility","text":"<p>Besides plugins, there are some utilities that build on top of MkDocs in order to provide extended functionality, like for example support for versioning.</p> <p> </p>"},{"location":"glossary-index.html","title":"Glossary","text":"<p> <p> </p>"},{"location":"resources.html","title":"Resources","text":"<ul> <li>Doc Publishing</li> <li>MkDocs</li> <li>Python Markdown</li> <li>Multi markdown</li> <li></li> <li>material</li> <li>pymdown</li> <li>ezglossory</li> <li>versioning</li> </ul>"},{"location":"terms.html","title":"Terms","text":"Markdown Markdown is a plaintext language, which is simple and easy to learn.   886d7696-137e-4a59-a39d-6f7d311d5bd1:common:Markdown Environment It's fully isolated working area 886d7696-137e-4a59-a39d-6f7d311d5bd1:pars:Environment Help Command informations and usage details 886d7696-137e-4a59-a39d-6f7d311d5bd1:pars:Help Auto Completion Autocomplete for available options you typed and suggestions 886d7696-137e-4a59-a39d-6f7d311d5bd1:pars:Auto Completion bash Bash (Bourne Again SHell) is a command language interpreter that is widely used as the default shell on many Unix-like operating systems, including most Linux distributions and macOS. Bash provides a command-line interface that allows users to interact with the operating system by typing commands. It supports a wide range of features for scripting and automation, making it a powerful tool for both system administrators and developers. 886d7696-137e-4a59-a39d-6f7d311d5bd1:terminal:bash powershell PowerShell is a cross-platform task automation and configuration management framework from Microsoft, consisting of a command-line shell and associated scripting language. It is designed for system administrators and power users to control and automate the administration of operating systems and applications. 886d7696-137e-4a59-a39d-6f7d311d5bd1:terminal:powershell fish Fish (Friendly Interactive SHell) is a modern command-line shell designed to be user-friendly and feature-rich. It aims to be interactive and intuitive, providing a more pleasant experience for users compared to traditional shells like Bash. 886d7696-137e-4a59-a39d-6f7d311d5bd1:terminal:fish zsh Zsh (Z shell) is a powerful, flexible, and highly customizable Unix shell that incorporates features from other popular shells such as Bash, Ksh, and Tcsh. It is often used as an interactive login shell and a powerful scripting language interpreter. 886d7696-137e-4a59-a39d-6f7d311d5bd1:terminal:zsh"},{"location":"advanced/index.html","title":"Advanced","text":""},{"location":"advanced/advanced-usage/index.html","title":"Advanced Usage","text":""},{"location":"advanced/advanced-usage/autocompletion-and-filtering/commands.html","title":"Command Autocompletion and Filtering","text":"<p>The Pars CLI application supports subcommand autocompletion and filtering to enhance the user experience when working with various commands. This feature allows users to easily navigate and select available subcommands. This feature is available for all main commands that have subcommands.</p> <p>Usage Notes</p> <ul> <li>The autocompletion and filtering features are designed to improve efficiency and reduce errors when specifying subcommands.</li> <li>Ensure that the Pars CLI application is properly configured to support autocompletion (see Autocompletion Configuration for setup details).</li> <li>These features provide flexibility in navigating and selecting subcommands by filtering based on user input.</li> </ul> <p>By utilizing the subcommand autocompletion and filtering capabilities, users can quickly and accurately specify subcommands, enhancing the overall usability of the Pars CLI application.</p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/commands.html#tab-autocompletion","title":"Tab Autocompletion","text":"<ul> <li>When typing a main command, pressing the Tab key will list and autocomplete available subcommands.</li> <li>If a partial subcommand name is entered, pressing the Tab key will filter and list matching subcommands.</li> </ul> Example <p><pre><code>pars workspace &lt;Tab&gt;\n</code></pre> <pre>\nlist      describe   remove\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/commands.html#filtering","title":"Filtering","text":"<ul> <li>As you type, the Pars CLI will filter the subcommands based on the entered characters, showing only the relevant options.</li> <li>This feature helps in quickly locating and selecting the desired subcommand without typing the full name.</li> </ul> Example <p><pre><code>pars workspace de&lt;Tab&gt;\n</code></pre> <pre>\ndescribe\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/commands.html#notes","title":"Notes","text":"<p>To enable autocompletion for the Pars CLI application, ensure that the necessary configuration settings are correctly applied. Autocompletion significantly enhances user experience by allowing easy navigation and selection of commands, flags, and arguments.</p> <ul> <li>Ensure that the Pars CLI application has the necessary permissions and configurations to support autocompletion.</li> <li>For more detailed information and advanced configuration options, refer to the Autocompletion and Filtering Guide By configuring subcommand autocompletion, users can quickly and accurately specify subcommands, greatly enhancing the overall usability of the Pars CLI application.</li> </ul> <p> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/enumerations.html","title":"Enumeration Autocompletion and Filtering","text":"<p>The Pars CLI application supports enumeration completion for arguments and flags that accept predefined (enum) values. This feature provides suggestions and filtering for these parameters, enhancing user experience and reducing errors.</p> <p>Usage Notes</p> <ul> <li>The enumeration completion feature is designed to improve efficiency and reduce errors when specifying parameters with predefined values.</li> <li>Ensure that the Pars CLI application has access to the necessary enumeration definitions to provide accurate suggestions.</li> <li>These features are available for both arguments and flags, providing flexibility in specifying predefined values.</li> </ul> <p>By utilizing the path autocompletion and filtering capabilities, users can quickly and accurately specify paths, enhancing the overall usability of the Pars CLI application.</p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/enumerations.html#tab-autocompletion","title":"Tab Autocompletion","text":"<ul> <li>When specifying an argument or flag with predefined values, pressing the Tab key will list and autocomplete the available options.</li> <li>If a partial value is entered, pressing the Tab key will filter and list matching options.</li> </ul> <p>E</p> <pre><code>``` sh\npars workspace describe --view &lt;Tab&gt;\n```\n&lt;div class=\"result\" sh&gt;\n&lt;pre&gt;\nflat          hierarchical\n&lt;/pre&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/enumerations.html#filtering","title":"Filtering","text":"<ul> <li>As you type, the Pars CLI will filter the predefined values based on the entered characters, showing only the relevant options.</li> <li>This helps in quickly locating and selecting the desired value without typing the full option.</li> </ul> Example <p><pre><code>pars workspace describe --view h&lt;Tab&gt;\n</code></pre> <pre>\nhierarchical\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/enumerations.html#notes","title":"Notes","text":"<p>To enable autocompletion for the Pars CLI application, ensure that the necessary configuration settings are correctly applied. Autocompletion significantly enhances user experience by allowing easy navigation and selection of commands, flags, and arguments.</p> <ul> <li>Ensure that the Pars CLI application has the necessary permissions and configurations to support autocompletion.</li> <li>For more detailed information and advanced configuration options, refer to the Autocompletion and Filtering Guide By configuring subcommand autocompletion, users can quickly and accurately specify paths, greatly enhancing the overall usability of the Pars CLI application.</li> </ul> <p> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/groups.html","title":"Group Autocompletion and Filtering","text":"<p>The Pars CLI application supports group autocompletion and filtering to enhance the user experience when specifying group names. This feature allows users to easily navigate and select available groups. This feature is available for commands that require group names, such as the <code>--group</code> flag and other relevant arguments.</p> <p>Usage Notes</p> <ul> <li>The autocompletion and filtering features are designed to improve efficiency and reduce errors when specifying groups.</li> <li>Ensure that the Pars CLI application has the necessary permissions to access the group configurations being listed.</li> <li>These features provide flexibility in navigating and selecting groups by filtering based on user input.</li> </ul> <p>By utilizing the group autocompletion and filtering capabilities, users can quickly and accurately specify groups, enhancing the overall usability of the Pars CLI application.</p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/groups.html#tab-autocompletion","title":"Tab Autocompletion","text":"<ul> <li>When specifying a group, pressing the Tab key will list and autocomplete available groups.</li> <li>If a partial group name is entered, pressing the Tab key will filter and list matching groups.</li> </ul> Example <p><pre><code>pars group remove &lt;Tab&gt;\n</code></pre> <pre>\nAlphaGroup      BetaGroup     GammaGroup\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/groups.html#filtering","title":"Filtering","text":"<ul> <li>As you type, the CLI will filter the groups based on the entered characters, showing only the relevant options.</li> <li>This feature helps in quickly locating and selecting the desired group without typing the full name.</li> </ul> Example <p><pre><code>pars group remove Al&lt;Tab&gt;\n</code></pre> <pre>\nAlphaGroup\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/groups.html#notes","title":"Notes","text":"<p>To enable autocompletion for the Pars CLI application, ensure that the necessary configuration settings are correctly applied. Autocompletion significantly enhances user experience by allowing easy navigation and selection of commands, flags, and arguments.</p> <ul> <li>Ensure that the Pars CLI application has the necessary permissions and configurations to support autocompletion.</li> <li>For more detailed information and advanced configuration options, refer to the Autocompletion and Filtering Guide By configuring subcommand autocompletion, users can quickly and accurately specify groups, greatly enhancing the overall usability of the Pars CLI application.</li> </ul> <p> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/paths.html","title":"Path Autocompletion and Filtering","text":"<p>The Pars CLI application supports path autocompletion and filtering to enhance the user experience when specifying paths. This feature allows users to easily navigate and select files or directories within the current directory or by using absolute paths. This feature is available not only for the <code>--file</code> flag but also for other arguments that accept paths as input.</p> <p>Usage Notes</p> <ul> <li>The autocompletion and filtering features are designed to improve efficiency and reduce errors when specifying paths.</li> <li>Ensure that the Pars CLI application has the necessary permissions to access the directories and files being listed.</li> <li>These features are available for both relative and absolute paths, providing flexibility in navigating the filesystem.</li> </ul> <p>By utilizing the path autocompletion and filtering capabilities, users can quickly and accurately specify paths, enhancing the overall usability of the Pars CLI application.</p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/paths.html#tab-autocompletion","title":"Tab Autocompletion","text":"<ul> <li>When specifying a path, pressing the Tab key will list and autocomplete available files and directories within the current directory.</li> <li>If a partial path is entered, pressing the Tab key will filter and list matching files and directories.</li> </ul> Example <p><pre><code>pars group new --file &lt;Tab&gt;\n</code></pre> <pre>\nOrionTech.yaml      NeptuneDev.yaml     ApexSolutions.yaml\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/paths.html#filtering","title":"Filtering","text":"<ul> <li>As you type, the Pars CLI will filter the files and directories based on the entered characters, showing only the relevant options.</li> <li>This feature helps in quickly locating and selecting the desired file or directory without typing the full path.</li> </ul> Example <p><pre><code>pars group new --file ne&lt;Tab&gt;\n</code></pre> <pre>\nNeptuneDev.yaml\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/paths.html#absolute-path-support","title":"Absolute Path Support","text":"<ul> <li>Users can also enter absolute paths. Pressing the Tab key will list and autocomplete files and directories starting from the specified root.</li> <li>This is useful for navigating the entire filesystem and selecting files or directories located in different parts of the system.</li> </ul> Example <p><pre><code>pars group new --file C:/samples/&lt;Tab&gt;\n</code></pre> <pre>\nOrionTech.yaml      NeptuneDev.yaml     ApexSolutions.yaml\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/paths.html#notes","title":"Notes","text":"<p>To enable autocompletion for the Pars CLI application, ensure that the necessary configuration settings are correctly applied. Autocompletion significantly enhances user experience by allowing easy navigation and selection of commands, flags, and arguments.</p> <ul> <li>Ensure that the Pars CLI application has the necessary permissions and configurations to support autocompletion.</li> <li>For more detailed information and advanced configuration options, refer to the Autocompletion and Filtering Guide By configuring subcommand autocompletion, users can quickly and accurately specify paths, greatly enhancing the overall usability of the Pars CLI application.</li> </ul> <p> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/resources.html","title":"Resource Autocompletion and Filtering","text":"<p>The Pars CLI application supports resource autocompletion and filtering to enhance the user experience when specifying resource names. This feature allows users to easily navigate and select available resources. This feature is available for commands that require resource names, such as the <code>--resource</code> flag and other relevant arguments.</p> <p>Usage Notes</p> <ul> <li>The autocompletion and filtering features are designed to improve efficiency and reduce errors when specifying resources.</li> <li>Ensure that the Pars CLI application has the necessary permissions to access the resource configurations being listed.</li> <li>These features provide flexibility in navigating and selecting resources by filtering based on user input.</li> </ul> <p>By utilizing the resource autocompletion and filtering capabilities, users can quickly and accurately specify resources, enhancing the overall usability of the Pars CLI application.</p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/resources.html#tab-autocompletion","title":"Tab Autocompletion","text":"<ul> <li>When specifying a resource, pressing the Tab key will list and autocomplete available resources.</li> <li>If a partial resource name is entered, pressing the Tab key will filter and list matching resources.</li> </ul> Example <p><pre><code>pars resource remove &lt;Tab&gt;\n</code></pre> <pre>\nProductCategory_SeedData      ProductBrand_SeedData     Product_SeedData\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/resources.html#filtering","title":"Filtering","text":"<ul> <li>As you type, the CLI will filter the resources based on the entered characters, showing only the relevant options.</li> <li>This feature helps in quickly locating and selecting the desired resource without typing the full name.</li> </ul> Example <p><pre><code>pars resource remove ProductCat&lt;Tab&gt;\n</code></pre> <pre>\nProductCategory_SeedData\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/resources.html#notes","title":"Notes","text":"<p>To enable autocompletion for the Pars CLI application, ensure that the necessary configuration settings are correctly applied. Autocompletion significantly enhances user experience by allowing easy navigation and selection of commands, flags, and arguments.</p> <ul> <li>Ensure that the Pars CLI application has the necessary permissions and configurations to support autocompletion.</li> <li>For more detailed information and advanced configuration options, refer to the Autocompletion and Filtering Guide By configuring subcommand autocompletion, users can quickly and accurately specify resources, greatly enhancing the overall usability of the Pars CLI application.</li> </ul> <p> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/templates.html","title":"Template Autocompletion and Filtering","text":"<p>The Pars CLI application supports template autocompletion and filtering to enhance the user experience when specifying template names. This feature allows users to easily navigate and select available templates. This feature is available for commands that require template names, such as the <code>--template</code> flag and other relevant arguments.</p> <p>Usage Notes</p> <ul> <li>The autocompletion and filtering features are designed to improve efficiency and reduce errors when specifying templates.</li> <li>Ensure that the Pars CLI application has the necessary permissions to access the template configurations being listed.</li> <li>These features provide flexibility in navigating and selecting templates by filtering based on user input.</li> </ul> <p>By utilizing the template autocompletion and filtering capabilities, users can quickly and accurately specify templates, enhancing the overall usability of the Pars CLI application.</p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/templates.html#tab-autocompletion","title":"Tab Autocompletion","text":"<ul> <li>When specifying a template, pressing the Tab key will list and autocomplete available templates.</li> <li>If a partial template name is entered, pressing the Tab key will filter and list matching templates.</li> </ul> Example <p><pre><code>pars template describe &lt;Tab&gt;\n</code></pre> <pre>\nAlphaTemplate      BetaTemplate     GammaTemplate\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/templates.html#filtering","title":"Filtering","text":"<ul> <li>As you type, the CLI will filter the templates based on the entered characters, showing only the relevant options.</li> <li>This feature helps in quickly locating and selecting the desired template without typing the full name.</li> </ul> Example <p><pre><code>pars template describe Al&lt;Tab&gt;\n</code></pre> <pre>\nAlphaTemplate\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/templates.html#notes","title":"Notes","text":"<p>To enable autocompletion for the Pars CLI application, ensure that the necessary configuration settings are correctly applied. Autocompletion significantly enhances user experience by allowing easy navigation and selection of commands, flags, and arguments.</p> <ul> <li>Ensure that the Pars CLI application has the necessary permissions and configurations to support autocompletion.</li> <li>For more detailed information and advanced configuration options, refer to the Autocompletion and Filtering Guide By configuring subcommand autocompletion, users can quickly and accurately specify templates, greatly enhancing the overall usability of the Pars CLI application.</li> </ul> <p> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/workspaces.html","title":"Workspace Autocompletion and Filtering","text":"<p>The Pars CLI application supports workspace autocompletion and filtering to enhance the user experience when specifying workspace names. This feature allows users to easily navigate and select available workspaces. This feature is available for commands that require workspace names, such as the <code>--workspace</code> flag and other relevant arguments.</p> <p>Usage Notes</p> <ul> <li>The autocompletion and filtering features are designed to improve efficiency and reduce errors when specifying workspaces.</li> <li>Ensure that the Pars CLI application has the necessary permissions to access the workspace configurations being listed.</li> <li>These features provide flexibility in navigating and selecting workspaces by filtering based on user input.</li> </ul> <p>By utilizing the workspace autocompletion and filtering capabilities, users can quickly and accurately specify workspaces, enhancing the overall usability of the Pars CLI application.</p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/workspaces.html#tab-autocompletion","title":"Tab Autocompletion","text":"<ul> <li>When specifying a workspace, pressing the Tab key will list and autocomplete available workspaces.</li> <li>If a partial workspace name is entered, pressing the Tab key will filter and list matching workspaces.</li> </ul> Example <p><pre><code>pars workspace describe &lt;Tab&gt;\n</code></pre> <pre>\nOmicronConsulting      EpsilonEnterprises     ZetaSystems\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/workspaces.html#filtering","title":"Filtering","text":"<ul> <li>As you type, the CLI will filter the workspaces based on the entered characters, showing only the relevant options.</li> <li>This feature helps in quickly locating and selecting the desired workspace without typing the full name.</li> </ul> Example <p><pre><code>pars workspace describe Om&lt;Tab&gt;\n</code></pre> <pre>\nOmicronConsulting\n</pre> </p>"},{"location":"advanced/advanced-usage/autocompletion-and-filtering/workspaces.html#notes","title":"Notes","text":"<p>To enable autocompletion for the Pars CLI application, ensure that the necessary configuration settings are correctly applied. Autocompletion significantly enhances user experience by allowing easy navigation and selection of commands, flags, and arguments.</p> <ul> <li>Ensure that the Pars CLI application has the necessary permissions and configurations to support autocompletion.</li> <li>For more detailed information and advanced configuration options, refer to the Autocompletion and Filtering Guide By configuring subcommand autocompletion, users can quickly and accurately specify workspaces, greatly enhancing the overall usability of the Pars CLI application.</li> </ul> <p> </p>"},{"location":"advanced/best-practices/index.html","title":"Best Practices","text":""},{"location":"advanced/use-cases/index.html","title":"Best Practices","text":""},{"location":"contributing/index.html","title":"Contributing","text":""},{"location":"extensions/index.html","title":"Extensions","text":""},{"location":"extensions/languages/index.html","title":"Languages","text":"<ul> <li> <p> C#</p> <p>Manage C# projects, including supported versions, and type correspondence. Detailed documentation for C# development with Pars.</p> <p> Getting started</p> </li> <li> <p> Go</p> <p>Manage Go projects, including supported versions, and type correspondence, and dependencies. Essential resources for Go programming and layer management with Pars.</p> <p> Getting started</p> </li> <li> <p> TypeScript</p> <p>Manage TypeScript projects, including supported versions, and type correspondence. Comprehensive resources for TypeScript development with Pars.</p> <p> Getting started</p> </li> <li> <p> JavaScript</p> <p>Manage JavaScript projects, including supported versions, and type correspondence. Comprehensive resources for JavaScript development with Pars.</p> <p> Getting started</p> </li> </ul> <p> </p>"},{"location":"extensions/languages/csharp.html","title":"C#","text":""},{"location":"extensions/languages/csharp.html#overview","title":"Overview","text":"<p>C# is a modern, object-oriented programming language developed by Microsoft. It is widely used for developing web applications, desktop applications, mobile applications, games, and more.</p>"},{"location":"extensions/languages/csharp.html#supported-versions","title":"Supported Versions","text":"<ul> <li>C# 7.0</li> <li>C# 7.1</li> <li>C# 7.2</li> <li>C# 7.3</li> <li>C# 8.0</li> <li>C# 9.0</li> <li>C# 10.0</li> <li>C# 11.0</li> </ul>"},{"location":"extensions/languages/csharp.html#data-type-correspondence","title":"Data Type Correspondence","text":"Pars Data Type C# Data Type Description Object object The base type for all other types. Bit bool Represents a binary digit, either 0 or 1. UInt8 (UByte) byte Unsigned 8-bit integer. Int8 (Byte) sbyte Signed 8-bit integer. UInt16 (UShort) ushort Unsigned 16-bit integer. Int16 (Short) short Signed 16-bit integer. UInt32 (UInt) uint Unsigned 32-bit integer. Int32 (Int) int Signed 32-bit integer. UInt64 (ULong) ulong Unsigned 64-bit integer. Int64 (Long) long Signed 64-bit integer. UInt128 ulong Unsigned 128-bit integer (represented by <code>ulong</code> in C#). Int128 long Signed 128-bit integer (represented by <code>long</code> in C#). Float16 float 16-bit floating-point number (represented by <code>float</code> in C#). Float32 (Float) float 32-bit floating-point number (single precision). Float64 (Double) double 64-bit floating-point number (double precision). Float128 double 128-bit floating-point number (represented by <code>double</code> in C#). Decimal decimal Represents fixed-point numbers with specific decimal places. String string Represents a sequence of characters. Char char Represents a single character. Boolean bool Represents a logical value, either <code>true</code> or <code>false</code>. Blob byte[] Represents a Binary Large Object. Time DateTime Represents time-related data such as dates, times, or durations. <p>Notes:</p> <ul> <li>Some types such as <code>UInt128</code>, <code>Int128</code>, <code>Float16</code>, and <code>Float128</code> do not have direct equivalents in C#. They are represented using the closest available types (<code>ulong</code>, <code>long</code>, and <code>double</code>).</li> <li><code>Blob</code> is represented as a <code>byte[]</code> in C#, suitable for handling binary data.</li> </ul> <p>This guide provides an overview of the C# language's capabilities, including supported versions and data type correspondence.</p> <p> </p>"},{"location":"extensions/languages/go.html","title":"Go","text":""},{"location":"extensions/languages/go.html#overview","title":"Overview","text":"<p>Go, also known as Golang, is an open-source programming language developed by Google. It is known for its simplicity, efficiency, and strong concurrency support, making it ideal for developing web servers, distributed systems, and other networked services.</p>"},{"location":"extensions/languages/go.html#supported-languages","title":"Supported Languages","text":"<ul> <li><code>Go</code></li> </ul>"},{"location":"extensions/languages/go.html#platform-versions","title":"Platform Versions","text":"<ul> <li>Go 1.12</li> <li>Go 1.13</li> <li>Go 1.14</li> <li>Go 1.15</li> <li>Go 1.16</li> <li>Go 1.17</li> <li>Go 1.18</li> <li>Go 1.19</li> <li>Go 1.20</li> </ul>"},{"location":"extensions/languages/go.html#supported-versions","title":"Supported Versions","text":"<ul> <li>Go 1.12</li> <li>Go 1.13</li> <li>Go 1.14</li> <li>Go 1.15</li> <li>Go 1.16</li> <li>Go 1.17</li> <li>Go 1.18</li> <li>Go 1.19</li> <li>Go 1.20</li> </ul> <p>This guide provides an overview of the Go language's capabilities, including supported versions and data type correspondence.</p> <p> </p>"},{"location":"extensions/languages/javascript.html","title":"JavaScript","text":""},{"location":"extensions/languages/javascript.html#overview","title":"Overview","text":"<p>JavaScript is a dynamic, high-level, interpreted programming language. It is widely used for web development to create interactive effects within web browsers, but it can also be used for server-side development, mobile apps, and more.</p>"},{"location":"extensions/languages/javascript.html#supported-versions","title":"Supported Versions","text":"<ul> <li>ES5</li> <li>ES6 (ES2015)</li> <li>ES7 (ES2016)</li> <li>ES8 (ES2017)</li> <li>ES9 (ES2018)</li> <li>ES10 (ES2019)</li> <li>ES11 (ES2020)</li> <li>ES12 (ES2021)</li> <li>ES13 (ES2022)</li> </ul>"},{"location":"extensions/languages/javascript.html#data-type-correspondence","title":"Data Type Correspondence","text":"Pars Data Type JavaScript Data Type Description Object Object The base type for all other types. Bit Boolean Represents a binary digit, either 0 or 1. UInt8 (UByte) Number Unsigned 8-bit integer. Int8 (Byte) Number Signed 8-bit integer. UInt16 (UShort) Number Unsigned 16-bit integer. Int16 (Short) Number Signed 16-bit integer. UInt32 (UInt) Number Unsigned 32-bit integer. Int32 (Int) Number Signed 32-bit integer. UInt64 (ULong) Number Unsigned 64-bit integer. Int64 (Long) Number Signed 64-bit integer. UInt128 Number Unsigned 128-bit integer. Int128 Number Signed 128-bit integer. Float16 Number 16-bit floating-point number. Float32 (Float) Number 32-bit floating-point number (single precision). Float64 (Double) Number 64-bit floating-point number (double precision). Float128 Number 128-bit floating-point number. Decimal Number Represents fixed-point numbers with specific decimal places. String String Represents a sequence of characters. Char String Represents a single character. Boolean Boolean Represents a logical value, either <code>true</code> or <code>false</code>. Blob Blob Represents a Binary Large Object. Time Date Represents time-related data such as dates, times, or durations. <p>Notes:</p> <ul> <li>Some types such as <code>UInt128</code>, <code>Int128</code>, <code>Float16</code>, and <code>Float128</code> do not have direct equivalents in JavaScript. They are represented using the closest available type, <code>Number</code>.</li> <li><code>Blob</code> is represented as a <code>Blob</code> in JavaScript, suitable for handling binary data.</li> </ul> <p>This guide provides an overview of the JavaScript language's capabilities, including supported versions and data type correspondence.</p> <p> </p>"},{"location":"extensions/languages/typescript.html","title":"TypeScript","text":""},{"location":"extensions/languages/typescript.html#overview","title":"Overview","text":"<p>TypeScript is a strongly typed superset of JavaScript that compiles to plain JavaScript. It is developed and maintained by Microsoft, and it brings optional static types, classes, and interfaces to JavaScript, making it suitable for large-scale application development.</p>"},{"location":"extensions/languages/typescript.html#supported-versions","title":"Supported Versions","text":"<ul> <li>TypeScript 3.x</li> <li>TypeScript 4.x</li> <li>TypeScript 5.x</li> </ul>"},{"location":"extensions/languages/typescript.html#data-type-correspondence","title":"Data Type Correspondence","text":"Pars Data Type TypeScript Data Type Description Object Object The base type for all other types. Bit boolean Represents a binary digit, either 0 or 1. UInt8 (UByte) number Unsigned 8-bit integer. Int8 (Byte) number Signed 8-bit integer. UInt16 (UShort) number Unsigned 16-bit integer. Int16 (Short) number Signed 16-bit integer. UInt32 (UInt) number Unsigned 32-bit integer. Int32 (Int) number Signed 32-bit integer. UInt64 (ULong) number Unsigned 64-bit integer. Int64 (Long) number Signed 64-bit integer. UInt128 number Unsigned 128-bit integer. Int128 number Signed 128-bit integer. Float16 number 16-bit floating-point number. Float32 (Float) number 32-bit floating-point number (single precision). Float64 (Double) number 64-bit floating-point number (double precision). Float128 number 128-bit floating-point number. Decimal number Represents fixed-point numbers with specific decimal places. String string Represents a sequence of characters. Char string Represents a single character. Boolean boolean Represents a logical value, either <code>true</code> or <code>false</code>. Blob Blob Represents a Binary Large Object. Time Date Represents time-related data such as dates, times, or durations. <p>Notes:</p> <ul> <li>Some types such as <code>UInt128</code>, <code>Int128</code>, <code>Float16</code>, and <code>Float128</code> do not have direct equivalents in TypeScript. They are represented using the closest available type, <code>number</code>.</li> <li><code>Blob</code> is represented as a <code>Blob</code> in TypeScript, suitable for handling binary data.</li> </ul> <p>This guide provides an overview of the TypeScript language's capabilities, including supported versions and data type correspondence.</p> <p> </p>"},{"location":"extensions/modules/index.html","title":"Modules","text":""},{"location":"extensions/packages/index.html","title":"Packages","text":""},{"location":"extensions/platforms/index.html","title":"Platforms","text":"<ul> <li> <p> Dotnet</p> <p>Manage .NET projects, including runtime, project types, programming languages, and layer management. Detailed documentation for .NET development with Pars.</p> <p> Getting started</p> </li> <li> <p> Go</p> <p>Oversee Go project structure, runtime, project types, and dependencies. Essential resources for Go programming and layer management with Pars.</p> <p> Getting started</p> </li> <li> <p> NodeJS</p> <p>Handle Node.js project references, packages, inter-project relationships, and layer management. Comprehensive guide to using Pars with Node.js.</p> <p> Getting started</p> </li> <li> <p> Angular</p> <p>Administer Angular projects, including supported runtimes, project types, and languages. Complete documentation for integrating Pars with Angular.</p> <p> Getting started</p> </li> </ul> <p> </p>"},{"location":"extensions/platforms/angular.html","title":"Angular","text":""},{"location":"extensions/platforms/angular.html#overview","title":"Overview","text":"<p>The Angular platform supports various project types using the Angular framework. It allows the creation of single-page applications, web applications, and libraries.</p>"},{"location":"extensions/platforms/angular.html#supported-project-types","title":"Supported Project Types","text":"<ul> <li><code>spa</code> (Single-Page Application)</li> <li><code>webapp</code></li> <li><code>library</code></li> </ul>"},{"location":"extensions/platforms/angular.html#supported-languages","title":"Supported Languages","text":"<ul> <li><code>TypeScript</code></li> <li><code>JavaScript</code></li> </ul>"},{"location":"extensions/platforms/angular.html#platform-versions","title":"Platform Versions","text":"<ul> <li>Angular 6</li> <li>Angular 7</li> <li>Angular 8</li> <li>Angular 9</li> <li>Angular 10</li> <li>Angular 11</li> <li>Angular 12</li> <li>Angular 13</li> <li>Angular 14</li> <li>Angular 15</li> </ul>"},{"location":"extensions/platforms/angular.html#runtime-versions","title":"Runtime Versions","text":"<ul> <li>Node.js 8.x</li> <li>Node.js 10.x</li> <li>Node.js 12.x</li> <li>Node.js 14.x</li> <li>Node.js 16.x</li> <li>Node.js 18.x</li> <li>Node.js 20.x</li> </ul>"},{"location":"extensions/platforms/angular.html#package-manager","title":"Package Manager","text":"<ul> <li>The Angular platform supports external packages through the npm package manager. Support for additional package managers like yarn and pnpm will be available in the future.</li> </ul> <p>This guide provides an overview of the Angular platform's capabilities, including supported project types, languages, platform and runtime versions, and external package management through npm. Future updates will include support for additional package managers.</p> <p> </p>"},{"location":"extensions/platforms/dotnet.html","title":"Dotnet","text":""},{"location":"extensions/platforms/dotnet.html#overview","title":"Overview","text":"<p>The Dotnet platform supports various project types using the dotnet framework. It allows the creation of web APIs, web applications, console applications, desktop applications, libraries, and mobile applications.</p>"},{"location":"extensions/platforms/dotnet.html#supported-project-types","title":"Supported Project Types","text":"<ul> <li><code>webapi</code></li> <li><code>webapp</code></li> <li><code>console</code></li> <li><code>desktop</code></li> <li><code>library</code></li> <li><code>mobile</code></li> </ul>"},{"location":"extensions/platforms/dotnet.html#supported-languages","title":"Supported Languages","text":"<ul> <li><code>C#</code></li> </ul>"},{"location":"extensions/platforms/dotnet.html#platform-versions","title":"Platform Versions","text":"<ul> <li>.NET Core 2.0</li> <li>.NET Core 2.1</li> <li>.NET Core 2.2</li> <li>.NET Core 3.0</li> <li>.NET Core 3.1</li> <li>.NET 5</li> <li>.NET 6</li> <li>.NET 7</li> <li>.NET 8</li> </ul>"},{"location":"extensions/platforms/dotnet.html#runtime-versions","title":"Runtime Versions","text":"<ul> <li>.NET Core 2.0</li> <li>.NET Core 2.1</li> <li>.NET Core 2.2</li> <li>.NET Core 3.0</li> <li>.NET Core 3.1</li> <li>.NET 5</li> <li>.NET 6</li> <li>.NET 7</li> <li>.NET 8</li> </ul>"},{"location":"extensions/platforms/dotnet.html#package-manager","title":"Package Manager","text":"<ul> <li>The Dotnet platform supports external packages through the NuGet package manager. Support for additional package registries will be available in the future.</li> </ul> <p>This guide provides an overview of the Dotnet platform's capabilities, including supported project types, languages, platform and runtime versions, and external package management through NuGet. Future updates will include support for additional package registries.</p> <p> </p>"},{"location":"extensions/platforms/go.html","title":"GO","text":"<p>The Golang platform supports various project types using the Go programming language. It allows the creation of web services, command-line applications, desktop applications, libraries, and more.</p>"},{"location":"extensions/platforms/go.html#supported-project-types","title":"Supported Project Types","text":"<ul> <li><code>console</code></li> <li><code>library</code></li> </ul>"},{"location":"extensions/platforms/go.html#supported-languages","title":"Supported Languages","text":"<ul> <li><code>go</code></li> </ul>"},{"location":"extensions/platforms/go.html#platform-versions","title":"Platform Versions","text":"<ul> <li>Go 1.12</li> <li>Go 1.13</li> <li>Go 1.14</li> <li>Go 1.15</li> <li>Go 1.16</li> <li>Go 1.17</li> <li>Go 1.18</li> <li>Go 1.19</li> <li>Go 1.20</li> </ul>"},{"location":"extensions/platforms/go.html#runtime-versions","title":"Runtime Versions","text":"<ul> <li>Go 1.12</li> <li>Go 1.13</li> <li>Go 1.14</li> <li>Go 1.15</li> <li>Go 1.16</li> <li>Go 1.17</li> <li>Go 1.18</li> <li>Go 1.19</li> <li>Go 1.20</li> </ul>"},{"location":"extensions/platforms/go.html#package-manager","title":"Package Manager","text":"<ul> <li>The Golang platform supports external packages through the Go Modules package manager. Support for additional package registries will be available in the future.</li> </ul>"},{"location":"extensions/platforms/go.html#data-type-correspondence","title":"Data Type Correspondence","text":""},{"location":"extensions/platforms/go.html#data-type-correspondence_1","title":"Data Type Correspondence","text":"Pars Data Type Go Data Type Description Object interface{} The base type for all other types. Bit bool Represents a binary digit, either 0 or 1. UInt8 (UByte) uint8 Unsigned 8-bit integer. Int8 (Byte) int8 Signed 8-bit integer. UInt16 (UShort) uint16 Unsigned 16-bit integer. Int16 (Short) int16 Signed 16-bit integer. UInt32 (UInt) uint32 Unsigned 32-bit integer. Int32 (Int) int32 Signed 32-bit integer. UInt64 (ULong) uint64 Unsigned 64-bit integer. Int64 (Long) int64 Signed 64-bit integer. UInt128 uint64 Unsigned 128-bit integer (represented by <code>uint64</code> in Go). Int128 int64 Signed 128-bit integer (represented by <code>int64</code> in Go). Float16 float32 16-bit floating-point number (represented by <code>float32</code> in Go). Float32 (Float) float32 32-bit floating-point number (single precision). Float64 (Double) float64 64-bit floating-point number (double precision). Float128 float64 128-bit floating-point number (represented by <code>float64</code> in Go). Decimal float64 Represents fixed-point numbers with specific decimal places. String string Represents a sequence of characters. Char rune Represents a single character. Boolean bool Represents a logical value, either <code>true</code> or <code>false</code>. Blob []byte Represents a Binary Large Object. Time time.Time Represents time-related data such as dates, times, or durations. <p>Notes:</p> <ul> <li>Some types such as <code>UInt128</code>, <code>Int128</code>, <code>Float16</code>, and <code>Float128</code> do not have direct equivalents in Go. They are represented using the closest available types (<code>uint64</code>, <code>int64</code>, <code>float32</code>, and <code>float64</code>).</li> <li><code>Blob</code> is represented as a <code>[]byte</code> in Go, suitable for handling binary data.</li> </ul> <p>This guide provides an overview of the Golang platform's capabilities, including supported project types, languages, platform and runtime versions, and external package management through Go Modules. Future updates will include support for additional package registries</p> <p> </p>"},{"location":"extensions/platforms/nodejs.html","title":"Node.js","text":""},{"location":"extensions/platforms/nodejs.html#overview","title":"Overview","text":"<p>The Node.js platform supports various project types using the Node.js runtime. It allows the creation of web applications, APIs, command-line tools, desktop applications using Electron, and libraries.</p>"},{"location":"extensions/platforms/nodejs.html#supported-project-types","title":"Supported Project Types","text":"<ul> <li><code>webapp</code></li> <li><code>api</code></li> <li><code>cli</code></li> <li><code>desktop</code></li> <li><code>library</code></li> </ul>"},{"location":"extensions/platforms/nodejs.html#supported-languages","title":"Supported Languages","text":"<ul> <li><code>TypeScript</code></li> <li><code>JavaScript</code></li> </ul>"},{"location":"extensions/platforms/nodejs.html#platform-versions","title":"Platform Versions","text":"<ul> <li>Node.js 8.x</li> <li>Node.js 10.x</li> <li>Node.js 12.x</li> <li>Node.js 14.x</li> <li>Node.js 16.x</li> <li>Node.js 18.x</li> <li>Node.js 20.x</li> </ul>"},{"location":"extensions/platforms/nodejs.html#runtime-versions","title":"Runtime Versions","text":"<ul> <li>Node.js 8.x</li> <li>Node.js 10.x</li> <li>Node.js 12.x</li> <li>Node.js 14.x</li> <li>Node.js 16.x</li> <li>Node.js 18.x</li> <li>Node.js 20.x</li> </ul>"},{"location":"extensions/platforms/nodejs.html#package-manager","title":"Package Manager","text":"<ul> <li>The Node.js platform supports external packages through the npm package manager. Support for additional package managers like yarn and pnpm will be available in the future.</li> </ul> <p>This guide provides an overview of the Node.js platform's capabilities, including supported project types, languages, platform and runtime versions, and external package management through npm. Future updates will include support for additional package managers.</p> <p> </p>"},{"location":"extensions/plugins/index.html","title":"Plugins","text":""},{"location":"extensions/providers/index.html","title":"Plugins","text":""},{"location":"extras/model-samples/angular-frontend.html","title":"Angular Frontend Project","text":"<p>This guide provides a step-by-step example of creating a basic Angular frontend project. It includes the necessary configurations for platform, runtime, language, and dependencies.</p> <pre><code>type: Project\nkind: Application\nname: Example.AngularFrontend\nmetadata:\n  tags: [frontend, angular]\nspecifications:\n  name: AngularFrontend\n  platform:\n    type: Angular\n    version: 12\n  runtime:\n    type: NodeJS\n    version: 14\n  language:\n    type: TypeScript\n    version: 4.3\n  project_type: spa\n  package: com.example.angularfrontend\n  path: /frontend/angularfrontend\n  configuration:\n    layers:\n    - name: Components\n      path: components\n      package: com.example.angularfrontend.components\n    - name: Services\n      path: services\n      package: com.example.angularfrontend.services\n    dependencies:\n    - name: @angular/core\n      version: 12.0.0\n    - name: rxjs\n      version: 6.6.0\n</code></pre>"},{"location":"extras/model-samples/angular-frontend.html#key-sections-explained","title":"Key Sections Explained","text":"<ul> <li>type: The type of the project. Always set to <code>Project</code>.</li> <li>kind: The kind of the project. Should be <code>Application</code>.</li> <li>name: A unique identifier for your project.</li> <li>metadata: Additional information about your project. Here, tags like <code>frontend</code> and <code>angular</code> are used.</li> <li>specifications: Detailed configuration of your project.<ul> <li>name: The name of the project instance.</li> <li>platform: Specifies the platform type and version. Here, <code>Angular</code> version 12 is used.</li> <li>runtime: Specifies the runtime environment. Here, <code>NodeJS</code> version 14 is used.</li> <li>language: Specifies the programming language and version. Here, <code>TypeScript</code> version 4.3 is used.</li> <li>project_type: The type of the project. Here, it is a <code>spa</code> (single-page application).</li> <li>package: The package or namespace for the project.</li> <li>path: The relative path where the project will be located.</li> <li>configuration: Configuration details for the project.<ul> <li>layers: Defines the directory and package structure.</li> <li>dependencies: Lists the external dependencies, such as NPM packages.</li> </ul> </li> </ul> </li> </ul>"},{"location":"extras/model-samples/angular-frontend.html#detailed-steps","title":"Detailed Steps","text":"<ol> <li> <p>Set Project Type and Kind:</p> <ul> <li>Ensure <code>type</code> is <code>Project</code> and <code>kind</code> is <code>Application</code>.</li> </ul> </li> <li> <p>Provide Unique Name:</p> <ul> <li>Set a unique name for the project under <code>name</code> (e.g., <code>Example.AngularFrontend</code>).</li> </ul> </li> <li> <p>Add Metadata Tags:</p> <ul> <li>Use <code>metadata</code> to add tags like <code>frontend</code> and <code>angular</code>.</li> </ul> </li> <li> <p>Define Specifications:</p> <ul> <li>name: The name of the project instance (e.g., <code>AngularFrontend</code>).</li> <li>platform: Specify the platform type and version (e.g., <code>Angular</code> version 12).</li> <li>runtime: Specify the runtime environment (e.g., <code>NodeJS</code> version 14).</li> <li>language: Specify the programming language and version (e.g., <code>TypeScript</code> version 4.3).</li> <li>project_type: Define the type of the project (e.g., <code>spa</code>).</li> <li>package: Define the package or namespace for the project (e.g., <code>com.example.angularfrontend</code>).</li> <li>path: Specify the relative path where the project will be located (e.g., <code>/frontend/angularfrontend</code>).</li> </ul> </li> <li> <p>Configure Layers:</p> <ul> <li>Define layers for organizing the project's directory and package structure.</li> <li>Example layers:<ul> <li>Components: Contains Angular components.</li> <li>Services: Contains services for business logic.</li> </ul> </li> </ul> </li> <li> <p>Specify Dependencies:</p> <ul> <li>List external dependencies using NPM packages.</li> <li>Example dependencies:<ul> <li><code>@angular/core</code> version 12.0.0</li> <li><code>rxjs</code> version 6.6.0</li> </ul> </li> </ul> </li> </ol> <p>This example shows how to configure a basic Angular frontend project with the necessary settings for platform, runtime, language, layers, and dependencies. Follow these steps and use the YAML structure provided to create a fully functional Angular frontend project.</p> <p>By following this guide, you will have a clear understanding of how to set up a basic Angular frontend project with the required configurations. This serves as a foundation for more advanced configurations and customizations.</p> <p> </p>"},{"location":"extras/model-samples/application-projects.html","title":"Application Projects","text":""},{"location":"extras/model-samples/application-projects.html#comprehensive-examples-for-project","title":"Comprehensive Examples for Project","text":"<ul> <li>Basic Dotnet WebAPI Project</li> <li>NodeJS Microservice Project</li> <li>Dotnet Console Application</li> <li>Angular Frontend Project</li> <li>Microservices Architecture with Multiple Projects</li> </ul>"},{"location":"extras/model-samples/basic-dotnet-webapi.html","title":"Basic Dotnet WebAPI Project","text":"<p>This guide provides a step-by-step example of creating a basic Dotnet WebAPI project. It includes the necessary configurations for platform, runtime, language, and dependencies.</p> <pre><code>type: Project\nkind: Application\nname: Example.DotnetWebAPI\nmetadata:\n  tags: [backend, dotnet]\nspecifications:\n  name: DotnetWebAPI\n  platform:\n    type: Dotnet\n    version: 6\n  runtime:\n    type: Dotnet\n    version: 6\n  language:\n    type: CSharp\n    version: 9\n  project_type: webapi\n  package: com.example.dotnetwebapi\n  path: /services/dotnetwebapi\n  configuration:\n    layers:\n    - name: Controllers\n      path: controllers\n      package: com.example.dotnetwebapi.controllers\n    - name: Services\n      path: services\n      package: com.example.dotnetwebapi.services\n    dependencies:\n    - name: Microsoft.EntityFrameworkCore\n      version: 5.0.0\n    - name: Microsoft.AspNetCore.Mvc\n      version: 2.2.0\n</code></pre>"},{"location":"extras/model-samples/basic-dotnet-webapi.html#key-sections-explained","title":"Key Sections Explained","text":"<ul> <li>type: The type of the project. Always set to <code>Project</code>.</li> <li>kind: The kind of the project. Should be <code>Application</code>.</li> <li>name: A unique identifier for your project.</li> <li>metadata: Additional information about your project. Here, tags like <code>backend</code> and <code>dotnet</code> are used.</li> <li>specifications: Detailed configuration of your project.<ul> <li>name: The name of the project instance.</li> <li>platform: Specifies the platform type and version. Here, <code>Dotnet</code> version 6 is used.</li> <li>runtime: Specifies the runtime environment. Here, <code>Dotnet</code> version 6 is used.</li> <li>language: Specifies the programming language and version. Here, <code>CSharp</code> version 9 is used.</li> <li>project_type: The type of the project. Here, it is a <code>webapi</code>.</li> <li>package: The package or namespace for the project.</li> <li>path: The relative path where the project will be located.</li> <li>configuration: Configuration details for the project.<ul> <li>layers: Defines the directory and package structure.</li> <li>dependencies: Lists the external dependencies, such as NuGet packages.</li> </ul> </li> </ul> </li> </ul>"},{"location":"extras/model-samples/basic-dotnet-webapi.html#detailed-steps","title":"Detailed Steps","text":"<ol> <li> <p>Set Project Type and Kind:</p> <ul> <li>Ensure <code>type</code> is <code>Project</code> and <code>kind</code> is <code>Application</code>.</li> </ul> </li> <li> <p>Provide Unique Name:</p> <ul> <li>Set a unique name for the project under <code>name</code> (e.g., <code>Example.DotnetWebAPI</code>).</li> </ul> </li> <li> <p>Add Metadata Tags:</p> <ul> <li>Use <code>metadata</code> to add tags like <code>backend</code> and <code>dotnet</code>.</li> </ul> </li> <li> <p>Define Specifications:</p> <ul> <li>name: The name of the project instance (e.g., <code>DotnetWebAPI</code>).</li> <li>platform: Specify the platform type and version (e.g., <code>Dotnet</code> version 6).</li> <li>runtime: Specify the runtime environment (e.g., <code>Dotnet</code> version 6).</li> <li>language: Specify the programming language and version (e.g., <code>CSharp</code> version 9).</li> <li>project_type: Define the type of the project (e.g., <code>webapi</code>).</li> <li>package: Define the package or namespace for the project (e.g., <code>com.example.dotnetwebapi</code>).</li> <li>path: Specify the relative path where the project will be located (e.g., <code>/services/dotnetwebapi</code>).</li> </ul> </li> <li> <p>Configure Layers:</p> <ul> <li>Define layers for organizing the project's directory and package structure.</li> <li>Example layers:<ul> <li>Controllers: Manages HTTP requests.</li> <li>Services: Contains business logic.</li> </ul> </li> </ul> </li> <li> <p>Specify Dependencies:</p> <ul> <li>List external dependencies using NuGet packages.</li> <li>Example dependencies:<ul> <li><code>Microsoft.EntityFrameworkCore</code> version 5.0.0</li> <li><code>Microsoft.AspNetCore.Mvc</code> version 2.2.0</li> </ul> </li> </ul> </li> </ol> <p>This example shows how to configure a basic Dotnet WebAPI project with the necessary settings for platform, runtime, language, layers, and dependencies. Follow these steps and use the YAML structure provided to create a fully functional Dotnet WebAPI project.</p> <p>By following this guide, you will have a clear understanding of how to set up a basic Dotnet WebAPI project with the required configurations. This serves as a foundation for more advanced configurations and customizations.</p> <p> </p>"},{"location":"extras/model-samples/dotnet-console.html","title":"Dotnet Console Application","text":"<p>This guide provides a step-by-step example of creating a basic Dotnet console application. It includes the necessary configurations for platform, runtime, language, and dependencies.</p> <pre><code>type: Project\nkind: Application\nname: Example.DotnetConsoleApp\nmetadata:\n  tags: [console, dotnet]\nspecifications:\n  name: DotnetConsoleApp\n  platform:\n    type: Dotnet\n    version: 6\n  runtime:\n    type: Dotnet\n    version: 6\n  language:\n    type: CSharp\n    version: 9\n  project_type: console\n  package: com.example.dotnetconsoleapp\n  path: /apps/dotnetconsoleapp\n  configuration:\n    layers:\n    - name: Program\n      path: program\n      package: com.example.dotnetconsoleapp.program\n    dependencies:\n    - name: Newtonsoft.Json\n      version: 13.0.1\n</code></pre>"},{"location":"extras/model-samples/dotnet-console.html#key-sections-explained","title":"Key Sections Explained","text":"<ul> <li>type: The type of the project. Always set to <code>Project</code>.</li> <li>kind: The kind of the project. Should be <code>Application</code>.</li> <li>name: A unique identifier for your project.</li> <li>metadata: Additional information about your project. Here, tags like <code>console</code> and <code>dotnet</code> are used.</li> <li>specifications: Detailed configuration of your project.<ul> <li>name: The name of the project instance.</li> <li>platform: Specifies the platform type and version. Here, <code>Dotnet</code> version 6 is used.</li> <li>runtime: Specifies the runtime environment. Here, <code>Dotnet</code> version 6 is used.</li> <li>language: Specifies the programming language and version. Here, <code>CSharp</code> version 9 is used.</li> <li>project_type: The type of the project. Here, it is a <code>console</code>.</li> <li>package: The package or namespace for the project.</li> <li>path: The relative path where the project will be located.</li> <li>configuration: Configuration details for the project.<ul> <li>layers: Defines the directory and package structure.</li> <li>dependencies: Lists the external dependencies, such as NuGet packages.</li> </ul> </li> </ul> </li> </ul>"},{"location":"extras/model-samples/dotnet-console.html#detailed-steps","title":"Detailed Steps","text":"<ol> <li> <p>Set Project Type and Kind:</p> <ul> <li>Ensure <code>type</code> is <code>Project</code> and <code>kind</code> is <code>Application</code>.</li> </ul> </li> <li> <p>Provide Unique Name:</p> <ul> <li>Set a unique name for the project under <code>name</code> (e.g., <code>Example.DotnetConsoleApp</code>).</li> </ul> </li> <li> <p>Add Metadata Tags:</p> <ul> <li>Use <code>metadata</code> to add tags like <code>console</code> and <code>dotnet</code>.</li> </ul> </li> <li> <p>Define Specifications:</p> <ul> <li>name: The name of the project instance (e.g., <code>DotnetConsoleApp</code>).</li> <li>platform: Specify the platform type and version (e.g., <code>Dotnet</code> version 6).</li> <li>runtime: Specify the runtime environment (e.g., <code>Dotnet</code> version 6).</li> <li>language: Specify the programming language and version (e.g., <code>CSharp</code> version 9).</li> <li>project_type: Define the type of the project (e.g., <code>console</code>).</li> <li>package: Define the package or namespace for the project (e.g., <code>com.example.dotnetconsoleapp</code>).</li> <li>path: Specify the relative path where the project will be located (e.g., <code>/apps/dotnetconsoleapp</code>).</li> </ul> </li> <li> <p>Configure Layers:</p> <ul> <li>Define layers for organizing the project's directory and package structure.</li> <li>Example layer:<ul> <li>Program: Contains the main program logic.</li> </ul> </li> </ul> </li> <li> <p>Specify Dependencies:</p> <ul> <li>List external dependencies using NuGet packages.</li> <li>Example dependency:<ul> <li><code>Newtonsoft.Json</code> version 13.0.1</li> </ul> </li> </ul> </li> </ol> <p>This example shows how to configure a basic Dotnet console application with the necessary settings for platform, runtime, language, layers, and dependencies. Follow these steps and use the YAML structure provided to create a fully functional Dotnet console application.</p> <p>By following this guide, you will have a clear understanding of how to set up a basic Dotnet console application with the required configurations. This serves as a foundation for more advanced configurations and customizations.</p> <p> </p>"},{"location":"extras/model-samples/microservices-architecture-with-multiple.html","title":"Microservices Architecture with Multiple Projects","text":"<p>This guide provides a step-by-step example of setting up a microservices architecture with multiple interconnected projects. It includes the necessary configurations for platform, runtime, language, and dependencies.</p> <pre><code># Project 1: User Service (Dotnet WebAPI)\ntype: Project\nkind: Application\nname: Example.ServiceA\nmetadata:\n  tags: [backend, dotnet, serviceA]\nspecifications:\n  name: ServiceA\n  platform:\n    type: Dotnet\n    version: 6\n  runtime:\n    type: Dotnet\n    version: 6\n  language:\n    type: CSharp\n    version: 9\n  project_type: webapi\n  package: com.example.serviceA\n  path: /services/serviceA\n  configuration:\n    layers:\n    - name: Controllers\n      path: controllers\n      package: com.example.serviceA.controllers\n    - name: Services\n      path: services\n      package: com.example.serviceA.services\n    dependencies:\n    - name: Microsoft.EntityFrameworkCore\n      version: 5.0.0\n    - name: Microsoft.AspNetCore.Mvc\n      version: 2.2.0\n\n\n---\n# Project 2: Product Service (NodeJS Microservice)\ntype: Project\nkind: Application\nname: Example.ServiceB\nmetadata:\n  tags: [backend, nodejs, serviceB]\nspecifications:\n  name: ServiceB\n  platform:\n    type: NodeJS\n    version: 14\n  runtime:\n    type: NodeJS\n    version: 14\n  language:\n    type: JavaScript\n    version: ES6\n  project_type: webapi\n  package: com.example.serviceB\n  path: /services/serviceB\n  configuration:\n    layers:\n    - name: Controllers\n      path: controllers\n      package: com.example.serviceB.controllers\n    - name: Services\n      path: services\n      package: com.example.serviceB.services\n    dependencies:\n    - name: express\n      version: 4.17.1\n    - name: mongoose\n      version: 5.10.9\n\n---\n# Project 3: Order Service (Go Lang Backend Service)\ntype: Project\nkind: Application\nname: Example.ServiceC\nmetadata:\n  tags: [backend, golang, serviceC]\nspecifications:\n  name: ServiceC\n  platform:\n    type: Go\n    version: 1.16\n  runtime:\n    type: Go\n    version: 1.16\n  language:\n    type: Go\n    version: 1.16\n  project_type: webapi\n  package: com.example.serviceC\n  path: /services/serviceC\n  configuration:\n    layers:\n    - name: Handlers\n      path: handlers\n      package: com.example.serviceC.handlers\n    - name: Services\n      path: services\n      package: com.example.serviceC.services\n    dependencies:\n    - name: github.com/gin-gonic/gin\n      version: 1.7.2\n    - name: github.com/jinzhu\n</code></pre>"},{"location":"extras/model-samples/microservices-architecture-with-multiple.html#key-sections-explained","title":"Key Sections Explained","text":"<p>Project 1: User Service (Dotnet WebAPI)</p> <ul> <li>type: The type of the project. Always set to <code>Project</code>.</li> <li>kind: The kind of the project. Should be <code>Application</code>.</li> <li>name: A unique identifier for your project.</li> <li>metadata: Additional information about your project. Here, tags like <code>backend</code>, <code>dotnet</code>, and <code>microservice</code> are used.</li> <li>specifications: Detailed configuration of your project.<ul> <li>name: The name of the project instance.</li> <li>platform: Specifies the platform type and version. Here, <code>Dotnet</code> version 6 is used.</li> <li>runtime: Specifies the runtime environment. Here, <code>Dotnet</code> version 6 is used.</li> <li>language: Specifies the programming language and version. Here, <code>CSharp</code> version 9 is used.</li> <li>project_type: The type of the project. Here, it is a <code>webapi</code>.</li> <li>package: The package or namespace for the project.</li> <li>path: The relative path where the project will be located.</li> <li>configuration: Configuration details for the project.<ul> <li>layers: Defines the directory and package structure.</li> <li>dependencies: Lists the external dependencies, such as NuGet packages.</li> </ul> </li> </ul> </li> </ul> <p>Project 2: Product Service (NodeJS Microservice)</p> <ul> <li>type: The type of the project. Always set to <code>Project</code>.</li> <li>kind: The kind of the project. Should be <code>Application</code>.</li> <li>name: A unique identifier for your project.</li> <li>metadata: Additional information about your project. Here, tags like <code>backend</code>, <code>nodejs</code>, and <code>microservice</code> are used.</li> <li>specifications: Detailed configuration of your project.<ul> <li>name: The name of the project instance.</li> <li>platform: Specifies the platform type and version. Here, <code>NodeJS</code> version 14 is used.</li> <li>runtime: Specifies the runtime environment. Here, <code>NodeJS</code> version 14 is used.</li> <li>language: Specifies the programming language and version. Here, <code>JavaScript</code> version ES6 is used.</li> <li>project_type: The type of the project. Here, it is a <code>webapi</code>.</li> <li>package: The package or namespace for the project.</li> <li>path: The relative path where the project will be located.</li> <li>configuration: Configuration details for the project.<ul> <li>layers: Defines the directory and package structure.</li> <li>dependencies: Lists the external dependencies, such as NPM packages.</li> </ul> </li> </ul> </li> </ul> <p>Project 3: Order Service (Go Lang Backend Service)</p> <ul> <li>type: The type of the project. Always set to <code>Project</code>.</li> <li>kind: The kind of the project. Should be <code>Application</code>.</li> <li>name: A unique identifier for your project.</li> <li>metadata: Additional information about your project. Here, tags like <code>backend</code>, <code>go</code>, and <code>microservice</code> are used.</li> <li>specifications: Detailed configuration of your project.<ul> <li>name: The name of the project instance.</li> <li>platform: Specifies the platform type and version. Here, <code>Go</code> version 1.16 is used.</li> <li>runtime: Specifies the runtime environment. Here, <code>Go</code> version 1.16 is used.</li> <li>language: Specifies the programming language and version. Here, <code>Go</code> version 1.16 is used.</li> <li>project_type: The type of the project. Here, it is a <code>webapi</code>.</li> <li>package: The package or namespace for the project.</li> <li>path: The relative path where the project will be located.</li> <li>configuration: Configuration details for the project.<ul> <li>layers: Defines the directory and package structure.</li> <li>dependencies: Lists the external dependencies, such as Go modules.</li> </ul> </li> </ul> </li> </ul>"},{"location":"extras/model-samples/microservices-architecture-with-multiple.html#detailed-steps","title":"Detailed Steps","text":"<p>Project 1: User Service (Dotnet WebAPI)</p> <ol> <li> <p>Set Project Type and Kind:</p> <ul> <li>Ensure <code>type</code> is <code>Project</code> and <code>kind</code> is <code>Application</code>.</li> </ul> </li> <li> <p>Provide Unique Name:</p> <ul> <li>Set a unique name for the project under <code>name</code> (e.g., <code>UserService</code>).</li> </ul> </li> <li> <p>Add Metadata Tags:</p> <ul> <li>Use <code>metadata</code> to add tags like <code>backend</code>, <code>dotnet</code>, and <code>microservice</code>.</li> </ul> </li> <li> <p>Define Specifications:</p> <ul> <li>name: The name of the project instance (e.g., <code>UserService</code>).</li> <li>platform: Specify the platform type and version (e.g., <code>Dotnet</code> version 6).</li> <li>runtime: Specify the runtime environment (e.g., <code>Dotnet</code> version 6).</li> <li>language: Specify the programming language and version (e.g., <code>CSharp</code> version 9).</li> <li>project_type: Define the type of the project (e.g., <code>webapi</code>).</li> <li>package: Define the package or namespace for the project (e.g., <code>com.example.microservices.userservice</code>).</li> <li>path: Specify the relative path where the project will be located (e.g., <code>/services/userservice</code>).</li> </ul> </li> <li> <p>Configure Layers:</p> <ul> <li>Define layers for organizing the project's directory and package structure.</li> <li>Example layers:<ul> <li>Controllers: Manages HTTP requests.</li> <li>Services: Contains business logic.</li> </ul> </li> </ul> </li> <li> <p>Specify Dependencies:</p> <ul> <li>List external dependencies using NuGet packages.</li> <li>Example dependencies:<ul> <li><code>Microsoft.EntityFrameworkCore</code> version 5.0.0</li> <li><code>Microsoft.AspNetCore.Mvc</code> version 2.2.0</li> </ul> </li> </ul> </li> </ol> <p>Project 2: Product Service (NodeJS Microservice)</p> <ol> <li> <p>Set Project Type and Kind:</p> <ul> <li>Ensure <code>type</code> is <code>Project</code> and <code>kind</code> is <code>Application</code>.</li> </ul> </li> <li> <p>Provide Unique Name:</p> <ul> <li>Set a unique name for the project under <code>name</code> (e.g., <code>ProductService</code>).</li> </ul> </li> <li> <p>Add Metadata Tags:</p> <ul> <li>Use <code>metadata</code> to add tags like <code>backend</code>, <code>nodejs</code>, and <code>microservice</code>.</li> </ul> </li> <li> <p>Define Specifications:</p> <ul> <li>name: The name of the project instance (e.g., <code>ProductService</code>).</li> <li>platform: Specify the platform type and version (e.g., <code>NodeJS</code> version 14).</li> <li>runtime: Specify the runtime environment (e.g., <code>NodeJS</code> version 14).</li> <li>language: Specify the programming language and version (e.g., <code>JavaScript</code> version ES6).</li> <li>project_type: Define the type of the project (e.g., <code>webapi</code>).</li> <li>package: Define the package or namespace for the project (e.g., <code>com.example.microservices.productservice</code>).</li> <li>path: Specify the relative path where the project will be located (e.g., <code>/services/productservice</code>).</li> </ul> </li> <li> <p>Configure Layers:</p> <ul> <li>Define layers for organizing the project's directory and package structure.</li> <li>Example layers:<ul> <li>Controllers: Manages HTTP requests.</li> <li>Services: Contains business logic.</li> </ul> </li> </ul> </li> <li> <p>Specify Dependencies:</p> <ul> <li>List external dependencies using NPM packages.</li> <li>Example dependencies:<ul> <li><code>express</code> version 4.17.1</li> <li><code>mongoose</code> version 5.10.9</li> </ul> </li> </ul> </li> </ol> <p>Project 3: Order Service (Go Lang Backend Service)</p> <ol> <li> <p>Set Project Type and Kind:</p> <ul> <li>Ensure <code>type</code> is <code>Project</code> and <code>kind</code> is <code>Application</code>.</li> </ul> </li> <li> <p>Provide Unique Name:</p> <ul> <li>Set a unique name for the project under <code>name</code> (e.g., <code>OrderService</code>).</li> </ul> </li> <li> <p>Add Metadata Tags:</p> <ul> <li>Use <code>metadata</code> to add tags like <code>backend</code>, <code>go</code>, and <code>microservice</code>.</li> </ul> </li> <li> <p>Define Specifications:</p> <ul> <li>name: The name of the project instance (e.g., <code>OrderService</code>).</li> <li>platform: Specify the platform type and version (e.g., <code>Go</code> version 1.16).</li> <li>runtime: Specify the runtime environment (e.g., <code>Go</code> version 1.16).</li> <li>language: Specify the programming language and version (e.g., <code>Go</code> version 1.16).</li> <li>project_type: Define the type of the project (e.g., <code>webapi</code>).</li> <li>package: Define the package or namespace for the project (e.g., <code>com.example.microservices.orderservice</code>).</li> <li>path: Specify the relative path where the project will be located (e.g., <code>/services/orderservice</code>).</li> </ul> </li> <li> <p>Configure Layers:</p> <ul> <li>Define layers for organizing the project's directory and package structure.</li> <li>Example layers:<ul> <li>Controllers: Manages HTTP requests.</li> <li>Services: Contains business logic.</li> </ul> </li> </ul> </li> <li> <p>Specify Dependencies:</p> <ul> <li>List external dependencies using Go modules.</li> <li>Example dependencies:<ul> <li><code>github.com/gorilla/mux</code> version v1.8.0</li> <li><code>github.com/jinzhu/gorm</code> version v1.9.16</li> </ul> </li> </ul> </li> </ol> <p>This example shows how to configure a microservice project consist of Dotnet WebAPI, NodeJS and Go Lang backend projects for the Services by different platforms with the necessary settings for platform, runtime, language, layers, and dependencies. Follow these steps and use the YAML structure provided to create a fully functional Dotnet WebAPI project for the User Service.</p> <p>By following this guide, you will have a clear understanding of how to set up a microservice project with the required configurations. This serves as a foundation for more advanced configurations and customizations.</p> <p> </p>"},{"location":"extras/model-samples/nodejs-microservice.html","title":"NodeJS Microservice Project","text":"<p>This guide provides a step-by-step example of creating a basic NodeJS microservice project. It includes the necessary configurations for platform, runtime, language, and dependencies.</p> <pre><code>type: Project\nkind: Application\nname: Example.NodeJSMicroservice\nmetadata:\n  tags: [backend, nodejs]\nspecifications:\n  name: NodeJSMicroservice\n  platform:\n    type: NodeJS\n    version: 14\n  runtime:\n    type: NodeJS\n    version: 14\n  language:\n    type: JavaScript\n    version: ES6\n  project_type: webapi\n  package: com.example.nodejsmicroservice\n  path: /services/nodejsmicroservice\n  configuration:\n    layers:\n    - name: Controllers\n      path: controllers\n      package: com.example.nodejsmicroservice.controllers\n    - name: Services\n      path: services\n      package: com.example.nodejsmicroservice.services\n    dependencies:\n    - name: express\n      version: 4.17.1\n    - name: mongoose\n      version: 5.10.9\n</code></pre>"},{"location":"extras/model-samples/nodejs-microservice.html#key-sections-explained","title":"Key Sections Explained","text":"<ul> <li>type: The type of the project. Always set to <code>Project</code>.</li> <li>kind: The kind of the project. Should be <code>Application</code>.</li> <li>name: A unique identifier for your project.</li> <li>metadata: Additional information about your project. Here, tags like <code>backend</code> and <code>nodejs</code> are used.</li> <li>specifications: Detailed configuration of your project.<ul> <li>name: The name of the project instance.</li> <li>platform: Specifies the platform type and version. Here, <code>NodeJS</code> version 14 is used.</li> <li>runtime: Specifies the runtime environment. Here, <code>NodeJS</code> version 14 is used.</li> <li>language: Specifies the programming language and version. Here, <code>JavaScript</code> version ES6 is used.</li> <li>project_type: The type of the project. Here, it is a <code>webapi</code>.</li> <li>package: The package or namespace for the project.</li> <li>path: The relative path where the project will be located.</li> <li>configuration: Configuration details for the project.<ul> <li>layers: Defines the directory and package structure.</li> <li>dependencies: Lists the external dependencies, such as NPM packages.</li> </ul> </li> </ul> </li> </ul>"},{"location":"extras/model-samples/nodejs-microservice.html#detailed-steps","title":"Detailed Steps","text":"<ol> <li> <p>Set Project Type and Kind:</p> <ul> <li>Ensure <code>type</code> is <code>Project</code> and <code>kind</code> is <code>Application</code>.</li> </ul> </li> <li> <p>Provide Unique Name:</p> <ul> <li>Set a unique name for the project under <code>name</code> (e.g., <code>Example.NodeJSMicroservice</code>).</li> </ul> </li> <li> <p>Add Metadata Tags:</p> <ul> <li>Use <code>metadata</code> to add tags like <code>backend</code> and <code>nodejs</code>.</li> </ul> </li> <li> <p>Define Specifications:</p> <ul> <li>name: The name of the project instance (e.g., <code>NodeJSMicroservice</code>).</li> <li>platform: Specify the platform type and version (e.g., <code>NodeJS</code> version 14).</li> <li>runtime: Specify the runtime environment (e.g., <code>NodeJS</code> version 14).</li> <li>language: Specify the programming language and version (e.g., <code>JavaScript</code> version ES6).</li> <li>project_type: Define the type of the project (e.g., <code>webapi</code>).</li> <li>package: Define the package or namespace for the project (e.g., <code>com.example.nodejsmicroservice</code>).</li> <li>path: Specify the relative path where the project will be located (e.g., <code>/services/nodejsmicroservice</code>).</li> </ul> </li> <li> <p>Configure Layers:</p> <ul> <li>Define layers for organizing the project's directory and package structure.</li> <li>Example layers:<ul> <li>Controllers: Manages HTTP requests.</li> <li>Services: Contains business logic.</li> </ul> </li> </ul> </li> <li> <p>Specify Dependencies:</p> <ul> <li>List external dependencies using NPM packages.</li> <li>Example dependencies:<ul> <li><code>express</code> version 4.17.1</li> <li><code>mongoose</code> version 5.10.9</li> </ul> </li> </ul> </li> </ol> <p>This example shows how to configure a basic NodeJS microservice project with the necessary settings for platform, runtime, language, layers, and dependencies. Follow these steps and use the YAML structure provided to create a fully functional NodeJS microservice project.</p> <p>By following this guide, you will have a clear understanding of how to set up a basic NodeJS microservice project with the required configurations. This serves as a foundation for more advanced configurations and customizations.</p> <p> </p>"},{"location":"getting-started/concept/index.html","title":"Pars Overview","text":""},{"location":"getting-started/concept/index.html#introduction","title":"Introduction","text":"<p>Pars is a developer tool designed to accelerate the software development process for software architects and developers. It achieves this by generating dynamic code, boilerplate, and various developer tools, managing the entire process from project creation to project deployment. Utilizing the CLI, Pars documents the usage of the terminal application, explaining how to use commands, how they work, and how to create configuration files. Pars provides user-friendly, detailed, and step-by-step explanations, ensuring clarity in technical terms and using examples for better understanding.</p>"},{"location":"getting-started/concept/index.html#key-features","title":"Key Features","text":"<ul> <li>Dynamic Code Generation: Create templates conforming to the architecture, speeding up the development process.</li> <li>Boilerplate Code: Automate the generation of repetitive code, allowing developers to focus on core functionality.</li> <li>Developer Tools: Include tools to assist in various stages of development, from project setup to deployment.</li> <li>Project Management: Automate and manage various project functions like build management and package management.</li> <li>Workspace Organization: Projects are organized within a physical section called a workspace.</li> <li>Flexible and Comprehensive Architecture: Utilize templates, resources, and sections for versatile and comprehensive code generation suitable for various architectures.</li> </ul>"},{"location":"getting-started/concept/index.html#core-concepts","title":"Core Concepts","text":""},{"location":"getting-started/concept/index.html#workspace","title":"Workspace","text":"<p>A workspace is a physical section where projects are organized. It acts as the main directory containing all projects and their associated files, ensuring a structured and manageable development environment.</p>"},{"location":"getting-started/concept/index.html#set","title":"Set","text":"<p>A set manages the relationships of projects independent of the workspace. Projects, templates, and resources are related through the \"set\" information and operations are applied to the specified set. A set represents the entirety of an application. In a traditional architecture, it can define the whole application like an e-commerce project \"AcmeECommerce\" in a monorepo, whereas in a microservice architecture, it can define all microservices, all MFE projects, and libraries also as \"AcmeECommerce\".</p>"},{"location":"getting-started/concept/index.html#layer","title":"Layer","text":"<p>A layer includes the path and package information within the project where a component resides. It organizes the structure of contents within the project, ensuring proper organization and management of project elements.</p>"},{"location":"getting-started/concept/index.html#group","title":"Group","text":"<p>A group facilitates the aggregation of relationships and dependencies of one or more projects under the same application framework. Depending on the platform, it can generate physical files similar to solutions in the .NET ecosystem.</p>"},{"location":"getting-started/concept/index.html#project","title":"Project","text":"<p>A project within Pars is a comprehensive entity that includes various components like templates, resources, and sections. Projects can be managed, built, and deployed through automated processes provided by Pars.</p>"},{"location":"getting-started/concept/index.html#template","title":"Template","text":"<p>Templates in Pars define the structure and standards for code generation. By adhering to predefined templates, developers can ensure consistency and compliance with architectural guidelines, speeding up the development process.</p>"},{"location":"getting-started/concept/index.html#resource","title":"Resource","text":"<p>Resources are reusable components or assets that can be utilized across various projects. They provide a way to share common functionality and assets, reducing duplication and effort.</p>"},{"location":"getting-started/concept/index.html#section","title":"Section","text":"<p>Sections in Pars provide a standard between templates and resources, facilitating the customization of resources. They serve as sub-solutions for resources, ensuring consistent and manageable integration of resources with templates.</p>"},{"location":"getting-started/concept/index.html#workflow","title":"Workflow","text":"<ol> <li>Define YAML Configurations: Start by defining the group, project, resource, section, and template information in YAML format according to specific standards.</li> <li>Create Workspace: Set up a workspace to organize your projects.</li> <li>Generate Code: Use the predefined templates to generate dynamic and boilerplate code.</li> <li>Manage Projects: Automate various project functions such as build management and package management.</li> </ol>"},{"location":"getting-started/concept/index.html#conclusion","title":"Conclusion","text":"<p><code>Pars</code> is a powerful tool designed to streamline the software development process, providing dynamic code generation, boilerplate creation, and comprehensive project management. By organizing projects within workspaces and utilizing flexible templates, resources, and sections, Pars ensures efficient and consistent development, catering to the needs of software architects and developers.</p> <p> </p>"},{"location":"getting-started/concept/application-project.html","title":"Application Project","text":"<p>An Application Project represents application development projects. It includes additional specifications and management for application development.</p>","tags":["project","application"]},{"location":"getting-started/concept/application-project.html#key-features-of-an-application-project","title":"Key Features of an Application Project","text":"<ul> <li>Workspace Integration: Positioned within a workspace defined by a group or set.</li> <li>Group Integration: If defined within a group, it resides under the group's path and package.</li> <li>Development Focus: Represents the core system of work (e.g., software development projects).</li> <li>YAML Configuration: Projects are defined and managed through YAML files.</li> <li>Command Support: Includes commands for submit, list, describe, and remove.</li> <li> <p>Project Types: Supports various project types based on the project's \"Kind\".</p> </li> <li> <p>Platform Specification: Defines the platform on which the application will be developed. Supported platforms are detailed at Platforms.</p> </li> <li>Language Specification: Defines the language used for development. Supported languages are detailed at Languages.</li> <li>Project Type: Specifies the type of project, such as web API, web application, mobile, desktop, or SPA.</li> <li>Directory and Package Information: Specifies the project's directory and package information.</li> <li>Dependency Management: Manages relationships with other dependent projects.</li> <li>External Package Management: Manages external packages used by the project.</li> </ul>","tags":["project","application"]},{"location":"getting-started/concept/application-project.html#application-project-object-model","title":"Application Project Object Model","text":"<p>Projects can be defined and managed using YAML configuration files. A typical application project configuration in YAML might look like this:</p> <p><pre><code>Type: Project\nKind: Application\nName: NodeShop.ProductService\nMetadata:\n    Tags: [backend, nodejs]\nSpecifications:\n    Name: ProductService\n    Set: NodeShop\n    Platform:\n        Type: NodeJS\n        Version: 14\n    Runtime:\n        Type: NodeJS\n        Version: 14\n    Language:\n        Type: javascript\n        Version: es6\n    ProjectType: webapi\n    Package: com.nodeshop.product\n    Group: NodeShopGroup\n    Path: /services/product-service\n    Labels:\n        environment: production\n        client: nodejs\n    Configuration:\n        Layers:\n        - Name: Library:Data:Entities\n          Path: entities\n          Package: entities\n        Dependencies:\n        - Name: express\n        - Name: mongoose\n          Version: 5.10.9\n          References:\n        - Name: NodeShop.Core\n        Group: NodeShopGroup\n        Workspace: main\n</code></pre> For more detailed information on the Application Project Object Model, refer to the Application Project Object Model.</p> <p> </p>","tags":["project","application"]},{"location":"getting-started/concept/code-template.html","title":"Code Template","text":"<p>A Code Template provides specialized context and functions optimized for generating code. It utilizes the \"Code Template Context\".</p>","tags":["template","code"]},{"location":"getting-started/concept/code-template.html#key-features-of-an-code-template","title":"Key Features of an Code Template","text":"<ul> <li>Optimized for Code Generation: Provides specialized context and functions for writing code efficiently.</li> <li>Code Template Context: Utilizes the \"Code Template Context\" to streamline the code generation process.</li> <li>Automation: Simplifies the creation of repetitive code patterns, enhancing developer productivity.</li> </ul>","tags":["template","code"]},{"location":"getting-started/concept/code-template.html#code-template-object-model","title":"Code Template Object Model","text":"<p>Templates can be defined and managed using YAML configuration files. A typical application project configuration in YAML might look like this:</p> <pre><code>Type: Template\nKind: Code\nName: ResponseDto\nMetadata:\nTags:\nSpecifications:\n  Name: ResponseDto\n  Output: '{{.Resource.Name}}.cs'\n  Set: EShopping\n  Layers:\n  - Dtos\n  Sections:\n      Classes:\n      - ResponseDto\n  Template:\n      Code: |\n      // This is a code template for ResponseDto\n      public class {{.name}} {\n          public string Name { get; set; }\n          public string Description { get; set; }\n      }\n</code></pre> <p>For more detailed information on the Code Template Object Model, refer to the Code Template Object Model.</p> <p> </p>","tags":["template","code"]},{"location":"getting-started/concept/data-resource.html","title":"Data Resource","text":"<p>A Data Resource allows for the dynamic definition of data. It enables flexible data specification in YAML format.</p>","tags":["resource","object"]},{"location":"getting-started/concept/data-resource.html#key-features-of-an-data-resource","title":"Key Features of an Data Resource","text":"<ul> <li>Dynamic Data Definition: Allows for the flexible definition of data.</li> <li>YAML Configuration: Enables data specification and management through YAML files.</li> <li>Key-Value Pairs: Supports defining data as key-value pairs.</li> <li>Scope: Can be defined globally or within a specific workspace, determining accessibility.</li> </ul>","tags":["resource","object"]},{"location":"getting-started/concept/data-resource.html#data-resource-object-model","title":"Data Resource Object Model","text":"<p>Resources can be defined and managed using YAML configuration files. A typical application project configuration in YAML might look like this:</p> <p><pre><code>Type: Resource\nKind: Data\nName: Product_SeedDataTypes\nMetaData:\nSpecifications:\nName: ProductType\nSet: EShopping\nLayers: \n- Name:\n    Sections:\n    - Name:\n        Classes:\n        Attributes:\n        Options:\n        Labels:\n        Methods:\nLabels: \nData:\n    - id: 1\n    Name: Electronics\n    - id: 2\n    Name: Clothing\n    - id: 3\n    Name: Home &amp; Kitchen\n</code></pre> For more detailed information on the Data Resource Object Model, refer to the Data Resource Object Model.</p> <p> </p>","tags":["resource","object"]},{"location":"getting-started/concept/file-template.html","title":"File Template","text":"<p>A File Template provides specialized context and functions optimized for generating files. It utilizes the \"File Template Context\".</p>","tags":["template","file"]},{"location":"getting-started/concept/file-template.html#key-features-of-an-file-template","title":"Key Features of an File Template","text":"<ul> <li>Optimized for File Generation: Provides specialized context and functions for creating files.</li> <li>File Template Context: Utilizes the \"File Template Context\" to handle file-specific content generation.</li> <li>Efficiency: Automates the creation of file structures and content, saving time and reducing errors.</li> </ul>","tags":["template","file"]},{"location":"getting-started/concept/file-template.html#file-template-object-model","title":"File Template Object Model","text":"<p>Templates can be defined and managed using YAML configuration files. A typical application project configuration in YAML might look like this:</p> <pre><code>Type: Template\nKind: File\nName: ResponseDto\nMetadata:\nTags:\nSpecifications:\n  Name: ResponseDto\n  Output: '{{ .Resource.Name }}.json'\n  Set: EShopping\n  Template:\n      Content: |\n      {\n          \"name\": \"{{.Resource.Name}}\",\n          \"description\": \"This is a data template for {{.Resource.Name}}\"\n      }\n</code></pre> <p>For more detailed information on the File Template Object Model, refer to the File Template Object Model.</p> <p> </p>","tags":["template","file"]},{"location":"getting-started/concept/group.html","title":"Group","text":"<p>A Group is a framework used to collectively manage multiple projects. It organizes the relationships and dependencies among these projects, providing a unified and efficient management system. By grouping projects together, it simplifies processes such as building, testing, and deploying, ensuring that all projects within the group are consistently handled.</p>","tags":["group"]},{"location":"getting-started/concept/group.html#key-features-of-a-group","title":"Key Features of a Group","text":"<ul> <li>Unified Management: Manage multiple projects together under a single entity.</li> <li>Collective Operations: Perform operations like build, test, and remove on all projects within a Group simultaneously.</li> <li>Organized Structure: Projects within a Group are organized under a common directory path and package name.</li> </ul>","tags":["group"]},{"location":"getting-started/concept/group.html#group-object-model","title":"Group Object Model","text":"<p>Groups can be defined and managed using YAML configuration files. This allows for easy setup and modification of Group details. A typical Group configuration in YAML might look like this:</p> <pre><code>Type: Group\nName: UserManagementGroup\nMetadata:\n  Tags: [backend, user-management]\nSpecifications:\n  Name: UserManagement\n  Path: src/user_management\n  Package: [com, example, user]\n</code></pre> <p>For more detailed information on the Group Object Model, refer to the Group Object Model.</p>","tags":["group"]},{"location":"getting-started/concept/group.html#creating-group","title":"Creating Group","text":"<p>To initialize a new group, use the <code>group submit</code> command:</p> <pre><code>pars group submit --file &lt;file_path&gt;\n</code></pre>","tags":["group"]},{"location":"getting-started/concept/group.html#listing-groups","title":"Listing Groups","text":"<p>To list all available groups, use the <code>group list</code> command:</p> <pre><code>pars group list\n</code></pre>","tags":["group"]},{"location":"getting-started/concept/group.html#group-details","title":"Group Details","text":"<p>To view details of a specific group, use the <code>group describe</code> command:</p> <pre><code>pars group describe &lt;group_name&gt;\n</code></pre>","tags":["group"]},{"location":"getting-started/concept/group.html#removing-group","title":"Removing Group","text":"<p>To remove a group, use the <code>group remove</code> command:</p> <pre><code>pars group remove &lt;group_name&gt;\n</code></pre>","tags":["group"]},{"location":"getting-started/concept/group.html#grouping-projects","title":"Grouping Projects","text":"<p>Projects within a Group can be collectively processed using the Group name. For example, under the \"ProductService\" Group, projects like <code>ProductApi</code> and <code>ProductCore</code> can be deleted, built, and tested simultaneously using the Group name. These projects can reside within the Group's directory path and be grouped under the Group's package name.</p>","tags":["group"]},{"location":"getting-started/concept/group.html#usage","title":"Usage","text":"<p>When a project is within a Group, the project access ID is used in the format <code>groupname\\projectname</code>. If you want to build all projects within a Group, you can use the following command:</p> <pre><code>pars build \"groupname\\\"\n</code></pre> <pre><code>pars project remove \"groupname\\\"\n</code></pre> <p> </p>","tags":["group"]},{"location":"getting-started/concept/object-resource.html","title":"Object Resource","text":"<p>An Object Resource defines the data structure of a software application. It allows for the definition and management of fields and methods within a table or class, including their data types and relationships.</p>","tags":["resource","object"]},{"location":"getting-started/concept/object-resource.html#key-features-of-an-object-resource","title":"Key Features of an Object Resource","text":"<ul> <li>Data Structure Definition: Defines the data structure of a software application.</li> <li>Field Management: Manages fields within a table or class, including their data types.</li> <li>Method Management: Defines and manages methods within a table or class.</li> <li>Relationships: Specifies relationships between different fields and methods.</li> <li>YAML Configuration: Allows for defining and managing object resources through YAML files.</li> <li>Scope: Can be defined globally or within a specific workspace, determining accessibility.</li> </ul>","tags":["resource","object"]},{"location":"getting-started/concept/object-resource.html#object-resource-object-model","title":"Object Resource Object Model","text":"<p>Resources can be defined and managed using YAML configuration files. A typical application project configuration in YAML might look like this:</p> <pre><code>Type: Resource\nKind: Object\nName: UserResource\nMetadata:\ntags: [user, resource]\nSpecifications:\nName: User\nSet: EShopping\nlayers:\n- Name: Controllers\n  Sections:\n  - Name: AddressSection\n      Classes:\n      - Name: Address\n      Attributes:\n      - Name: street\n      - Name: city\n      Methods:\n      - Name: validate\n- Services\nLabels:\n    environment: production\n    module: user\nAttributes:\n- Name: firstName\n    Type:\n    Name: String\n    Category: value\n    Labels:\n    Required: true\n    Common: true\n- Name: lastName\n    Type:\n    Name: String\n    Category: value\n    Labels:\n    Required: true\n    Common: true\nMethods:\n- Name: getFullName\n    Options:\n    async: false\n    Labels:\n    utility: true\n    Parameters:\n    - Name: title\n    Type:\n        Name: String\n        Category: value\n    Returns:\n    - Name: fullName\n    Type:\n        Name: String\n        Category: value\n    Code: |\n    return `${title} ${this.firstName} ${this.lastName}`;\n    Common: true\n</code></pre> <p>For more detailed information on the Object Resource Object Model, refer to the Object Resource Object Model.</p> <p> </p>","tags":["resource","object"]},{"location":"getting-started/concept/project.html","title":"Project","text":"<p>A Project is positioned within a workspace defined by either a group or a set. It serves as the fundamental unit of work, encompassing various types of development projects such as web APIs, mobile applications, web services, and microservices. Projects can be defined and managed using YAML configuration files.</p> <p>This structured approach simplifies project management, especially in large-scale applications with multiple interdependent projects. By leveraging the Project concepts, developers can ensure consistency and efficiency in their workflows.</p>","tags":["project"]},{"location":"getting-started/concept/project.html#key-features-of-a-project","title":"Key Features of a Project","text":"<ul> <li>Workspace Integration: Positioned within a workspace defined by a group or set.</li> <li>Group Integration: If defined within a group, it resides under the group's path and package.</li> <li>Development Focus: Represents the core system of work (e.g., software development projects).</li> <li>YAML Configuration: Projects are defined and managed through YAML files.</li> <li>Command Support: Includes commands for submit, list, describe, and remove.</li> <li>Project Types: Supports various project types based on the project's \"Kind\".</li> </ul>","tags":["project"]},{"location":"getting-started/concept/project.html#project-object-model","title":"Project Object Model","text":"<p>Projects can be defined and managed using YAML configuration files. A typical project configuration in YAML might look like this:</p> <pre><code>Type: Project\nKind: Application\nName: NodeShop.ProductService\nMetadata:\n    Tags: [backend, nodejs]\nSpecifications:\n    Name: ProductService\n    Set: NodeShop\n    Workspace: MyWorks\n</code></pre>","tags":["project"]},{"location":"getting-started/concept/project.html#creating-project","title":"Creating Project","text":"<p>To crete a new project, use the <code>project submit</code> command:</p> <pre><code>pars project submit --file &lt;file_path&gt;\n</code></pre>","tags":["project"]},{"location":"getting-started/concept/project.html#listing-projects","title":"Listing Projects","text":"<p>To list all available projects, use the <code>project list</code> command:</p> <pre><code>pars project list\n</code></pre>","tags":["project"]},{"location":"getting-started/concept/project.html#project-details","title":"Project Details","text":"<p>To view details of a specific project, use the <code>project describe</code> command:</p> <pre><code>pars project describe &lt;project_name&gt;\n</code></pre>","tags":["project"]},{"location":"getting-started/concept/project.html#removing-project","title":"Removing Project","text":"<p>To remove a project, use the <code>project remove</code> command:</p> <pre><code>pars project remove &lt;project_name&gt;\n</code></pre>","tags":["project"]},{"location":"getting-started/concept/project.html#all-project-types","title":"All Project Types","text":"<p> 6251a85a-47d0-11ee-be56-0242ac120002:_:application-project.html::c5db004ad5f60cfd33866e578b4830f7 <p> </p>","tags":["project"]},{"location":"getting-started/concept/resource.html","title":"Resource","text":"<p>A Resource defines the main structures within a project, outlining the various elements that the project comprises. Unlike Projects, Resources do not have a describe command. Resources can be defined and managed using YAML configuration files. They can be specified globally or within a workspace. Global Resources are accessible throughout the entire application, while workspace-specific Resources are only available within their respective workspaces.</p>","tags":["resource"]},{"location":"getting-started/concept/resource.html#key-features-of-a-resource","title":"Key Features of a Resource","text":"<ul> <li>Project Integration: Defines the main structures within a project.</li> <li>YAML Configuration: Resources are defined and managed through YAML files.</li> <li>Scope: Can be defined globally or within a specific workspace.</li> </ul>","tags":["resource"]},{"location":"getting-started/concept/resource.html#example-yaml-configuration","title":"Example YAML Configuration","text":"<p>A typical Resource configuration in YAML might look like this:</p> <pre><code>Type: Resource\nKind: Object\nName: LibraryData\nMetaData:\nSpecifications:\n  Name: LibraryData\n  Set: EShopping\n  Workspace: MyWorks\n</code></pre>","tags":["resource"]},{"location":"getting-started/concept/resource.html#creating-resource","title":"Creating Resource","text":"<p>To crete a new resource, use the <code>resource submit</code> command:</p> <pre><code>pars resource submit --file &lt;file_path&gt;\n</code></pre>","tags":["resource"]},{"location":"getting-started/concept/resource.html#listing-resources","title":"Listing Resources","text":"<p>To list all available resources, use the <code>resource list</code> command:</p> <pre><code>pars resource list\n</code></pre>","tags":["resource"]},{"location":"getting-started/concept/resource.html#removing-resource","title":"Removing Resource","text":"<p>To remove a resource, use the <code>resource remove</code> command:</p> <pre><code>pars resource remove &lt;resource_name&gt;\n</code></pre>","tags":["resource"]},{"location":"getting-started/concept/resource.html#all-resource-types","title":"All Resource Types","text":"<p> 6251a85a-47d0-11ee-be56-0242ac120002:_:object-resource.html:","tags":["resource"]},{"location":"getting-started/concept/shared-template.html","title":"Shared Template","text":"<p>A Shared Template can take any context and is used to standardize outputs and manage them from a single point. Shared Templates can be called from any other template.</p>","tags":["template","shared"]},{"location":"getting-started/concept/shared-template.html#key-features-of-an-shared-template","title":"Key Features of an Shared Template","text":"<ul> <li>Context Flexibility: Can take any context, making it versatile for different types of content.</li> <li>Standardization: Ensures outputs are standardized and managed from a single point.</li> <li>Reusability: Can be called from any other template, promoting reusability across projects.</li> </ul>","tags":["template","shared"]},{"location":"getting-started/concept/shared-template.html#shared-template-object-model","title":"Shared Template Object Model","text":"<p>Templates can be defined and managed using YAML configuration files. A typical application project configuration in YAML might look like this:</p> <pre><code>Type: Template\nKind: Shared\nName: ResourceNameTemplate\nMetadata:\nTags:\nSpecifications:\n  Name: ResourceNameTemplate\n  Workspace: CommonWorkspace\n  Template:\n      Content: |\n      // This is a shared template\n      // Define your reusable code here\n      function exampleFunction() {\n          console.log(\"Hello, World!\");\n      }\n</code></pre> <p>For more detailed information on the Shared Template Object Model, refer to the Shared Template Object Model.</p> <p> </p>","tags":["template","shared"]},{"location":"getting-started/concept/task.html","title":"Task","text":"","tags":["task"]},{"location":"getting-started/concept/template.html","title":"Template","text":"<p>A Template defines the structure for generating content. It facilitates the automation and simplification of repetitive tasks using tokens to create templates. Similar to Resources, Templates do not have a describe command. Templates can be defined and managed using YAML configuration files. They can be specified globally or within a workspace. Global Templates are accessible throughout the entire application, while workspace-specific Templates are only available within their respective workspaces.</p>","tags":["template"]},{"location":"getting-started/concept/template.html#key-features-of-a-template","title":"Key Features of a Template","text":"<ul> <li>Content Generation: Defines the structure for generating content.</li> <li>Token Usage: Automates repetitive tasks using tokens in templates.</li> <li>YAML Configuration: Templates are defined and managed through YAML files.</li> <li>Scope: Can be defined globally or within a specific workspace.</li> </ul>","tags":["template"]},{"location":"getting-started/concept/template.html#example-yaml-configuration","title":"Example YAML Configuration","text":"<p>A typical Template configuration in YAML might look like this:</p> <pre><code>Type: Template\nKind: File\nName: ResponseDto\nMetaData:\nSpecifications:\n  Name: LibraryData\n  Output: '{{.Resource.Name}}.json'\n  Set: EShopping\n  Workspace: MyWorks\n  Template:\n    Content: |\n    {\n        \"name\": \"{{.Resource.Name}}\",\n        \"description\": \"This is a data template for {{.Resource.Name}}\"\n    }\n</code></pre>","tags":["template"]},{"location":"getting-started/concept/template.html#creating-template","title":"Creating Template","text":"<p>To crete a new template, use the <code>template submit</code> command:</p> <pre><code>pars template submit --file &lt;file_path&gt;\n</code></pre>","tags":["template"]},{"location":"getting-started/concept/template.html#listing-templates","title":"Listing Templates","text":"<p>To list all available templates, use the <code>template list</code> command:</p> <pre><code>pars template list\n</code></pre>","tags":["template"]},{"location":"getting-started/concept/template.html#removing-template","title":"Removing Template","text":"<p>To remove a template, use the <code>template remove</code> command:</p> <pre><code>pars template remove &lt;template_name&gt;\n</code></pre>","tags":["template"]},{"location":"getting-started/concept/template.html#all-template-types","title":"All Template Types","text":"<p> 6251a85a-47d0-11ee-be56-0242ac120002:_:shared-template.html::7392a960e6494089f4e741090f0b59be <p> 6251a85a-47d0-11ee-be56-0242ac120002:_:code-template.html:<code>:072bb2f3c4371c7c0c330933ebf3f0a1 <p> 6251a85a-47d0-11ee-be56-0242ac120002:_:file-template.html::39730688dccbd9427767c263f3b48f93 <p> </p>","tags":["template"]},{"location":"getting-started/concept/workspace.html","title":"Workspace","text":"","tags":["workspace"]},{"location":"getting-started/concept/workspace.html#definition","title":"Definition","text":"<p>A workspace is the primary structure where you organize and manage your projects. Each workspace can contain multiple projects and related structures.</p> <ul> <li>Working area for one or more project</li> <li>Physical folder location</li> </ul> <p>You can use <code>init</code> command to create fresh workspace or you can use the <code>workspace</code> command to perform operations</p>","tags":["workspace"]},{"location":"getting-started/concept/workspace.html#terminology","title":"Terminology","text":"","tags":["workspace"]},{"location":"getting-started/concept/workspace.html#selected-workspace","title":"Selected Workspace","text":"<p>Selected workspace is the workspace that you have explicitly chosen. It might not necessarily be the one you are currently working in but is marked as your preferred workspace.</p> Example <p>In the workspace list, the selected workspace is indicated by a <code>selected</code> label.</p> <p><pre><code>pars workspace list\n</code></pre> <pre>\n(4) workspace available\n<p>* workspace_0 (selected)\nworkspace_1\nworkspace_2\nworkspace_3\n\n</p>","tags":["workspace"]},{"location":"getting-started/concept/workspace.html#active-workspace","title":"Active Workspace","text":"<p>Active workspace is the workspace that is associated with your current directory or any parent directory. It represents the workspace that is actively in use within the context of your current location in the file system.</p>\n\nExample\n<p>In the workspace list, the active workspace is indicated by an <code>active</code> label.</p>\n<p><pre><code>pars workspace list\n</code></pre>\n\n<pre>\n(4) workspace available\n<p>* workspace_0 (active)\nworkspace_1 (selected)\nworkspace_2\nworkspace_3\n\n</p>","tags":["workspace"]},{"location":"getting-started/concept/workspace.html#current-workspace","title":"Current Workspace","text":"<p>Current workspace is determined based on the presence of an active workspace. If an active workspace exists, it is considered the current workspace, regardless of which workspace is selected. If no active workspace is present, the selected workspace becomes the current workspace.</p>\n\nExample\n<p>If the current workspace is only selected, it is indicated as below:</p>\n<p><pre><code>pars workspace list\n</code></pre>\n\n<pre>\n(4) workspace available\n<p>* workspace_0 (selected)\nworkspace_1\nworkspace_2\nworkspace_3\n\n</p>\n<p>If the current workspace is both active and selected, it is indicated as below:</p>\n<p><pre><code>pars workspace list\n</code></pre>\n\n<pre>\n(4) workspace available\n<p>* workspace_0 (active &amp; selected)\nworkspace_1\nworkspace_2\nworkspace_3\n\n</p>\n<p>If the current workspace is only active, it is indicated as below:</p>\n<p><pre><code>pars workspace list\n</code></pre>\n\n<pre>\n(4) workspace available\n<p>* workspace_0(active)\nworkspace_1 (selected)\nworkspace_2\nworkspace_3\n\n</p>\n\n<p>By understanding these distinctions, you can better navigate and manage your workspaces within the system. Here is a quick summary of the labels used in the workspace list:</p>\n<ul>\n<li><code>active</code> : Active workspace</li>\n<li><code>selected</code> : Selected workspace</li>\n<li><code>active &amp; selected</code> : Both Active and Selected</li>\n<li><code>*</code> : Current workspace</li>\n</ul>\n<p>This structure ensures you always know which workspace is in use and how they are identified within the system.</p>","tags":["workspace"]},{"location":"getting-started/concept/workspace.html#initializing-workspace","title":"Initializing Workspace","text":"<p>To initialize a new workspace, use the <code>init</code> command:</p>\n<pre><code>pars init &lt;workspace_name&gt;\n</code></pre>","tags":["workspace"]},{"location":"getting-started/concept/workspace.html#listing-workspaces","title":"Listing Workspaces","text":"<p>To list all available workspaces, use the <code>workspace list</code> command:</p>\n<pre><code>pars workspace list\n</code></pre>","tags":["workspace"]},{"location":"getting-started/concept/workspace.html#workspace-details","title":"Workspace Details","text":"<p>To view details of a specific workspace, use the <code>workspace describe</code> command:</p>\n<pre><code>pars workspace describe &lt;workspace_name&gt;\n</code></pre>","tags":["workspace"]},{"location":"getting-started/concept/workspace.html#removing-workspace","title":"Removing Workspace","text":"<p>To remove a workspace, use the <code>workspace remove</code> command:</p>\n<pre><code>pars workspace remove &lt;workspace_name&gt;\n</code></pre>","tags":["workspace"]},{"location":"getting-started/concept/workspace.html#changing-current-workspace","title":"Changing Current Workspace","text":"<p>To change the active workspace, navigate to the desired workspace directory and use the <code>workspace --switch</code> command:</p>\n<pre><code>pars workspace --switch &lt;workspace_name&gt;\n</code></pre>\n<p>By keeping these commands and concepts in mind, you can efficiently manage your workspaces in Pars.</p>\n\n\n\n<p>\n</p>","tags":["workspace"]},{"location":"getting-started/workflow/index.html","title":"Workflow","text":""},{"location":"getting-started/workflow/build-manager.html","title":"Build Manager","text":""},{"location":"getting-started/workflow/code-generation.html","title":"Code Generation","text":""},{"location":"getting-started/workflow/code-generation.html#workspace","title":"Workspace","text":""},{"location":"getting-started/workflow/code-generation.html#project","title":"Project","text":""},{"location":"getting-started/workflow/code-generation.html#template","title":"Template","text":""},{"location":"getting-started/workflow/code-generation.html#resource","title":"Resource","text":""},{"location":"getting-started/workflow/project-organization.html","title":"Project Organization","text":""},{"location":"guides/index.html","title":"Guides","text":""},{"location":"guides/commands/index.html","title":"Commands","text":"<p>The <code>pars</code> command is the root command for managing workspaces, groups, and other tasks. It supports various subcommands and global flags to provide flexibility and control over different environments and logging levels.</p>","tags":["env","log-level","logLevelEnum"]},{"location":"guides/commands/index.html#usage","title":"Usage","text":"<pre><code>pars [type] [command] [options] [flags]\n</code></pre> Tip <p>Aliases are shorthands for commands and flags in example, <code>workspace remove</code> shorthand is <code>w r</code></p>","tags":["env","log-level","logLevelEnum"]},{"location":"guides/commands/index.html#commands_1","title":"Commands","text":"Name Description <code>init</code> Creates a new workspace <code>workspace</code> Manages workspaces, including list, describe, and remove <code>group</code> Manages groups <code>completion</code> Provides autocompletion support for the CLI","tags":["env","log-level","logLevelEnum"]},{"location":"guides/commands/index.html#init","title":"<code>init</code>","text":"<p>The <code>init</code> command is used to create a new workspace. This is the only way to create a workspace in the application.</p>","tags":["env","log-level","logLevelEnum"]},{"location":"guides/commands/index.html#workspace","title":"<code>workspace</code>","text":"<p>The <code>workspace</code> command is used to manage workspaces. It supports subcommands like <code>list</code>, <code>describe</code>, and <code>remove</code>.</p>","tags":["env","log-level","logLevelEnum"]},{"location":"guides/commands/index.html#group","title":"<code>group</code>","text":"<p>The <code>group</code> command is used to manage groups. It supports subcommands like <code>list</code>, <code>new</code>, <code>describe</code>, and <code>remove</code>.</p>","tags":["env","log-level","logLevelEnum"]},{"location":"guides/commands/index.html#completion","title":"<code>completion</code>","text":"<p>The <code>completion</code> command provides autocompletion support for the CLI.</p> Tip <p>You can use suggestions to list available sub commands. To do this, simply press Tab to proceed. For more details, please visit our Command Autocompletion and Filtering Guide.</p>","tags":["env","log-level","logLevelEnum"]},{"location":"guides/commands/index.html#global-flags","title":"Global Flags","text":"Name Datatype Required Default Description <code>env</code>, <code>e</code> <code>string</code> false <code>workspace</code> Provides full isolation for tasks and processes, operating within the specified environment. <code>log-level</code> <code>LogLevelEnum</code> false <code>Error</code> Sets the logging level to control the verbosity of log output (e.g., debug, info).","tags":["env","log-level","logLevelEnum"]},{"location":"guides/commands/index.html#env","title":"<code>env</code>","text":"<ul> <li>Aliases <code>e</code></li> <li>Datatype: <code>string</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Provides full isolation for tasks and processes. Only operates within the specified  6251a85a-47d0-11ee-be56-0242ac120002:pars:Environment:&lt;__None__&gt;:e523232e44b20e09502d33ea0dfcad08 when the flag is set.</li> </ul> Example <p>Specific environment :      <code>workspace list</code> in specific environment</p> <p><pre><code>pars workspace list --env my-env\n</code></pre>  (0) workspace available <p>Running on 'my-env' environment </p>","tags":["env","log-level","logLevelEnum"]},{"location":"guides/commands/index.html#log-level","title":"<code>log-level</code>","text":"<ul> <li>Datatype: <code>LogLevelEnum</code></li> <li>Type: <code>enum</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>Error</code></li> <li>Valid Values: <code>Silence</code>, <code>Verbose</code>, <code>Info</code>, <code>Warn</code>, <code>Error</code>, <code>Fatal</code></li> <li>Description: Sets the logging level to control the verbosity of log output. Useful for debugging and monitoring.</li> </ul> Example <p>Set logging level :      <code>workspace list</code> with <code>verbose</code> logging</p> <p><pre><code>pars workspace list --log-level verbose\n</code></pre>  (0) workspace available </p>","tags":["env","log-level","logLevelEnum"]},{"location":"guides/commands/index.html#common-flags","title":"Common Flags","text":"Name Datatype Required Default Description <code>help</code>, <code>h</code> <code>none</code> false <code>\"\"</code> Displays usage information and summaries for commands.","tags":["env","log-level","logLevelEnum"]},{"location":"guides/commands/index.html#help","title":"<code>help</code>","text":"<ul> <li>Aliases <code>h</code></li> <li>Datatype: <code>none</code></li> <li>Type: <code>none</code></li> <li>Multiplicity: Optional | Single</li> <li>Default: <code>none</code></li> <li>Description: Displays usage information and summaries for commands.</li> </ul> Example <p>Print help details for command :      See <code>workspace list</code> help details</p> <p><pre><code>pars workspace list --help\n</code></pre> <pre>\nList workspace project(s)\n<p>Usage:\n  pars workspace list [flags]</p>\n<p>Aliases:\n  list, l</p>\n<p>Examples:\n  pars workspace list [flags]\n  pars wl [flags]</p>\n<p>Flags:\n  -h, --help   help for list</p>\n<p>Global Flags:\n      --config string        config file (default is $HOME/.cli.yaml)\n  -e, --env string           Environment (dev, prod, test, ...)\n      --log-level LogLevel   Select log level [Silence Verbose Info Warn Error Fatal] (default Error)\n\n</p>\n\n\n<p>This documentation provides a comprehensive overview of the <code>pars</code> root command, its subcommands, and global flags. Utilize these commands and flags to effectively manage workspaces, groups, and other related tasks within the CLI application.</p>\n\n\n<p>\n</p>","tags":["env","log-level","logLevelEnum"]},{"location":"guides/commands/completion/index.html","title":"Completion","text":"<p>Command: <code>completion</code></p> <p>Shorthands: </p> <p>The <code>completion</code> command provides autocompletion and filtering support for <code>pars</code> in various terminal environments. This enhances the user experience by allowing easy navigation and selection of commands, flags, and arguments.</p>","tags":["completion","bash","fish","powershell","zsh"]},{"location":"guides/commands/completion/index.html#usage","title":"Usage","text":"<pre><code>pars completion [command]\n</code></pre>","tags":["completion","bash","fish","powershell","zsh"]},{"location":"guides/commands/completion/index.html#commands","title":"Commands","text":"Name Description <code>bash</code> Provides autocompletion support for Bash shell <code>powershell</code> Provides autocompletion support for Powershell <code>fish</code> Provides autocompletion support for Fish shell <code>zsh</code> Provides autocompletion support for Zsh shell","tags":["completion","bash","fish","powershell","zsh"]},{"location":"guides/commands/completion/index.html#bash","title":"<code>bash</code>","text":"<p>The <code>bash</code> subcommand provides autocompletion support for the Bash shell.</p>","tags":["completion","bash","fish","powershell","zsh"]},{"location":"guides/commands/completion/index.html#powershell","title":"<code>powershell</code>","text":"<p>The <code>powershell</code> subcommand provides autocompletion support for PowerShell.</p>","tags":["completion","bash","fish","powershell","zsh"]},{"location":"guides/commands/completion/index.html#fish","title":"<code>fish</code>","text":"<p>The <code>fish</code> subcommand provides autocompletion support for the Fish shell.</p>","tags":["completion","bash","fish","powershell","zsh"]},{"location":"guides/commands/completion/index.html#zsh","title":"<code>zsh</code>","text":"<p>The <code>zsh</code> subcommand provides autocompletion support for the Zsh shell.</p> Tip <p>You can use suggestions to list available sub commands. To do this, simply press Tab to proceed. For more details, please visit our Command Autocompletion and Filtering Guide.</p>","tags":["completion","bash","fish","powershell","zsh"]},{"location":"guides/commands/completion/index.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> <p>This documentation provides a comprehensive overview of the <code>pars completion</code> command, its subcommands for different shells, and global flags. Utilize these commands and flags to enable autocompletion and filtering support for pars in various terminal environments, enhancing the overall user experience.</p> <p> </p>","tags":["completion","bash","fish","powershell","zsh"]},{"location":"guides/commands/completion/bash.html","title":"Completion Bash","text":"<p>Command: <code>completion bash</code></p> <p>Shorthands: </p> <p>The <code>pars completion bash</code> command provides autocompletion support for the <code>pars</code> CLI in the Bash shell. This feature enhances the user experience by allowing easy navigation and selection of commands, flags, and arguments using the Tab key.</p>","tags":["completion","bash"]},{"location":"guides/commands/completion/bash.html#usage","title":"Usage","text":"<pre><code>pars completion bash [flags]\n</code></pre> Example <p>Classic usage <pre><code>pars completion bash\n</code></pre>  # bash completion V2 for pars                                 -- shell-script -- <p>...</p> <p># ex: ts=4 sw=4 et filetype=sh </p>","tags":["completion","bash"]},{"location":"guides/commands/completion/bash.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p>","tags":["completion","bash"]},{"location":"guides/commands/completion/bash.html#installation","title":"Installation","text":"<p>To load completions</p> LinuxmacOS <pre><code>pars completion bash &gt; /etc/bash_completion.d/pars\n</code></pre> <pre><code>pars completion bash &gt; $(brew --prefix)/etc/bash_completion.d/pars\n</code></pre> <p>This documentation provides a comprehensive overview of the <code>pars completion bash</code> command, including installation instructions, usage examples, and details about global flags. By enabling autocompletion for Bash, you can enhance your productivity and streamline your workflow with the <code>pars</code> CLI.</p> <p> </p>","tags":["completion","bash"]},{"location":"guides/commands/completion/fish.html","title":"Completion Fish","text":"<p>Command: <code>completion fish</code></p> <p>Shorthands: </p> <p>The <code>pars completion fish</code> command provides autocompletion support for the <code>pars</code> CLI in the Fish shell. This feature enhances the user experience by allowing easy navigation and selection of commands, flags, and arguments using the Tab key.</p>","tags":["completion","fish"]},{"location":"guides/commands/completion/fish.html#usage","title":"Usage","text":"<pre><code>pars completion fish [flags]\n</code></pre> Example <p>Classic usage <pre><code>pars completion fish\n</code></pre>  # fish completion for pars                                 -- shell-script -- <p>...</p> <p>complete -k -c pars -n '__pars_requires_order_preservation &amp;&amp; __pars_prepare_completions' -f -a '$__pars_comp_results </p>","tags":["completion","fish"]},{"location":"guides/commands/completion/fish.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p>","tags":["completion","fish"]},{"location":"guides/commands/completion/fish.html#installation","title":"Installation","text":"<p>To load completions</p> Linux <pre><code>pars completion fish &gt; ~/.config/fish/completions/pars.fish\n</code></pre> <p>This documentation provides a comprehensive overview of the <code>pars completion fish</code> command, including installation instructions, usage examples, and details about global flags. By enabling autocompletion for Fish, you can enhance your productivity and streamline your workflow with the <code>pars</code> CLI.</p> <p> </p>","tags":["completion","fish"]},{"location":"guides/commands/completion/powershell.html","title":"Completion Powershell","text":"<p>Command: <code>completion powershell</code></p> <p>Shorthands: </p> <p>The <code>pars completion powershell</code> command provides autocompletion support for the <code>pars</code> CLI in the Fish shell. This feature enhances the user experience by allowing easy navigation and selection of commands, flags, and arguments using the Tab key.</p>","tags":["completion","powershell"]},{"location":"guides/commands/completion/powershell.html#usage","title":"Usage","text":"<pre><code>pars completion powershell [flags]\n</code></pre> Example <p>Classic usage <pre><code>pars completion powershell\n</code></pre>  # powershell completion for pars                                 -- shell-script -- <p>...</p> <p>Register-ArgumentCompleter -CommandName 'pars' -ScriptBlock ${__parsCompleterBlock} </p>","tags":["completion","powershell"]},{"location":"guides/commands/completion/powershell.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p>","tags":["completion","powershell"]},{"location":"guides/commands/completion/powershell.html#installation","title":"Installation","text":"<p>To load completions</p> Windows <pre><code>pars completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>This documentation provides a comprehensive overview of the <code>pars completion powershell</code> command, including installation instructions, usage examples, and details about global flags. By enabling autocompletion for Powershell, you can enhance your productivity and streamline your workflow with the <code>pars</code> CLI.</p> <p> </p>","tags":["completion","powershell"]},{"location":"guides/commands/completion/zsh.html","title":"Completion Zsh","text":"<p>Command: <code>completion zsh</code></p> <p>Shorthands: </p> <p>The <code>pars completion zsh</code> command provides autocompletion support for the <code>pars</code> CLI in the Fish shell. This feature enhances the user experience by allowing easy navigation and selection of commands, flags, and arguments using the Tab key.</p>","tags":["completion","zsh"]},{"location":"guides/commands/completion/zsh.html#usage","title":"Usage","text":"<pre><code>pars completion zsh [flags]\n</code></pre> Example <p>Classic usage <pre><code>pars completion zsh\n</code></pre> <pre>\n#compdef pars\ncompdef _pars pars\n<p># zsh completion for pars                                 -- shell-script --</p>\n<p>...</p>\n<p># don't run the completion function when being source-ed or eval-ed\nif [ \"$funcstack[1]\" = \"_pars\" ]; then\n    _pars\nfi\n\n</p>","tags":["completion","zsh"]},{"location":"guides/commands/completion/zsh.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p>","tags":["completion","zsh"]},{"location":"guides/commands/completion/zsh.html#installation","title":"Installation","text":"<p>To load completions</p>\nLinuxmacOS\n\n\n<pre><code>pars completion zsh &gt; \"${fpath[1]}/_pars\"\n</code></pre>\n\n\n<pre><code>pars completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_pars\n</code></pre>\n\n\n\n\n<p>This documentation provides a comprehensive overview of the <code>pars completion zsh</code> command, including installation instructions, usage examples, and details about global flags. By enabling autocompletion for Zsh, you can enhance your productivity and streamline your workflow with the <code>pars</code> CLI.</p>\n\n\n<p>\n</p>","tags":["completion","zsh"]},{"location":"guides/commands/environment/index.html","title":"Workspace","text":"<p>Command: <code>workspace</code></p> <p>Shorthands: <code>w</code></p> <p>The <code>workspace</code> command is a parent command that provides various operations for managing Workspace(s). This command supports subcommands like <code>list</code>, <code>describe</code>, and <code>remove</code> to handle different workspace-related tasks. Additionally, it includes the <code>--switch</code> flag to set the <code>selected workspace</code> among existing workspaces.</p> <p>A workspace in <code>pars</code> is a structure that organizes projects, tasks, and workflows, providing physical isolation. Multiple workspaces can be defined, and references to these workspaces can be made where needed. For example, when adding a project, you can specify the workspace with the <code>--workspace</code> flag or argument: <code>pars project new test-project-name --workspace my-workspace</code>.</p> <p><code>pars</code> provides support for autocompletion, filtering, and suggestions using the tab key, making it easier to work with workspaces.</p>","tags":["workspace"]},{"location":"guides/commands/environment/index.html#usage","title":"Usage","text":"<p><pre><code>pars workspace [flags]\n</code></pre> <pre><code>pars workspace [command]\n</code></pre></p>","tags":["workspace"]},{"location":"guides/commands/environment/index.html#commands","title":"Commands","text":"Name Description <code>list</code> List Workspaces in 6251a85a-47d0-11ee-be56-0242ac120002:pars:Environment:&lt;__None__&gt;:c25bd208fcae97dda2b3a48d0f1d29db <code>describe</code> Describe Workspace details <code>remove</code> Remove Workspace Tip <p>You can use suggestions to list available sub commands. To do this, simply press Tab to proceed. For more details, please visit our Command Autocompletion and Filtering Guide.</p>","tags":["workspace"]},{"location":"guides/commands/environment/index.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--switch</code>, <code>-s</code> <code>string</code> true <code>workspace_name</code> Switch current workspace","tags":["workspace"]},{"location":"guides/commands/environment/index.html#-switch","title":"<code>--switch</code>","text":"<ul> <li>Aliases <code>-s</code></li> <li>Datatype: <code>string</code></li> <li>Type: <code>workspace</code></li> <li>Multiplicity: Optional</li> <li>Description: Specifies the name of the workspace to set as selected.</li> </ul> <p>Usage</p> <ul> <li>The <code>--switch</code> flag is used to set an existing workspace as the <code>selected workspace</code>. This flag allows you to quickly change the selected workspace without needing to perform multiple steps.</li> </ul> Tip <p>You can use suggestions to list available workspaces. To do this, simply press Tab to proceed. For more details, please visit our Workspace Autocompletion and Filtering Guide.</p> <p>Notes</p> <ul> <li>Ensure the workspace name provided with the <code>--switch</code> flag exists to avoid errors during command execution.</li> </ul> Example <p><pre><code>pars workspace --switch OmicronConsulting\n</code></pre>  Swithched to: OmicronConsulting </p> <p> </p>","tags":["workspace"]},{"location":"guides/commands/environment/list.html","title":"Workspace List","text":"<p>Command: <code>workspace list</code></p> <p>Shorthands: <code>w l</code>, <code>wl</code></p> <p>The <code>workspace list</code> command is used to display a list of existing Workspace(s). This command helps you view all the workspaces that have been created, along with their status.</p> <p>You can list all Workspaces, see <code>current workspace</code> (<code>selected workspace</code> and <code>active workspace</code>) in the list</p>","tags":["workspace","list"]},{"location":"guides/commands/environment/list.html#usage","title":"Usage","text":"<pre><code>pars workspace list [flags]\n</code></pre> Example <p>Classic usage <pre><code>pars workspace list\n</code></pre> <pre>\n(3) workspace available\n<p>* OmicronConsulting\nEpsilonEnterprises\nZetaSystems\n\n</p>\n<p>Call on selected workspace folder or childs\n<pre><code>pars workspace list\n</code></pre>\n\n<pre>\n(3) workspace available\n<p>&gt; * OmicronConsulting\nEpsilonEnterprises\nZetaSystems\n\n</p>\n<p>Call on different workspace folder or childs then selected workspace\n<pre><code>pars workspace list\n</code></pre>\n\n<pre>\n(3) workspace available\n<p>&gt; OmicronConsulting\n* EpsilonEnterprises\nZetaSystems\n\n</p>","tags":["workspace","list"]},{"location":"guides/commands/environment/list.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p>\n\n\n\n<p>\n</p>","tags":["workspace","list"]},{"location":"guides/commands/group/index.html","title":"Group","text":"<p>Command: <code>group</code></p> <p>Shorthands: <code>g</code></p> <p>The <code>group</code> command is a parent command that provides various operations for managing Group(s). This command supports subcommands like <code>list</code>, <code>submit</code>, <code>describe</code>, and <code>remove</code> to handle different group-related tasks.</p>","tags":["group"]},{"location":"guides/commands/group/index.html#usage","title":"Usage","text":"<p><pre><code>pars group [flags]\n</code></pre> <pre><code>pars group [command]\n</code></pre></p>","tags":["group"]},{"location":"guides/commands/group/index.html#commands","title":"Commands","text":"Name Description <code>submit</code> Creates new group <code>list</code> List all existing groups <code>describe</code> Shows detailed information about a specified group <code>remove</code> Removes one or more specified groups Tip <p>You can use suggestions to list available sub commands. To do this, simply press Tab to proceed. For more details, please visit our Command Autocompletion and Filtering Guide.</p>","tags":["group"]},{"location":"guides/commands/group/index.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> <p> </p>","tags":["group"]},{"location":"guides/commands/group/describe.html","title":"Group Describe","text":"<p>Command: <code>group describe</code></p> <p>Shorthands: <code>g d</code></p> <p>The <code>group describe</code> command is used to display detailed information about a specified Group structure. This includes information such as the group details, path, package and any associated projects.</p>","tags":["group","describe"]},{"location":"guides/commands/group/describe.html#usage","title":"Usage","text":"<pre><code>pars group describe [name] [flags]\n</code></pre>","tags":["group","describe"]},{"location":"guides/commands/group/describe.html#arguments","title":"Arguments","text":"Name Datatype Required Default Description <code>name</code> <code>group</code> true <code>\"\"</code> Group name","tags":["group","describe"]},{"location":"guides/commands/group/describe.html#name","title":"<code>name</code>","text":"<ul> <li>Datatype: <code>group</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Validation Rules: Existing group names</li> <li>Args Index: <code>0</code></li> <li>Description: Group name</li> </ul> <p>Usage</p> <p>The <code>name</code> argument is used to specify the group name that you want to describe. This is required for the command to execute.</p> <p>Notes</p> <ul> <li>Ensure the group name provided is valid and exists to avoid errors during command execution.</li> </ul> Tip <p>You can use suggestions to list available groups. To do this, simply press Tab to proceed. For more details, please visit our Group Autocompletion and Filtering Guide.</p> Example <p><pre><code>pars group describe ApexSolutions\n</code></pre> <pre>\nGroup Name:     ApexSolutions\nPath:           ApexSolutions\nPackage:        ApexSolutions\nProjects:\n  - UserAuthService\n  - PaymentGatewayService\n</pre> </p>","tags":["group","describe"]},{"location":"guides/commands/group/describe.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> <p> </p>","tags":["group","describe"]},{"location":"guides/commands/group/list.html","title":"Group List","text":"<p>Command: <code>group list</code></p> <p>Shorthands: <code>g l</code></p> <p>The <code>group list</code> command is used to display a list of existing Group structures. This command helps you view all the groups that have been created, along with their details.</p>","tags":["group","list"]},{"location":"guides/commands/group/list.html#usage","title":"Usage","text":"<pre><code>pars group list [flags]\n</code></pre> Example <p>Classic usage <pre><code>pars group list\n</code></pre> <pre>\n(2) group available\nApexSolutions\nNeptuneDev\n</pre> </p>","tags":["group","list"]},{"location":"guides/commands/group/list.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> <p> </p>","tags":["group","list"]},{"location":"guides/commands/group/new-.html","title":"Group Submit","text":"<p>Command: <code>group submit</code></p> <p>Shorthands: <code>g s</code></p> <p>The <code>group submit</code> command is used to create a new Group structure(s). The group can be created by providing a <code>name</code> argument or using the <code>--file</code> flag to specify the path to a configuration file.</p>","tags":["group","submit"]},{"location":"guides/commands/group/new-.html#usage","title":"Usage","text":"<pre><code>pars group submit [name] [flags]\n</code></pre> <pre><code>pars group submit [flags]\n</code></pre>","tags":["group","submit"]},{"location":"guides/commands/group/new-.html#arguments","title":"Arguments","text":"Name Datatype Required Default Description <code>name</code> <code>string</code> false <code>\"\"</code> Group name","tags":["group","submit"]},{"location":"guides/commands/group/new-.html#name","title":"<code>name</code>","text":"<ul> <li>Datatype: <code>string</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Validation Rules: Avoid Non-English charachters</li> <li>Args Index: <code>0</code></li> <li>Description: New group name</li> </ul> Example <p><pre><code>pars group submit ApexSolutions\n</code></pre>  ApexSolutions Group created </p>","tags":["group","submit"]},{"location":"guides/commands/group/new-.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--file</code>, <code>-f</code> <code>file</code> true <code>\"\"</code> Create group(s) from manifest file","tags":["group","submit"]},{"location":"guides/commands/group/new-.html#-file","title":"<code>--file</code>","text":"<ul> <li>Aliases <code>-f</code></li> <li>Datatype: <code>file</code></li> <li>Type: <code>text</code></li> <li>Schema: GroupObjectModel</li> <li>Multiplicity: Optional</li> <li>Description: New group manifest file location</li> <li>Valid Values: <code>current_folder</code>, <code>absoulute_path_to_folder</code>, <code>absoulute_path_to_file</code>, <code>relative_path_to_folder</code>, <code>relative_path_to_file</code></li> </ul> <p> When both <code>name</code> argument and <code>--file</code> flag are provided, the command will prioritize the <code>name</code> argument for group creation.</p> <p>Usage</p> <p>The <code>--file</code> flag is used to specify the path to directories or files. It supports various forms of paths including current directory (.), relative paths, absolute paths, and specific files. This flag can be used one or more times within a command.</p> <p>Notes</p> <ul> <li>The <code>--file</code> flag can be repeated multiple times to specify multiple paths.</li> <li>Ensure that the paths provided with the <code>--file</code> flag are accessible and the configuration file is valid to avoid errors during command execution.</li> <li>The <code>--file</code> flag can be used to automate the creation of groups with predefined configurations.</li> </ul> <p>Supported Path Formats</p> <ul> <li> <p>Current Directory (<code>.</code>): Specifies the current working directory from which the command is being executed. This is useful for operations that need to be performed in the current directory without specifying the full path.</p> </li> <li> <p>Relative Directory or File: Specifies a path relative to the current working directory. This allows for flexibility in specifying paths without needing the full directory structure.</p> </li> <li> <p>Absolute Directory or File: Specifies the full path to a directory or file, starting from the root of the filesystem. This is useful when the exact location of the file or directory is known.</p> </li> </ul> Tip <p>You can use suggestions to list available paths. To do this, simply press Tab to proceed. For more details, please visit our Path Autocompletion and Filtering Guide.</p> Example <p> ./samples/ .zip .rar .7z .tar.gz <pre><code>.\n\u251c\u2500 samples/\n\u2502  \u251c\u2500 ApexSolutions.yaml\n\u2502  \u251c\u2500 NeptuneDev.yaml\n\u2514\u2500\u2500\u2514\u2500 OrionTech.yaml\n</code></pre></p> ApexSolutions.yamlNeptuneDev.yamlOrionTech.yaml <pre><code>type: Group\nname: ApexSolutions\nspecifications:\n  name: ApexSolutions\n</code></pre> <pre><code>type: Group\nname: NeptuneDev\nspecifications:\n  name: NeptuneDev\n</code></pre> <pre><code>type: Group\nname: OrionTech\nspecifications:\n  name: OrionTech\n</code></pre> <p>Specify Current Directory</p> <p><pre><code>pars group submit --file .\n</code></pre> <pre>\nApexSolutions Group created\nNeptuneDev Group created\nOrionTech Group created\n</pre> </p> <p>Specify a Relative Directory</p> <p><pre><code>pars group submit --file ./samples/\n</code></pre> <pre>\nApexSolutions Group created\nNeptuneDev Group created\nOrionTech Group created\n</pre> </p> <p>Specify a Relative File</p> <p><pre><code>pars group submit --file ./samples/ApexSolutions.yaml\n</code></pre> <pre>\nApexSolutions Group created\n</pre> </p> <p>Specify an Absolute Directory</p> <p><pre><code>pars group submit --file C:/samples/\n</code></pre> <pre>\nApexSolutions Group created\nNeptuneDev Group created\nOrionTech Group created\n</pre> </p> <p>Specify an Absolute File</p> <p><pre><code>pars group submit --file C:/samples/ApexSolutions.yaml\n</code></pre> <pre>\nApexSolutions Group created\n</pre> </p> <p>Specify Multiple Files or Directories</p> <p><pre><code>pars group submit --file ./samples/ApexSolutions.yaml --file ./samples/NeptuneDev.yaml\n</code></pre> <pre>\nApexSolutions Group created\nNeptuneDev Group created\n</pre> </p> <p> </p>","tags":["group","submit"]},{"location":"guides/commands/group/remove.html","title":"Group Remove","text":"<p>Command: <code>group remove</code></p> <p>Shorthands: <code>g r</code></p> <p>The <code>group remove</code> command is used to delete one or more specified Group structures. Groups can be removed by providing one or more <code>name</code> arguments or using the <code>--file</code> flag to specify a configuration file with the group names to delete. </p>","tags":["group","remove"]},{"location":"guides/commands/group/remove.html#usage","title":"Usage","text":"<pre><code>pars group remove name [name] [flags]\n</code></pre> <pre><code>pars group remove [flags]\n</code></pre>","tags":["group","remove"]},{"location":"guides/commands/group/remove.html#arguments","title":"Arguments","text":"Name Datatype Required Default Description <code>name</code> <code>[]group</code> true <code>\"\"</code> Group name","tags":["group","remove"]},{"location":"guides/commands/group/remove.html#name","title":"<code>name</code>","text":"<ul> <li>Datatype: <code>[]group</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Multiple</li> <li>Default: <code>none</code></li> <li>Validation Rules: Existing Group names</li> <li>Args Index: all</li> <li>Description: Names of the groups you want to remove. If provided, the <code>--file</code> flag will be ignored.</li> </ul> Tip <p>You can use suggestions to list available groups. To do this, simply press Tab to proceed. For more details, please visit our Group Autocompletion and Filtering Guide.</p> <p>Usage</p> <p>The name argument is used to specify one or more group names that you want to remove. This is useful for quickly deleting a few groups without needing a configuration file.</p> <p>Notes</p> <ul> <li>Multiple group names can be provided as space-separated values.</li> <li>If the name argument is provided, the <code>--file</code> flag will be ignored even if it is specified.</li> <li>Ensure the group names provided are valid and exist to avoid errors during command execution.</li> </ul> Example <p>Removing single group <pre><code>pars group remove ApexSolutions\n</code></pre>  Group (ApexSolutions) deleted permanently </p> <p>Removing multiple group <pre><code>pars group remove ApexSolutions NeptuneDev\n</code></pre> <pre>\nGroup (ApexSolutions) deleted permanently\nGroup (NeptuneDev) deleted permanently\n</pre> </p>","tags":["group","remove"]},{"location":"guides/commands/group/remove.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--file</code>, <code>-f</code> <code>file</code> true <code>\"\"</code> Remove group(s) from manifest file","tags":["group","remove"]},{"location":"guides/commands/group/remove.html#-file","title":"<code>--file</code>","text":"<ul> <li>Aliases <code>-f</code></li> <li>Datatype: <code>file</code></li> <li>Type: <code>text</code></li> <li>Schema: GroupObjectHeaderModel</li> <li>Multiplicity: Optional</li> <li>Description: Specify the path to a file containing group names to remove. This will be ignored if any name arguments are provided.</li> <li>Valid Values: <code>current_folder</code>, <code>absoulute_path_to_folder</code>, <code>absoulute_path_to_file</code>, <code>relative_path_to_folder</code>, <code>relative_path_to_file</code></li> </ul> <p> If the <code>name</code> argument is provided, the command will ignore the <code>--file</code> flag.</p> <p>Usage</p> <ul> <li>The <code>--file</code> flag is used to specify a configuration file containing the names of the groups to be removed. The file should contain a list of group names. This flag is useful for batch deletion of groups.</li> </ul> <p>Notes</p> <ul> <li>Ensure that the file path provided with the <code>--file</code> flag is accessible and contains valid group names to avoid errors during command execution.</li> </ul> <p>Supported Path Formats</p> <ul> <li> <p>Current Directory (<code>.</code>): Specifies the current working directory from which the command is being executed. This is useful for operations that need to be performed in the current directory without specifying the full path.</p> </li> <li> <p>Relative Directory or File: Specifies a path relative to the current working directory. This allows for flexibility in specifying paths without needing the full directory structure.</p> </li> <li> <p>Absolute Directory or File: Specifies the full path to a directory or file, starting from the root of the filesystem. This is useful when the exact location of the file or directory is known.</p> </li> </ul> Tip <p>You can use suggestions to list available paths. To do this, simply press Tab to proceed. For more details, please visit our Path Autocompletion and Filtering Guide.</p> Example <p> ./samples/ .zip .rar .7z .tar.gz <pre><code>.\n\u251c\u2500 samples/\n\u2502  \u251c\u2500 ApexSolutions.yaml\n\u2502  \u251c\u2500 NeptuneDev.yaml\n\u2514\u2500\u2500\u2514\u2500 OrionTech.yaml\n</code></pre></p> ApexSolutions.yamlNeptuneDev.yamlOrionTech.yaml <pre><code>type: Group\nname: ApexSolutions\nspecifications:\n  name: ApexSolutions\n</code></pre> <pre><code>type: Group\nname: NeptuneDev\nspecifications:\n  name: NeptuneDev\n</code></pre> <pre><code>type: Group\nname: OrionTech\nspecifications:\n  name: OrionTech\n</code></pre> <p>Specify Current Directory</p> <p><pre><code>pars group remove --file .\n</code></pre> <pre>\nGroup (ApexSolutions) deleted permanently\nGroup (NeptuneDev) deleted permanently\nGroup (OrionTech) deleted permanently\n</pre> </p> <p>Specify a Relative Directory</p> <p><pre><code>pars group remove --file ./samples/\n</code></pre> <pre>\nGroup (ApexSolutions) deleted permanently\nGroup (NeptuneDev) deleted permanently\nGroup (OrionTech) deleted permanently\n</pre> </p> <p>Specify a Relative File</p> <p><pre><code>pars group remove --file ./samples/ApexSolutions.yaml\n</code></pre> <pre>\nGroup (ApexSolutions) deleted permanently\n</pre> </p> <p>Specify an Absolute Directory</p> <p><pre><code>pars group remove --file C:/samples/\n</code></pre> <pre>\nGroup (ApexSolutions) deleted permanently\nGroup (NeptuneDev) deleted permanently\nGroup (OrionTech) deleted permanently\n</pre> </p> <p>Specify an Absolute File</p> <p><pre><code>pars group remove --file C:/samples/ApexSolutions.yaml\n</code></pre> <pre>\nGroup (ApexSolutions) deleted permanently\n</pre> </p> <p>Specify Multiple Files or Directories</p> <p><pre><code>pars group remove --file ./samples/ApexSolutions.yaml --file ./samples/NeptuneDev.yaml\n</code></pre> <pre>\nGroup (ApexSolutions) deleted permanently\nGroup (NeptuneDev) deleted permanently\n</pre> </p> <p> </p>","tags":["group","remove"]},{"location":"guides/commands/group/submit.html","title":"Group Submit","text":"<p>Command: <code>group submit</code></p> <p>Shorthands: <code>g s</code></p> <p>The <code>group submit</code> command is used to create a new Group structure(s). The group can be created by using the <code>--file</code> flag to specify the path to a configuration file.</p>","tags":["group","submit"]},{"location":"guides/commands/group/submit.html#usage","title":"Usage","text":"<pre><code>pars group submit [flags]\n</code></pre>","tags":["group","submit"]},{"location":"guides/commands/group/submit.html#arguments","title":"Arguments","text":"","tags":["group","submit"]},{"location":"guides/commands/group/submit.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--file</code>, <code>-f</code> <code>file</code> true <code>\"\"</code> Create group(s) from manifest file","tags":["group","submit"]},{"location":"guides/commands/group/submit.html#-file","title":"<code>--file</code>","text":"<ul> <li>Aliases <code>-f</code></li> <li>Datatype: <code>file</code></li> <li>Type: <code>text</code></li> <li>Schema: GroupObjectModel</li> <li>Multiplicity: Optional</li> <li>Description: New group manifest file location</li> <li>Valid Values: <code>current_folder</code>, <code>absoulute_path_to_folder</code>, <code>absoulute_path_to_file</code>, <code>relative_path_to_folder</code>, <code>relative_path_to_file</code></li> </ul> <p>Usage</p> <p>The <code>--file</code> flag is used to specify the path to directories or files. It supports various forms of paths including current directory (.), relative paths, absolute paths, and specific files. This flag can be used one or more times within a command.</p> <p>Notes</p> <ul> <li>The <code>--file</code> flag can be repeated multiple times to specify multiple paths.</li> <li>Ensure that the paths provided with the <code>--file</code> flag are accessible and the configuration file is valid to avoid errors during command execution.</li> <li>The <code>--file</code> flag can be used to automate the creation of groups with predefined configurations.</li> </ul> <p>Supported Path Formats</p> <ul> <li> <p>Current Directory (<code>.</code>): Specifies the current working directory from which the command is being executed. This is useful for operations that need to be performed in the current directory without specifying the full path.</p> </li> <li> <p>Relative Directory or File: Specifies a path relative to the current working directory. This allows for flexibility in specifying paths without needing the full directory structure.</p> </li> <li> <p>Absolute Directory or File: Specifies the full path to a directory or file, starting from the root of the filesystem. This is useful when the exact location of the file or directory is known.</p> </li> </ul> Tip <p>You can use suggestions to list available paths. To do this, simply press Tab to proceed. For more details, please visit our Path Autocompletion and Filtering Guide.</p> Example <p> ./samples/ .zip .rar .7z .tar.gz <pre><code>.\n\u251c\u2500 samples/\n\u2502  \u251c\u2500 ApexSolutions.yaml\n\u2502  \u251c\u2500 NeptuneDev.yaml\n\u2514\u2500\u2500\u2514\u2500 OrionTech.yaml\n</code></pre></p> ApexSolutions.yamlNeptuneDev.yamlOrionTech.yaml <pre><code>type: Group\nname: ApexSolutions\nspecifications:\n  name: ApexSolutions\n</code></pre> <pre><code>type: Group\nname: NeptuneDev\nspecifications:\n  name: NeptuneDev\n</code></pre> <pre><code>type: Group\nname: OrionTech\nspecifications:\n  name: OrionTech\n</code></pre> <p>Specify Current Directory</p> <p><pre><code>pars group submit --file .\n</code></pre> <pre>\nApexSolutions Group created\nNeptuneDev Group created\nOrionTech Group created\n</pre> </p> <p>Specify a Relative Directory</p> <p><pre><code>pars group submit --file ./samples/\n</code></pre> <pre>\nApexSolutions Group created\nNeptuneDev Group created\nOrionTech Group created\n</pre> </p> <p>Specify a Relative File</p> <p><pre><code>pars group submit --file ./samples/ApexSolutions.yaml\n</code></pre> <pre>\nApexSolutions Group created\n</pre> </p> <p>Specify an Absolute Directory</p> <p><pre><code>pars group submit --file C:/samples/\n</code></pre> <pre>\nApexSolutions Group created\nNeptuneDev Group created\nOrionTech Group created\n</pre> </p> <p>Specify an Absolute File</p> <p><pre><code>pars group submit --file C:/samples/ApexSolutions.yaml\n</code></pre> <pre>\nApexSolutions Group created\n</pre> </p> <p>Specify Multiple Files or Directories</p> <p><pre><code>pars group submit --file ./samples/ApexSolutions.yaml --file ./samples/NeptuneDev.yaml\n</code></pre> <pre>\nApexSolutions Group created\nNeptuneDev Group created\n</pre> </p> <p> </p>","tags":["group","submit"]},{"location":"guides/commands/init/index.html","title":"Init","text":"<p>Command: <code>init</code></p> <p>Shorthands: <code>i</code></p> <p>The <code>init</code> command is used to create a new workspace. This is the only way to create a workspace in the application. It accepts <code>name</code> and <code>path</code> arguments. If</p> <p>If you are creating a workspace for the first time, it will be marked as the <code>selected workspace</code>.</p>","tags":["init"]},{"location":"guides/commands/init/index.html#usage","title":"Usage","text":"<pre><code>pars init [name] [path] [flags]\n</code></pre> Example <p><pre><code>pars init\n</code></pre>  New workspace (workspace) created at: C:\\foo\\current_directory\\workspace </p>","tags":["init"]},{"location":"guides/commands/init/index.html#arguments","title":"Arguments","text":"Name Datatype Required Default Description <code>name</code> <code>string</code> false <code>workspace</code> Name of the workspace <code>path</code> <code>directory</code> false <code>current directory</code> Path where the workspace will be created","tags":["init"]},{"location":"guides/commands/init/index.html#name","title":"<code>name</code>","text":"<ul> <li>Datatype: <code>string</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>workspace</code></li> <li>Validation Rules: Avoid Non-English charachters</li> <li>Args Index: <code>0</code></li> <li>Description: The name of the workspace. If not specified, it defaults to workspace.</li> </ul> <p>Usage</p> <p>The <code>name</code> argument is used to specify the name of the workspace to be created. If not provided, the default name workspace will be used.</p> <p>Notes</p> <ul> <li>Ensure the workspace name is valid to avoid errors during command execution.</li> </ul> Example <p>Default name :      Workspace <code>name</code> will be created by adding increasing numbers to the end  '<code>workspace</code> + <code>[0-9]?</code>'</p> <p><pre><code>pars init\n</code></pre>  New workspace (workspace) created at: C:\\foo\\current_directory\\workspace </p> <p>Custom name :      Workspace <code>name</code> will be set to specified name  'ws_name'</p> <p><pre><code>pars init ws_name\n</code></pre>  New workspace (ws_name) created at: C:\\foo\\current_directory\\ws_name </p>","tags":["init"]},{"location":"guides/commands/init/index.html#path","title":"<code>path</code>","text":"<ul> <li>Datatype: <code>string</code></li> <li>Type: <code>path</code> (Absolute, Relative path)</li> <li>Multiplicity: Optional</li> <li>Default: <code>current directory</code> + <code>workspace name</code></li> <li>Valid Values: <code></code>, <code>.</code>, <code>Relative Path</code>, <code>Absolute Path</code></li> <li>Args Index: <code>1</code></li> <li>Description: The directory path where the workspace will be created. If not specified, the current directory will be used, and a folder with the workspace name will be created. If . is specified, the current directory itself will be used as the workspace path.</li> </ul> <p>Usage</p> <p>The <code>path</code> argument is used to specify the location where the workspace will be created. This can be an absolute or relative path.</p> <p>Notes</p> <ul> <li>If the path does not exist, it will be created.</li> <li>If not specified, the current directory will be used, and a folder with the workspace name will be created.</li> <li>If <code>.</code> is specified, the current directory will be used directly as the workspace path.</li> </ul> Tip <p>You can use suggestions to list available paths. To do this, simply press Tab to proceed. For more details, please visit our Path Autocompletion and Filtering Guide.</p> Example <p>Non-path :      Workspace <code>path</code> will be generated automatically like '<code>current directory</code> + <code>workspace name</code>'</p> <p><pre><code>pars init ws_name\n</code></pre>  New workspace (ws_name) created at: C:\\foo\\current_directory\\ws_name </p> <p>Current Directory :      Workspace <code>path</code> will be generated automatically like '<code>current directory</code>'</p> <p><pre><code>pars init ws_name .\n</code></pre>  New workspace (ws_name) created at: C:\\foo\\current_directory </p> <p>Relative Path :      Workspace <code>path</code> will be generated automatically like '<code>current directory</code> + <code>custom_dir</code>'</p> <p><pre><code>pars init ws_name /custom_dir\n</code></pre>  New workspace (ws_name) created at: C:\\foo\\current_directory\\custom_dir </p> <p>Absoulute Path :      Workspace <code>path</code> will be use given path '<code>C:/custom_dir</code>'</p> <p><pre><code>pars init ws_name C:/custom_dir\n</code></pre>  New workspace (ws_name) created at: C:/custom_dir </p>","tags":["init"]},{"location":"guides/commands/init/index.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> <p> </p>","tags":["init"]},{"location":"guides/commands/project/index.html","title":"Project","text":"<p>Command: <code>project</code></p> <p>Shorthands: <code>p</code></p> <p>The <code>project</code> command is a parent command that provides various operations for managing Project(s). This command supports subcommands like <code>list</code>, <code>submit</code>, <code>describe</code>, and <code>remove</code> to handle different project-related tasks.</p>","tags":["project"]},{"location":"guides/commands/project/index.html#usage","title":"Usage","text":"<p><pre><code>pars project [flags]\n</code></pre> <pre><code>pars project [command]\n</code></pre></p>","tags":["project"]},{"location":"guides/commands/project/index.html#commands","title":"Commands","text":"Name Description <code>submit</code> Creates new project <code>list</code> List all existing projects <code>describe</code> Shows detailed information about a specified project <code>remove</code> Removes one or more specified projects Tip <p>You can use suggestions to list available sub commands. To do this, simply press Tab to proceed. For more details, please visit our Command Autocompletion and Filtering Guide.</p>","tags":["project"]},{"location":"guides/commands/project/index.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> <p> </p>","tags":["project"]},{"location":"guides/commands/project/describe.html","title":"Project Describe","text":"<p>Command: <code>project describe</code></p> <p>Shorthands: <code>p d</code></p> <p>The <code>project describe</code> command is used to display detailed information about a specified Project structure. This includes information such as the project details, path, package and any associated projects.</p>","tags":["project","describe"]},{"location":"guides/commands/project/describe.html#usage","title":"Usage","text":"<pre><code>pars project describe [name] [flags]\n</code></pre>","tags":["project","describe"]},{"location":"guides/commands/project/describe.html#arguments","title":"Arguments","text":"Name Datatype Required Default Description <code>name</code> <code>project</code> true <code>\"\"</code> Project name","tags":["project","describe"]},{"location":"guides/commands/project/describe.html#name","title":"<code>name</code>","text":"<ul> <li>Datatype: <code>project</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Validation Rules: Existing project names</li> <li>Args Index: <code>0</code></li> <li>Description: Project name</li> </ul> <p>Usage</p> <p>The <code>name</code> argument is used to specify the project name that you want to describe. This is required for the command to execute.</p> <p>Notes</p> <ul> <li>Ensure the project name provided is valid and exists to avoid errors during command execution.</li> </ul> Tip <p>You can use suggestions to list available projects. To do this, simply press Tab to proceed. For more details, please visit our Project Autocompletion and Filtering Guide.</p> Example <p><pre><code>pars project describe LogServiceProject\n</code></pre> <pre>\n- LogServiceProject (none-set)\n         Labels: []\n         Platform: Dotnet\n         Type: Web Api\n         Runtime: Unknown\n         Layers: []\n</pre> </p>","tags":["project","describe"]},{"location":"guides/commands/project/describe.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--workspace</code>, <code>-w</code> <code>workspace</code> false <code>current_workspace</code> Name of the workspace where the project is located","tags":["project","describe"]},{"location":"guides/commands/project/describe.html#-workspace","title":"<code>--workspace</code>","text":"<ul> <li>Aliases <code>-w</code></li> <li>Datatype: <code>workspace</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>current_workspace</code></li> <li>Validation Rules: Existing workspace names</li> <li>Description: Describe project in the specified workspace</li> </ul> <p> If you don't specify workspace name, by default <code>pars</code> get current workspace details</p> <p>Usage</p> <p>The <code>--workspace</code> flag is used to specify the workspace from which you want to describe project. This flag helps you focus on the projects within a particular workspace.</p> <p>Notes</p> <ul> <li>The <code>--workspace</code> flag is used in commands where you need to describe project within a specific workspace.</li> <li>Ensure that the workspace name provided is valid and recognized by Pars to avoid errors during the describing process.</li> <li>This flag is beneficial for scenarios where you need to review or manage projects within a particular workspace.</li> </ul> Tip <p>You can use suggestions to list available workspaces. To do this, simply press Tab to proceed. For more details, please visit our Workspace Autocompletion and Filtering Guide.</p> Example <p><pre><code>pars project describe --workspace MyWorkspace LogServiceProject\n</code></pre> <pre>\n- LogServiceProject (none-set)\n         Labels: []\n         Platform: Dotnet\n         Type: Web Api\n         Runtime: Unknown\n         Layers: []\n</pre> </p> <p> </p>","tags":["project","describe"]},{"location":"guides/commands/project/list.html","title":"Project List","text":"<p>Command: <code>project list</code></p> <p>Shorthands: <code>p l</code></p> <p>The <code>project list</code> command is used to display a list of existing Project structures. This command helps you view all the projects that have been created, along with their details.</p>","tags":["project","list"]},{"location":"guides/commands/project/list.html#usage","title":"Usage","text":"<pre><code>pars project list [flags]\n</code></pre> Example <p>Classic usage <pre><code>pars project list\n</code></pre> <pre>\n(3) application project available\n</pre> <pre>\n- AuthServiceProject (none-set)\n- LogServiceProject (none-set)\n- UserServiceProject (none-set)\n</pre> </p>","tags":["project","list"]},{"location":"guides/commands/project/list.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--workspace</code>, <code>-w</code> <code>workspace</code> false <code>current_workspace</code> The name of the workspace whose projects you want to list","tags":["project","list"]},{"location":"guides/commands/project/list.html#-workspace","title":"<code>--workspace</code>","text":"<ul> <li>Aliases <code>-w</code></li> <li>Datatype: <code>workspace</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>current_workspace</code></li> <li>Validation Rules: Existing workspace names</li> <li>Description: List projects in the specified workspace</li> </ul> <p> If you don't specify workspace name, by default <code>pars</code> get current workspace details</p> <p>Usage</p> <p>The <code>--workspace</code> flag is used to specify the workspace from which you want to list the projects. This flag helps you focus on the projects within a particular workspace managed by Pars.</p> <p>Notes</p> <ul> <li>The <code>--workspace</code> flag is used in commands where you need to list projects within a specific workspace.</li> <li>Ensure that the workspace name provided is valid and recognized by Pars to avoid errors during the listing process.</li> <li>This flag is beneficial for scenarios where you need to review or manage projects within a particular workspace.</li> </ul> Tip <p>You can use suggestions to list available workspaces. To do this, simply press Tab to proceed. For more details, please visit our Workspace Autocompletion and Filtering Guide.</p> Example <p><pre><code>pars project list --workspace MyWorkspace\n</code></pre> <pre>\n(3) application project available\n</pre> <pre>\n- AuthServiceProject (none-set)\n- LogServiceProject (none-set)\n- UserServiceProject (none-set)\n</pre> </p> <p> </p>","tags":["project","list"]},{"location":"guides/commands/project/remove.html","title":"Project Remove","text":"<p>Command: <code>project remove</code></p> <p>Shorthands: <code>p r</code></p> <p>The <code>project remove</code> command is used to delete one or more specified Project structures. Projects can be removed by providing one or more <code>name</code> arguments or using the <code>--file</code> flag to specify a configuration file with the project names to delete. </p>","tags":["project","remove"]},{"location":"guides/commands/project/remove.html#usage","title":"Usage","text":"<pre><code>pars project remove name [name] [flags]\n</code></pre> <pre><code>pars project remove [flags]\n</code></pre>","tags":["project","remove"]},{"location":"guides/commands/project/remove.html#arguments","title":"Arguments","text":"Name Datatype Required Default Description <code>name</code> <code>[]project</code> true <code>\"\"</code> Project name","tags":["project","remove"]},{"location":"guides/commands/project/remove.html#name","title":"<code>name</code>","text":"<ul> <li>Datatype: <code>[]project</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Multiple</li> <li>Default: <code>none</code></li> <li>Validation Rules: Existing Project names</li> <li>Args Index: all</li> <li>Description: Names of the projects you want to remove. If provided, the <code>--file</code> flag will be ignored.</li> </ul> Tip <p>You can use suggestions to list available projects. To do this, simply press Tab to proceed. For more details, please visit our Project Autocompletion and Filtering Guide.</p> <p>Usage</p> <p>The name argument is used to specify one or more project names that you want to remove. This is useful for quickly deleting a few projects without needing a configuration file.</p> <p>Notes</p> <ul> <li>Multiple project names can be provided as space-separated values.</li> <li>If the name argument is provided, the <code>--file</code> flag will be ignored even if it is specified.</li> <li>Ensure the project names provided are valid and exist to avoid errors during command execution.</li> </ul> Example <p>Removing single project <pre><code>pars pars project remove AuthServiceProject\n</code></pre>  Project (AuthService) deleted permanently </p> <p>Removing multiple project <pre><code>pars project remove AuthService UserServiceProject\n</code></pre> <pre>\nProject (AuthService) deleted permanently\nProject (UserServiceProject) deleted permanently\n</pre> </p>","tags":["project","remove"]},{"location":"guides/commands/project/remove.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--file</code>, <code>-f</code> <code>file</code> true <code>\"\"</code> Remove project(s) from manifest file <code>--workspace</code>, <code>-w</code> <code>workspace</code> false <code>current_workspace</code> Name of the workspace where the project is located","tags":["project","remove"]},{"location":"guides/commands/project/remove.html#-file","title":"<code>--file</code>","text":"<ul> <li>Aliases <code>-f</code></li> <li>Datatype: <code>file</code></li> <li>Type: <code>text</code></li> <li>Schema: ProjectObjectHeaderModel</li> <li>Multiplicity: Optional</li> <li>Description: Specify the path to a file containing project names to remove. This will be ignored if any name arguments are provided.</li> <li>Valid Values: <code>current_folder</code>, <code>absoulute_path_to_folder</code>, <code>absoulute_path_to_file</code>, <code>relative_path_to_folder</code>, <code>relative_path_to_file</code></li> </ul> <p> If the <code>name</code> argument is provided, the command will ignore the <code>--file</code> flag.</p> <p>Usage</p> <ul> <li>The <code>--file</code> flag is used to specify a configuration file containing the names of the projects to be removed. The file should contain a list of project names. This flag is useful for batch deletion of projects.</li> </ul> <p>Notes</p> <ul> <li>Ensure that the file path provided with the <code>--file</code> flag is accessible and contains valid project names to avoid errors during command execution.</li> </ul> <p>Supported Path Formats</p> <ul> <li> <p>Current Directory (<code>.</code>): Specifies the current working directory from which the command is being executed. This is useful for operations that need to be performed in the current directory without specifying the full path.</p> </li> <li> <p>Relative Directory or File: Specifies a path relative to the current working directory. This allows for flexibility in specifying paths without needing the full directory structure.</p> </li> <li> <p>Absolute Directory or File: Specifies the full path to a directory or file, starting from the root of the filesystem. This is useful when the exact location of the file or directory is known.</p> </li> </ul> Tip <p>You can use suggestions to list available paths. To do this, simply press Tab to proceed. For more details, please visit our Path Autocompletion and Filtering Guide.</p> Example <p>Specify Current Directory</p> <p><pre><code>pars project remove --file .\n</code></pre> <pre>\nProject (AuthServiceProject) deleted permanently\nProject (UserServiceProject) deleted permanently\nProject (LogServiceProject) deleted permanently\n</pre> </p> <p>Specify a Relative Directory</p> <p><pre><code>pars project remove --file ./samples/\n</code></pre> <pre>\nProject (AuthServiceProject) deleted permanently\nProject (UserServiceProject) deleted permanently\nProject (LogServiceProject) deleted permanently\n</pre> </p> <p>Specify a Relative File</p> <p><pre><code>pars project remove --file ./samples/AuthServiceProject.yaml\n</code></pre> <pre>\nProject (AuthServiceProject) deleted permanently\n</pre> </p> <p>Specify an Absolute Directory</p> <p><pre><code>pars project remove --file C:/samples/\n</code></pre> <pre>\nProject (AuthServiceProject) deleted permanently\nProject (UserServiceProject) deleted permanently\nProject (LogServiceProject) deleted permanently\n</pre> </p> <p>Specify an Absolute File</p> <p><pre><code>pars project remove --file C:/samples/AuthServiceProject.yaml\n</code></pre> <pre>\nProject (AuthServiceProject) deleted permanently\n</pre> </p> <p>Specify Multiple Files or Directories</p> <p><pre><code>pars project remove --file ./samples/AuthServiceProject.yaml --file ./samples/UserServiceProject.yaml\n</code></pre> <pre>\nProject (AuthServiceProject) deleted permanently\nProject (UserServiceProject) deleted permanently\n</pre> </p>","tags":["project","remove"]},{"location":"guides/commands/project/remove.html#-workspace","title":"<code>--workspace</code>","text":"<ul> <li>Aliases <code>-w</code></li> <li>Datatype: <code>workspace</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>current_workspace</code></li> <li>Validation Rules: Existing workspace names</li> <li>Description: Describe project in the specified workspace</li> </ul> <p> If you don't specify workspace name, by default <code>pars</code> get current workspace details</p> <p>Usage</p> <p>The <code>--workspace</code> flag is used to specify the workspace from which you want to remove projects. This flag helps you focus on the projects within a particular workspace.</p> <p>Notes</p> <ul> <li>The <code>--workspace</code> flag is used in commands where you need to remove projects within a specific workspace.</li> <li>Ensure that the workspace name provided is valid and recognized by Pars to avoid errors during the removing process.</li> <li>This flag is beneficial for scenarios where you need to review or manage projects within a particular workspace.</li> </ul> Tip <p>You can use suggestions to list available workspaces. To do this, simply press Tab to proceed. For more details, please visit our Workspace Autocompletion and Filtering Guide.</p> Example <p>Specify Current Directory</p> <p><pre><code>pars project remove --workspace MyWorkspace AuthServiceProject\n</code></pre> <pre>\nProject (AuthServiceProject) deleted permanently\n</pre> </p> <p> </p>","tags":["project","remove"]},{"location":"guides/commands/project/submit.html","title":"Project Submit","text":"<p>Command: <code>project submit</code></p> <p>Shorthands: <code>p s</code></p> <p>The <code>project submit</code> command is used to create a new Project structure(s). The project can be created by providing  <code>--file</code> flag to specify the path to a configuration file.</p>","tags":["project","submit"]},{"location":"guides/commands/project/submit.html#usage","title":"Usage","text":"<pre><code>pars project submit [flags]\n</code></pre>","tags":["project","submit"]},{"location":"guides/commands/project/submit.html#arguments","title":"Arguments","text":"","tags":["project","submit"]},{"location":"guides/commands/project/submit.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--file</code>, <code>-f</code> <code>file</code> true <code>\"\"</code> Create project(s) from manifest file <code>--no-init</code> <code>boolean</code> true <code>false</code> Create project(s) declaration only <code>--workspace</code>, <code>-w</code> <code>workspace</code> false <code>current_workspace</code> Name of the workspace where the project is located","tags":["project","submit"]},{"location":"guides/commands/project/submit.html#-file","title":"<code>--file</code>","text":"<ul> <li>Aliases <code>-f</code></li> <li>Datatype: <code>file</code></li> <li>Type: <code>text</code></li> <li>Schema: ApplicationProjectObjectModel</li> <li>Multiplicity: Optional</li> <li>Description: New project manifest file location</li> <li>Valid Values: <code>current_folder</code>, <code>absoulute_path_to_folder</code>, <code>absoulute_path_to_file</code>, <code>relative_path_to_folder</code>, <code>relative_path_to_file</code></li> </ul> <p>Usage</p> <p>The <code>--file</code> flag is used to specify the path to directories or files. It supports various forms of paths including current directory (.), relative paths, absolute paths, and specific files. This flag can be used one or more times within a command.</p> <p>Notes</p> <ul> <li>The <code>--file</code> flag can be repeated multiple times to specify multiple paths.</li> <li>Ensure that the paths provided with the <code>--file</code> flag are accessible and the configuration file is valid to avoid errors during command execution.</li> <li>The <code>--file</code> flag can be used to automate the creation of projects with predefined configurations.</li> </ul> <p>Supported Path Formats</p> <ul> <li> <p>Current Directory (<code>.</code>): Specifies the current working directory from which the command is being executed. This is useful for operations that need to be performed in the current directory without specifying the full path.</p> </li> <li> <p>Relative Directory or File: Specifies a path relative to the current working directory. This allows for flexibility in specifying paths without needing the full directory structure.</p> </li> <li> <p>Absolute Directory or File: Specifies the full path to a directory or file, starting from the root of the filesystem. This is useful when the exact location of the file or directory is known.</p> </li> </ul> Tip <p>You can use suggestions to list available paths. To do this, simply press Tab to proceed. For more details, please visit our Path Autocompletion and Filtering Guide.</p> Example <p>Specify Current Directory</p> <p><pre><code>pars project submit --file .\n</code></pre> <pre>\nThe template \"ASP.NET Core Web API\" was created successfully.\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\AuthService\\AuthService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\AuthService\\AuthService.csproj (in 1.51 sec).\nRestore succeeded.</p>\n<p>AuthServiceProject (0) Project created\nThe template \"ASP.NET Core Web API\" was created successfully.</p>\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\LogService\\LogService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\LogService\\LogService.csproj (in 239 ms).\nRestore succeeded.</p>\n<p>LogServiceProject (1) Project created\nThe template \"ASP.NET Core Web API\" was created successfully.</p>\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\UserService\\UserService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\UserService\\UserService.csproj (in 225 ms).\nRestore succeeded.</p>\n<p>UserServiceProject (2) Project created\n\n</p>\n<p>Specify a Relative Directory</p>\n<p><pre><code>pars project submit --file ./samples/\n</code></pre>\n\n<pre>\nThe template \"ASP.NET Core Web API\" was created successfully.\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\AuthService\\AuthService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\AuthService\\AuthService.csproj (in 1.51 sec).\nRestore succeeded.</p>\n<p>AuthServiceProject (0) Project created\nThe template \"ASP.NET Core Web API\" was created successfully.</p>\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\LogService\\LogService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\LogService\\LogService.csproj (in 239 ms).\nRestore succeeded.</p>\n<p>LogServiceProject (1) Project created\nThe template \"ASP.NET Core Web API\" was created successfully.</p>\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\UserService\\UserService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\UserService\\UserService.csproj (in 225 ms).\nRestore succeeded.</p>\n<p>UserServiceProject (2) Project created\n\n</p>\n<p>Specify a Relative File</p>\n<p><pre><code>pars project submit --file ./samples/AuthServiceWebApi.yaml\n</code></pre>\n\n<pre>\nThe template \"ASP.NET Core Web API\" was created successfully.\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\AuthService\\AuthService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\AuthService\\AuthService.csproj (in 1.51 sec).\nRestore succeeded.</p>\n<p>AuthServiceProject (0) Project created\n\n</p>\n<p>Specify an Absolute Directory</p>\n<p><pre><code>pars project submit --file C:/samples/\n</code></pre>\n\n<pre>\nThe template \"ASP.NET Core Web API\" was created successfully.\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\AuthService\\AuthService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\AuthService\\AuthService.csproj (in 1.51 sec).\nRestore succeeded.</p>\n<p>AuthServiceProject (0) Project created\nThe template \"ASP.NET Core Web API\" was created successfully.</p>\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\LogService\\LogService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\LogService\\LogService.csproj (in 239 ms).\nRestore succeeded.</p>\n<p>LogServiceProject (1) Project created\nThe template \"ASP.NET Core Web API\" was created successfully.</p>\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\UserService\\UserService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\UserService\\UserService.csproj (in 225 ms).\nRestore succeeded.</p>\n<p>UserServiceProject (2) Project created\n\n</p>\n<p>Specify an Absolute File</p>\n<p><pre><code>pars project submit --file C:/samples/AuthServiceWebApi.yaml\n</code></pre>\n\n<pre>\nThe template \"ASP.NET Core Web API\" was created successfully.\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\AuthService\\AuthService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\AuthService\\AuthService.csproj (in 1.51 sec).\nRestore succeeded.</p>\n<p>AuthServiceProject (0) Project created\n\n</p>\n<p>Specify Multiple Files or Directories</p>\n<p><pre><code>pars project submit --file ./samples/AuthServiceWebApi.yaml --file ./samples/LogServiceWebApi.yaml\n</code></pre>\n\n<pre>\nThe template \"ASP.NET Core Web API\" was created successfully.\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\AuthService\\AuthService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\AuthService\\AuthService.csproj (in 1.51 sec).\nRestore succeeded.</p>\n<p>AuthServiceProject (0) Project created\nThe template \"ASP.NET Core Web API\" was created successfully.</p>\n<p>Processing post-creation actions...\nRestoring C:\\workspace\\codebase\\LogService\\LogService.csproj:\nDetermining projects to restore...\nRestored C:\\workspace\\codebase\\LogService\\LogService.csproj (in 239 ms).\nRestore succeeded.</p>\n<p>LogServiceProject (1) Project created\n\n</p>","tags":["project","submit"]},{"location":"guides/commands/project/submit.html#-no-init","title":"<code>--no-init</code>","text":"<ul>\n<li>Datatype: <code>boolean</code></li>\n<li>Type: <code>boolean</code></li>\n<li>Multiplicity: Optional</li>\n<li>Default: <code>false</code></li>\n<li>Description: Register existing project manifests without physically creating new projects</li>\n<li>Valid Values: <code>true</code>, <code>false</code></li>\n</ul>\n<p>Usage</p>\n<p>The <code>--no-init</code> flag is used to indicate that the specified project models should only be registered with the parser and not physically created. This flag is useful when you have predefined project configurations that you want to make known to the parser without initiating the creation process.</p>\n<p>Notes</p>\n<ul>\n<li>The <code>--no-init</code> flag can be used in commands where you need to register existing projects.</li>\n<li>Ensure that the project models provided are valid and accessible to avoid errors during the registration process.</li>\n<li>This flag is beneficial for scenarios where project configurations already exist and you want to reintroduce them to the parser for further operations without creating new projects.</li>\n</ul>\n\nExample\n<p><pre><code>pars project submit --file C:/samples/AuthServiceWebApi.yaml\n</code></pre>\n\n<pre>\nAuthServiceProject (0) Project created\n</pre>\n</p>","tags":["project","submit"]},{"location":"guides/commands/project/submit.html#-workspace","title":"<code>--workspace</code>","text":"<ul>\n<li>Aliases <code>-w</code></li>\n<li>Datatype: <code>workspace</code></li>\n<li>Type: <code>text</code></li>\n<li>Multiplicity: Optional</li>\n<li>Default: <code>current_workspace</code></li>\n<li>Validation Rules: Existing workspace names</li>\n<li>Description: Describe project in the specified workspace</li>\n</ul>\n\n<p> If you don't specify workspace name, by default <code>pars</code> get current workspace details</p>\n\n<p>Usage</p>\n<p>The <code>--workspace</code> flag is used to specify the workspace from which you want to create projects. This flag helps you focus on the projects within a particular workspace.</p>\n<p>Notes</p>\n<ul>\n<li>The <code>--workspace</code> flag is used in commands where you need to create projects within a specific workspace.</li>\n<li>Ensure that the workspace name provided is valid and recognized by Pars to avoid errors during the creation process.</li>\n<li>This flag is beneficial for scenarios where you need to review or manage projects within a particular workspace.</li>\n</ul>\n\nTip\n<p>You can use suggestions to list available workspaces. To do this, simply press Tab to proceed. For more details, please visit our Workspace Autocompletion and Filtering Guide.</p>\n\n\nExample\n<p><pre><code>pars project submit --file ./samples/AuthServiceWebApi.yaml --workspace MyWorkspace\n</code></pre>\n\n<pre>\nThe template \"ASP.NET Core Web API\" was created successfully.\n<p>Processing post-creation actions...\nRestoring C:\\MyWorkspace\\codebase\\AuthService\\AuthService.csproj:\nDetermining projects to restore...\nRestored C:\\MyWorkspace\\codebase\\AuthService\\AuthService.csproj (in 1.51 sec).\nRestore succeeded.</p>\n<p>AuthServiceProject (0) Project created\n\n\n</p>\n\n\n\n\n\n<p>\n</p>","tags":["project","submit"]},{"location":"guides/commands/resource/index.html","title":"Resource","text":"<p>Command: <code>resource</code></p> <p>Shorthands: <code>r</code></p> <p>The <code>resource</code> command is a parent command that provides various operations for managing Resource(s). This command supports subcommands like <code>list</code>, <code>submit</code>, and <code>remove</code> to handle different resource-related tasks.</p>","tags":["resource"]},{"location":"guides/commands/resource/index.html#usage","title":"Usage","text":"<p><pre><code>pars resource [flags]\n</code></pre> <pre><code>pars resource [command]\n</code></pre></p>","tags":["resource"]},{"location":"guides/commands/resource/index.html#commands","title":"Commands","text":"Name Description <code>submit</code> Creates new resource <code>list</code> List all existing resources <code>remove</code> Removes one or more specified resources Tip <p>You can use suggestions to list available sub commands. To do this, simply press Tab to proceed. For more details, please visit our Command Autocompletion and Filtering Guide.</p>","tags":["resource"]},{"location":"guides/commands/resource/index.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> <p> </p>","tags":["resource"]},{"location":"guides/commands/resource/list.html","title":"Resource List","text":"<p>Command: <code>resource list</code></p> <p>Shorthands: <code>r l</code></p> <p>The <code>resource list</code> command is used to display a list of existing Resource structures. This command helps you view all the resources that have been created, along with their details. You can find all Global Resources, Workspace Resources, Object Resources, Data Resources</p>","tags":["resource","list"]},{"location":"guides/commands/resource/list.html#usage","title":"Usage","text":"<pre><code>pars resource list [flags]\n</code></pre> Example <p>Classic usage <pre><code>pars resource list\n</code></pre> <pre>\n*** Global Resources ***\n<p>(0) object resource available</p>\n<p>--------------------------</p>\n<p>(0) data resource available</p>\n<p>*** Workspace Specific Resources ***</p>\n<p>(0) object resource available</p>\n<p>--------------------------</p>\n<p>(2) data resource available</p>\n<ul>\n<li>Product_SeedData (EShopping)</li>\n<li>ProductBrand_SeedData (EShopping)\n\n</li>\n</ul>","tags":["resource","list"]},{"location":"guides/commands/resource/list.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p>\n\n\n\n<p>\n</p>","tags":["resource","list"]},{"location":"guides/commands/resource/remove.html","title":"Resource Remove","text":"<p>Command: <code>resource remove</code></p> <p>Shorthands: <code>r r</code></p> <p>The <code>resource remove</code> command is used to delete one or more specified Resource structures. Resources can be removed by providing one or more <code>name</code> arguments or using the <code>--file</code> flag to specify a configuration file with the resource names to delete. </p>","tags":["resource","remove"]},{"location":"guides/commands/resource/remove.html#usage","title":"Usage","text":"<pre><code>pars resource remove name [name] [flags]\n</code></pre> <pre><code>pars resource remove [flags]\n</code></pre>","tags":["resource","remove"]},{"location":"guides/commands/resource/remove.html#arguments","title":"Arguments","text":"Name Datatype Required Default Description <code>name</code> <code>[]resource</code> true <code>\"\"</code> Resource name","tags":["resource","remove"]},{"location":"guides/commands/resource/remove.html#name","title":"<code>name</code>","text":"<ul> <li>Datatype: <code>[]resource</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Multiple</li> <li>Default: <code>none</code></li> <li>Validation Rules: Existing Resource names</li> <li>Args Index: all</li> <li>Description: Names of the resources you want to remove. If provided, the <code>--file</code> flag will be ignored.</li> </ul> Tip <p>You can use suggestions to list available resources. To do this, simply press Tab to proceed. For more details, please visit our Resource Autocompletion and Filtering Guide.</p> <p>Usage</p> <p>The name argument is used to specify one or more resource names that you want to remove. This is useful for quickly deleting a few resources without needing a configuration file.</p> <p>Notes</p> <ul> <li>Multiple resource names can be provided as space-separated values.</li> <li>If the name argument is provided, the <code>--file</code> flag will be ignored even if it is specified.</li> <li>Ensure the resource names provided are valid and exist to avoid errors during command execution.</li> </ul> Example <p>Removing single resource <pre><code>pars resource remove ProductBrand_SeedData\n</code></pre>  Resource (ProductBrand_SeedData) deleted permanently </p> <p>Removing multiple resource <pre><code>pars resource remove ProductBrand_SeedData Product_SeedData\n</code></pre> <pre>\nResource (ProductBrand_SeedData) deleted permanently\nResource (Product_SeedData) deleted permanently\n</pre> </p>","tags":["resource","remove"]},{"location":"guides/commands/resource/remove.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--file</code>, <code>-f</code> <code>file</code> true <code>\"\"</code> Remove resource(s) from manifest file","tags":["resource","remove"]},{"location":"guides/commands/resource/remove.html#-file","title":"<code>--file</code>","text":"<ul> <li>Aliases <code>-f</code></li> <li>Datatype: <code>file</code></li> <li>Type: <code>text</code></li> <li>Schema: ObjectResourceObjectModel, DataResourceObjectModel</li> <li>Multiplicity: Optional</li> <li>Description: Specify the path to a file containing resource names to remove. This will be ignored if any name arguments are provided.</li> <li>Valid Values: <code>current_folder</code>, <code>absoulute_path_to_folder</code>, <code>absoulute_path_to_file</code>, <code>relative_path_to_folder</code>, <code>relative_path_to_file</code></li> </ul> <p> If the <code>name</code> argument is provided, the command will ignore the <code>--file</code> flag.</p> <p>Usage</p> <ul> <li>The <code>--file</code> flag is used to specify a configuration file containing the names of the resources to be removed. The file should contain a list of resource names. This flag is useful for batch deletion of resources.</li> </ul> <p>Notes</p> <ul> <li>Ensure that the file path provided with the <code>--file</code> flag is accessible and contains valid resource names to avoid errors during command execution.</li> </ul> <p>Supported Path Formats</p> <ul> <li> <p>Current Directory (<code>.</code>): Specifies the current working directory from which the command is being executed. This is useful for operations that need to be performed in the current directory without specifying the full path.</p> </li> <li> <p>Relative Directory or File: Specifies a path relative to the current working directory. This allows for flexibility in specifying paths without needing the full directory structure.</p> </li> <li> <p>Absolute Directory or File: Specifies the full path to a directory or file, starting from the root of the filesystem. This is useful when the exact location of the file or directory is known.</p> </li> </ul> Tip <p>You can use suggestions to list available paths. To do this, simply press Tab to proceed. For more details, please visit our Path Autocompletion and Filtering Guide.</p> Example <p> ./samples/ .zip .rar .7z .tar.gz <pre><code>.\n\u251c\u2500 samples/\n\u2502  \u251c\u2500 ProductCategorySeedDataResource.yaml\n\u2502  \u251c\u2500 ProductBrandSeedDataResource.yaml\n\u2514\u2500\u2500\u2514\u2500 ProductSeedDataResource.yaml\n</code></pre></p> ProductCategorySeedDataResource.yamlProductBrandSeedDataResource.yamlProductSeedDataResource.yaml <pre><code>type: Resource\nkind: Data\nname: ProductCategory_SeedData\nmetadata:\nspecifications:\n  name: ProductCategory\n  set: EShopping\n  data:\n    - id: 0e56e7b1-1635-5733-a6c0-9b9328db5e3a\n      name: Shoes\n    - id: 84309aec-6025-5ab7-9e40-d19eb6d4c217\n      name: Smart Phone\n    - id: 671fd8be-295d-5484-8a2a-9661b2f940fb\n      name: Electronic\n</code></pre> <pre><code>type: Resource\nkind: Data\nname: ProductBrand_SeedData\nmetadata:\nspecifications:\n  name: ProductBrand\n  set: EShopping\n  data:\n    - id: 9ae4671e-8d35-522e-8315-dd562f19f102\n      name: Nike\n    - id: 00470e36-9c22-58e5-8436-93391a6f4baa\n      name: Apple\n    - id: 3f137853-eb58-52b3-a0f0-be81dbf690ef\n      name: Samsung\n    - id: 05a1fa28-d547-57fd-a66d-e9a3a31ca736\n      name: Adidas\n    - id: 153c2af3-3943-5f1b-aa67-d31c72f476e2\n      name: Sony\n</code></pre> <pre><code>type: Resource\nkind: Data\nname: Product_SeedData\nmetadata:\nspecifications:\n  name: Product\n  set: EShopping\n  data:\n    - id: 10b84b2b-7cc0-56c8-8cd2-708aa443d7a1\n      name: Nike Shoes\n      price: 3375\n      imageFile: images/products/nike-shoes.jpg\n      summary: \"Nike Shoes summ..\"\n      types:\n        id: 0e56e7b1-1635-5733-a6c0-9b9328db5e3a\n        name: Shoes\n      brands:\n        id: 9ae4671e-8d35-522e-8315-dd562f19f102\n        name: Nike\n      description: |\n        Nike, Inc. is an American multinational corporation that designs, develops, manufactures, and markets footwear, apparel, equipment, accessories, and services.\n\n    - id: 912d8b4b-8292-5d59-be48-ca198607637f\n      name: iPhone 15\n      price: 3375\n      imageFile: images/products/nike-shoes.jpg\n      summary: \"IPhone summ..\"\n      types:\n        id: 84309aec-6025-5ab7-9e40-d19eb6d4c217\n        name: Smart Phone\n      brands:\n        id: 00470e36-9c22-58e5-8436-93391a6f4baa\n        name: Apple\n      description: |\n        Apple Decription\n</code></pre> <p>Specify Current Directory</p> <p><pre><code>pars resource remove --file .\n</code></pre> <pre>\nResource (ProductCategory_SeedData) deleted permanently\nResource (ProductBrand_SeedData) deleted permanently\nResource (Product_SeedData) deleted permanently\n</pre> </p> <p>Specify a Relative Directory</p> <p><pre><code>pars resource remove --file ./samples/\n</code></pre> <pre>\nResource (ProductCategory_SeedData) deleted permanently\nResource (ProductBrand_SeedData) deleted permanently\nResource (Product_SeedData) deleted permanently\n</pre> </p> <p>Specify a Relative File</p> <p><pre><code>pars resource remove --file ./samples/ProductCategorySeedDataResource.yaml\n</code></pre> <pre>\nResource (ProductCategory_SeedData) deleted permanently\n</pre> </p> <p>Specify an Absolute Directory</p> <p><pre><code>pars resource remove --file C:/samples/\n</code></pre> <pre>\nResource (ProductCategory_SeedData) deleted permanently\nResource (ProductBrand_SeedData) deleted permanently\nResource (Product_SeedData) deleted permanently\n</pre> </p> <p>Specify an Absolute File</p> <p><pre><code>pars resource remove --file C:/samples/ProductCategorySeedDataResource.yaml\n</code></pre> <pre>\nResource (ProductCategory_SeedData) deleted permanently\n</pre> </p> <p>Specify Multiple Files or Directories</p> <p><pre><code>pars resource remove --file ./samples/ProductCategorySeedDataResource.yaml --file ./samples/ProductBrandSeedDataResource.yaml\n</code></pre> <pre>\nResource (ProductCategory_SeedData) deleted permanently\nResource (ProductBrand_SeedData) deleted permanently\n</pre> </p> <p> </p>","tags":["resource","remove"]},{"location":"guides/commands/resource/submit.html","title":"Resource Submit","text":"<p>Command: <code>resource submit</code></p> <p>Shorthands: <code>r s</code></p> <p>The <code>resource submit</code> command is used to create a new Resource structure(s). The resource can be created by providing  <code>--file</code> flag to specify the path to a configuration file.</p>","tags":["resource","submit"]},{"location":"guides/commands/resource/submit.html#usage","title":"Usage","text":"<pre><code>pars resource submit [flags]\n</code></pre>","tags":["resource","submit"]},{"location":"guides/commands/resource/submit.html#arguments","title":"Arguments","text":"","tags":["resource","submit"]},{"location":"guides/commands/resource/submit.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--file</code>, <code>-f</code> <code>file</code> true <code>\"\"</code> Create resource(s) from manifest file","tags":["resource","submit"]},{"location":"guides/commands/resource/submit.html#-file","title":"<code>--file</code>","text":"<ul> <li>Aliases <code>-f</code></li> <li>Datatype: <code>file</code></li> <li>Type: <code>text</code></li> <li>Schema: ObjectResourceObjectModel, DataResourceObjectModel</li> <li>Multiplicity: Optional</li> <li>Description: New resource manifest file location</li> <li>Valid Values: <code>current_folder</code>, <code>absoulute_path_to_folder</code>, <code>absoulute_path_to_file</code>, <code>relative_path_to_folder</code>, <code>relative_path_to_file</code></li> </ul> <p>Usage</p> <p>The <code>--file</code> flag is used to specify the path to directories or files. It supports various forms of paths including current directory (.), relative paths, absolute paths, and specific files. This flag can be used one or more times within a command.</p> <p>Notes</p> <ul> <li>The <code>--file</code> flag can be repeated multiple times to specify multiple paths.</li> <li>Ensure that the paths provided with the <code>--file</code> flag are accessible and the configuration file is valid to avoid errors during command execution.</li> <li>The <code>--file</code> flag can be used to automate the creation of resources with predefined configurations.</li> </ul> <p>Supported Path Formats</p> <ul> <li> <p>Current Directory (<code>.</code>): Specifies the current working directory from which the command is being executed. This is useful for operations that need to be performed in the current directory without specifying the full path.</p> </li> <li> <p>Relative Directory or File: Specifies a path relative to the current working directory. This allows for flexibility in specifying paths without needing the full directory structure.</p> </li> <li> <p>Absolute Directory or File: Specifies the full path to a directory or file, starting from the root of the filesystem. This is useful when the exact location of the file or directory is known.</p> </li> </ul> Tip <p>You can use suggestions to list available paths. To do this, simply press Tab to proceed. For more details, please visit our Path Autocompletion and Filtering Guide.</p> Example <p> ./samples/ .zip .rar .7z .tar.gz <pre><code>.\n\u251c\u2500 samples/\n\u2502  \u251c\u2500 ProductCategorySeedDataResource.yaml\n\u2502  \u251c\u2500 ProductBrandSeedDataResource.yaml\n\u2514\u2500\u2500\u2514\u2500 ProductSeedDataResource.yaml\n</code></pre></p> ProductCategorySeedDataResource.yamlProductBrandSeedDataResource.yamlProductSeedDataResource.yaml <pre><code>type: Resource\nkind: Data\nname: ProductCategory_SeedData\nmetadata:\nspecifications:\n  name: ProductCategory\n  set: EShopping\n  data:\n    - id: 0e56e7b1-1635-5733-a6c0-9b9328db5e3a\n      name: Shoes\n    - id: 84309aec-6025-5ab7-9e40-d19eb6d4c217\n      name: Smart Phone\n    - id: 671fd8be-295d-5484-8a2a-9661b2f940fb\n      name: Electronic\n</code></pre> <pre><code>type: Resource\nkind: Data\nname: ProductBrand_SeedData\nmetadata:\nspecifications:\n  name: ProductBrand\n  set: EShopping\n  data:\n    - id: 9ae4671e-8d35-522e-8315-dd562f19f102\n      name: Nike\n    - id: 00470e36-9c22-58e5-8436-93391a6f4baa\n      name: Apple\n    - id: 3f137853-eb58-52b3-a0f0-be81dbf690ef\n      name: Samsung\n    - id: 05a1fa28-d547-57fd-a66d-e9a3a31ca736\n      name: Adidas\n    - id: 153c2af3-3943-5f1b-aa67-d31c72f476e2\n      name: Sony\n</code></pre> <pre><code>type: Resource\nkind: Data\nname: Product_SeedData\nmetadata:\nspecifications:\n  name: Product\n  set: EShopping\n  data:\n    - id: 10b84b2b-7cc0-56c8-8cd2-708aa443d7a1\n      name: Nike Shoes\n      price: 3375\n      imageFile: images/products/nike-shoes.jpg\n      summary: \"Nike Shoes summ..\"\n      types:\n        id: 0e56e7b1-1635-5733-a6c0-9b9328db5e3a\n        name: Shoes\n      brands:\n        id: 9ae4671e-8d35-522e-8315-dd562f19f102\n        name: Nike\n      description: |\n        Nike, Inc. is an American multinational corporation that designs, develops, manufactures, and markets footwear, apparel, equipment, accessories, and services.\n\n    - id: 912d8b4b-8292-5d59-be48-ca198607637f\n      name: iPhone 15\n      price: 3375\n      imageFile: images/products/nike-shoes.jpg\n      summary: \"IPhone summ..\"\n      types:\n        id: 84309aec-6025-5ab7-9e40-d19eb6d4c217\n        name: Smart Phone\n      brands:\n        id: 00470e36-9c22-58e5-8436-93391a6f4baa\n        name: Apple\n      description: |\n        Apple Decription\n</code></pre> <p>Specify Current Directory</p> <p><pre><code>pars resource submit --file .\n</code></pre> <pre>\nProductCategory_SeedData Resource created\nProductBrand_SeedData Resource created\nProduct_SeedData Resource created\n</pre> </p> <p>Specify a Relative Directory</p> <p><pre><code>pars resource submit --file ./samples/\n</code></pre> <pre>\nProductCategory_SeedData Resource created\nProductBrand_SeedData Resource created\nProduct_SeedData Resource created\n</pre> </p> <p>Specify a Relative File</p> <p><pre><code>pars resource submit --file ./samples/ProductCategorySeedDataResource.yaml\n</code></pre> <pre>\nProductCategory_SeedData Resource created\n</pre> </p> <p>Specify an Absolute Directory</p> <p><pre><code>pars resource submit --file C:/samples/\n</code></pre> <pre>\nProductCategory_SeedData Resource created\nProductBrand_SeedData Resource created\nProduct_SeedData Resource created\n</pre> </p> <p>Specify an Absolute File</p> <p><pre><code>pars resource submit --file C:/samples/ProductCategorySeedDataResource.yaml\n</code></pre> <pre>\nProductCategory_SeedData Resource created\n</pre> </p> <p>Specify Multiple Files or Directories</p> <p><pre><code>pars resource submit --file ./samples/ProductCategorySeedDataResource.yaml --file ./samples/ProductBrandSeedDataResource.yaml\n</code></pre> <pre>\nProductCategory_SeedData Resource created\nProductBrand_SeedData Resource created\n</pre> </p> <p> </p>","tags":["resource","submit"]},{"location":"guides/commands/task/index.html","title":"Task","text":""},{"location":"guides/commands/template/index.html","title":"Template","text":"<p>Command: <code>template</code></p> <p>Shorthands: <code>t</code></p> <p>The <code>template</code> command is a parent command that provides various operations for managing Template(s). This command supports subcommands like <code>list</code>, <code>submit</code>, and <code>remove</code> to handle different template-related tasks.</p>","tags":["template"]},{"location":"guides/commands/template/index.html#usage","title":"Usage","text":"<p><pre><code>pars template [flags]\n</code></pre> <pre><code>pars template [command]\n</code></pre></p>","tags":["template"]},{"location":"guides/commands/template/index.html#commands","title":"Commands","text":"Name Description <code>submit</code> Creates new template <code>list</code> List all existing templates <code>remove</code> Removes one or more specified templates Tip <p>You can use suggestions to list available sub commands. To do this, simply press Tab to proceed. For more details, please visit our Command Autocompletion and Filtering Guide.</p>","tags":["template"]},{"location":"guides/commands/template/index.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> <p> </p>","tags":["template"]},{"location":"guides/commands/template/list.html","title":"Template List","text":"<p>Command: <code>template list</code></p> <p>Shorthands: <code>t l</code></p> <p>The <code>template list</code> command is used to display a list of existing Template structures. This command helps you view all the templates that have been created, along with their details.</p>","tags":["template","list"]},{"location":"guides/commands/template/list.html#usage","title":"Usage","text":"<pre><code>pars template list [flags]\n</code></pre> Example <p>Classic usage <pre><code>pars template list\n</code></pre> <pre>\n(2) template available\n*** Global Templates ***\n<p>(0) shared template available</p>\n<p>--------------------------</p>\n<p>(0) code template available</p>\n<p>--------------------------</p>\n<p>(0) file template available</p>\n<p>*** Workspace Specific Templates ***</p>\n<p>(0) shared template available</p>\n<p>--------------------------</p>\n<p>(0) code template available</p>\n<p>--------------------------</p>\n<p>(2) file template available</p>\n<ul>\n<li>SeedFileJson_Template (EShopping)</li>\n<li>SeedFileYaml_Template (EShopping)\n\n</li>\n</ul>","tags":["template","list"]},{"location":"guides/commands/template/list.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p>\n\n\n\n<p>\n</p>","tags":["template","list"]},{"location":"guides/commands/template/remove.html","title":"Template Remove","text":"<p>Command: <code>template remove</code></p> <p>Shorthands: <code>t r</code></p> <p>The <code>template remove</code> command is used to delete one or more specified Template structures. Templates can be removed by providing one or more <code>name</code> arguments or using the <code>--file</code> flag to specify a configuration file with the template names to delete. </p>","tags":["template","remove"]},{"location":"guides/commands/template/remove.html#usage","title":"Usage","text":"<pre><code>pars template remove name [name] [flags]\n</code></pre> <pre><code>pars template remove [flags]\n</code></pre>","tags":["template","remove"]},{"location":"guides/commands/template/remove.html#arguments","title":"Arguments","text":"Name Datatype Required Default Description <code>name</code> <code>[]template</code> true <code>\"\"</code> Template name","tags":["template","remove"]},{"location":"guides/commands/template/remove.html#name","title":"<code>name</code>","text":"<ul> <li>Datatype: <code>[]template</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Multiple</li> <li>Default: <code>none</code></li> <li>Validation Rules: Existing Template names</li> <li>Args Index: all</li> <li>Description: Names of the templates you want to remove. If provided, the <code>--file</code> flag will be ignored.</li> </ul> Tip <p>You can use suggestions to list available templates. To do this, simply press Tab to proceed. For more details, please visit our Template Autocompletion and Filtering Guide.</p> <p>Usage</p> <p>The name argument is used to specify one or more template names that you want to remove. This is useful for quickly deleting a few templates without needing a configuration file.</p> <p>Notes</p> <ul> <li>Multiple template names can be provided as space-separated values.</li> <li>If the name argument is provided, the <code>--file</code> flag will be ignored even if it is specified.</li> <li>Ensure the template names provided are valid and exist to avoid errors during command execution.</li> </ul> Example <p>Removing single template <pre><code>pars template remove SeedFileTxt_Template\n</code></pre>  Template (SeedFileTxt_Template) deleted permanently </p> <p>Removing multiple template <pre><code>pars template remove SeedFileTxt_Template SeedFileYaml_Template\n</code></pre> <pre>\nTemplate (SeedFileTxt_Template) deleted permanently\nTemplate (SeedFileYaml_Template) deleted permanently\n</pre> </p>","tags":["template","remove"]},{"location":"guides/commands/template/remove.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--file</code>, <code>-f</code> <code>file</code> true <code>\"\"</code> Remove template(s) from manifest file","tags":["template","remove"]},{"location":"guides/commands/template/remove.html#-file","title":"<code>--file</code>","text":"<ul> <li>Aliases <code>-f</code></li> <li>Datatype: <code>file</code></li> <li>Type: <code>text</code></li> <li>Schema: SharedTemplateObjectModel, CodeTemplateObjectModel, FileTemplateObjectModel</li> <li>Multiplicity: Optional</li> <li>Description: Specify the path to a file containing template names to remove. This will be ignored if any name arguments are provided.</li> <li>Valid Values: <code>current_folder</code>, <code>absoulute_path_to_folder</code>, <code>absoulute_path_to_file</code>, <code>relative_path_to_folder</code>, <code>relative_path_to_file</code></li> </ul> <p> If the <code>name</code> argument is provided, the command will ignore the <code>--file</code> flag.</p> <p>Usage</p> <ul> <li>The <code>--file</code> flag is used to specify a configuration file containing the names of the templates to be removed. The file should contain a list of template names. This flag is useful for batch deletion of templates.</li> </ul> <p>Notes</p> <ul> <li>Ensure that the file path provided with the <code>--file</code> flag is accessible and contains valid template names to avoid errors during command execution.</li> </ul> <p>Supported Path Formats</p> <ul> <li> <p>Current Directory (<code>.</code>): Specifies the current working directory from which the command is being executed. This is useful for operations that need to be performed in the current directory without specifying the full path.</p> </li> <li> <p>Relative Directory or File: Specifies a path relative to the current working directory. This allows for flexibility in specifying paths without needing the full directory structure.</p> </li> <li> <p>Absolute Directory or File: Specifies the full path to a directory or file, starting from the root of the filesystem. This is useful when the exact location of the file or directory is known.</p> </li> </ul> Tip <p>You can use suggestions to list available paths. To do this, simply press Tab to proceed. For more details, please visit our Path Autocompletion and Filtering Guide.</p> Example <p> ./samples/ .zip .rar .7z .tar.gz <pre><code>.\n\u251c\u2500 samples/\n\u2502  \u251c\u2500 SeedFileYamlTemplate.yaml\n\u2502  \u251c\u2500 SeedFileJsonTemplate.yaml\n\u2514\u2500\u2500\u2514\u2500 SeedFileTxtTemplate.yaml\n</code></pre></p> SeedFileYamlTemplate.yamlSeedFileJsonTemplate.yamlSeedFileTxtTemplate.yaml <pre><code>type: Template\nkind: File\nname: SeedFileYaml_Template\nmetadata:\n  tags:\nspecifications:\n  name: SeedFile_Yaml\n  output: \"{{.Resource.Name}}.yaml\"\n  set: EShopping\n  layers:\n  template:\n    content: |\n      {{ .Resource.Data }}\n</code></pre> <pre><code>type: Template\nkind: File\nname: SeedFileJson_Template\nmetadata:\n  tags:\nspecifications:\n  name: SeedFile_Json\n  output: \"{{.Resource.Name}}.json\"\n  set: EShopping\n  layers:\n  template:\n    content: |\n      {{ prettifyjson (tojson .Resource.Data) }}\n</code></pre> <pre><code>type: Template\nkind: File\nname: SeedFileTxt_Template\nmetadata:\n  tags:\nspecifications:\n  name: SeedFile_Txt\n  output: \"{{.Resource.Name}}.txt\"\n  set: EShopping\n  layers:\n  template:\n    content: |\n      {{ .Resource.Data }}\n</code></pre> <p>Specify Current Directory</p> <p><pre><code>pars template remove --file .\n</code></pre> <pre>\nTemplate (SeedFileTxt_Template) deleted permanently\nTemplate (SeedFileYaml_Template) deleted permanently\nTemplate (OrionTech) deleted permanently\n</pre> </p> <p>Specify a Relative Directory</p> <p><pre><code>pars template remove --file ./samples/\n</code></pre> <pre>\nTemplate (SeedFileTxt_Template) deleted permanently\nTemplate (SeedFileYaml_Template) deleted permanently\nTemplate (OrionTech) deleted permanently\n</pre> </p> <p>Specify a Relative File</p> <p><pre><code>pars template remove --file ./samples/SeedFileYamlTemplate.yaml\n</code></pre> <pre>\nTemplate (SeedFileTxt_Template) deleted permanently\n</pre> </p> <p>Specify an Absolute Directory</p> <p><pre><code>pars template remove --file C:/samples/\n</code></pre> <pre>\nTemplate (SeedFileTxt_Template) deleted permanently\nTemplate (SeedFileYaml_Template) deleted permanently\nTemplate (OrionTech) deleted permanently\n</pre> </p> <p>Specify an Absolute File</p> <p><pre><code>pars template remove --file C:/samples/SeedFileYamlTemplate.yaml\n</code></pre> <pre>\nTemplate (SeedFileTxt_Template) deleted permanently\n</pre> </p> <p>Specify Multiple Files or Directories</p> <p><pre><code>pars template remove --file ./samples/SeedFileYamlTemplate.yaml --file ./samples/SeedFileJsonTemplate.yaml\n</code></pre> <pre>\nTemplate (SeedFileTxt_Template) deleted permanently\nTemplate (SeedFileYaml_Template) deleted permanently\n</pre> </p> <p> </p>","tags":["template","remove"]},{"location":"guides/commands/template/submit.html","title":"Template Submit","text":"<p>Command: <code>template submit</code></p> <p>Shorthands: <code>t s</code></p> <p>The <code>template submit</code> command is used to create a new Template structure(s). The template can be created by providing a <code>name</code> argument or using the <code>--file</code> flag to specify the path to a configuration file.</p>","tags":["template","submit"]},{"location":"guides/commands/template/submit.html#usage","title":"Usage","text":"<pre><code>pars template submit [flags]\n</code></pre>","tags":["template","submit"]},{"location":"guides/commands/template/submit.html#arguments","title":"Arguments","text":"","tags":["template","submit"]},{"location":"guides/commands/template/submit.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--file</code>, <code>-f</code> <code>file</code> true <code>\"\"</code> Create template(s) from manifest file","tags":["template","submit"]},{"location":"guides/commands/template/submit.html#-file","title":"<code>--file</code>","text":"<ul> <li>Aliases <code>-f</code></li> <li>Datatype: <code>file</code></li> <li>Type: <code>text</code></li> <li>Schema: SharedTemplateObjectModel, CodeTemplateObjectModel, FileTemplateObjectModel</li> <li>Multiplicity: Optional</li> <li>Description: New template manifest file location</li> <li>Valid Values: <code>current_folder</code>, <code>absoulute_path_to_folder</code>, <code>absoulute_path_to_file</code>, <code>relative_path_to_folder</code>, <code>relative_path_to_file</code></li> </ul> <p> When both <code>name</code> argument and <code>--file</code> flag are provided, the command will prioritize the <code>name</code> argument for template creation.</p> <p>Usage</p> <p>The <code>--file</code> flag is used to specify the path to directories or files. It supports various forms of paths including current directory (.), relative paths, absolute paths, and specific files. This flag can be used one or more times within a command.</p> <p>Notes</p> <ul> <li>The <code>--file</code> flag can be repeated multiple times to specify multiple paths.</li> <li>Ensure that the paths provided with the <code>--file</code> flag are accessible and the configuration file is valid to avoid errors during command execution.</li> <li>The <code>--file</code> flag can be used to automate the creation of templates with predefined configurations.</li> </ul> <p>Supported Path Formats</p> <ul> <li> <p>Current Directory (<code>.</code>): Specifies the current working directory from which the command is being executed. This is useful for operations that need to be performed in the current directory without specifying the full path.</p> </li> <li> <p>Relative Directory or File: Specifies a path relative to the current working directory. This allows for flexibility in specifying paths without needing the full directory structure.</p> </li> <li> <p>Absolute Directory or File: Specifies the full path to a directory or file, starting from the root of the filesystem. This is useful when the exact location of the file or directory is known.</p> </li> </ul> Tip <p>You can use suggestions to list available paths. To do this, simply press Tab to proceed. For more details, please visit our Path Autocompletion and Filtering Guide.</p> Example <p> ./samples/ .zip .rar .7z .tar.gz <pre><code>.\n\u251c\u2500 samples/\n\u2502  \u251c\u2500 SeedFileYamlTemplate.yaml\n\u2502  \u251c\u2500 SeedFileJsonTemplate.yaml\n\u2514\u2500\u2500\u2514\u2500 SeedFileTxtTemplate.yaml\n</code></pre></p> SeedFileYamlTemplate.yamlSeedFileJsonTemplate.yamlSeedFileTxtTemplate.yaml <pre><code>type: Template\nkind: File\nname: SeedFileYaml_Template\nmetadata:\n  tags:\nspecifications:\n  name: SeedFile_Yaml\n  output: \"{{.Resource.Name}}.yaml\"\n  set: EShopping\n  layers:\n  template:\n    content: |\n      {{ .Resource.Data }}\n</code></pre> <pre><code>type: Template\nkind: File\nname: SeedFileJson_Template\nmetadata:\n  tags:\nspecifications:\n  name: SeedFile_Json\n  output: \"{{.Resource.Name}}.json\"\n  set: EShopping\n  layers:\n  template:\n    content: |\n      {{ prettifyjson (tojson .Resource.Data) }}\n</code></pre> <pre><code>type: Template\nkind: File\nname: SeedFileTxt_Template\nmetadata:\n  tags:\nspecifications:\n  name: SeedFile_Txt\n  output: \"{{.Resource.Name}}.txt\"\n  set: EShopping\n  layers:\n  template:\n    content: |\n      {{ .Resource.Data }}\n</code></pre> <p>Specify Current Directory</p> <p><pre><code>pars template submit --file .\n</code></pre> <pre>\nSeedFileYaml_Template Template created\nSeedFileJson_Template Template created\nSeedFileTxt_Template Template created\n</pre> </p> <p>Specify a Relative Directory</p> <p><pre><code>pars template submit --file ./samples/\n</code></pre> <pre>\nSeedFileYaml_Template Template created\nSeedFileJson_Template Template created\nSeedFileTxt_Template Template created\n</pre> </p> <p>Specify a Relative File</p> <p><pre><code>pars template submit --file ./samples/SeedFileYamlTemplate.yaml\n</code></pre> <pre>\nSeedFileYaml_Template Template created\n</pre> </p> <p>Specify an Absolute Directory</p> <p><pre><code>pars template submit --file C:/samples/\n</code></pre> <pre>\nSeedFileYaml_Template Template created\nSeedFileJson_Template Template created\nSeedFileTxt_Template Template created\n</pre> </p> <p>Specify an Absolute File</p> <p><pre><code>pars template submit --file C:/samples/SeedFileYamlTemplate.yaml\n</code></pre> <pre>\nSeedFileYaml_Template Template created\n</pre> </p> <p>Specify Multiple Files or Directories</p> <p><pre><code>pars template submit --file ./samples/SeedFileYamlTemplate.yaml --file ./samples/SeedFileJsonTemplate.yaml\n</code></pre> <pre>\nSeedFileYaml_Template Template created\nSeedFileJson_Template Template created\n</pre> </p> <p> </p>","tags":["template","submit"]},{"location":"guides/commands/workspace/index.html","title":"Workspace","text":"<p>Command: <code>workspace</code></p> <p>Shorthands: <code>w</code></p> <p>The <code>workspace</code> command is a parent command that provides various operations for managing Workspace(s). This command supports subcommands like <code>list</code>, <code>describe</code>, and <code>remove</code> to handle different workspace-related tasks. Additionally, it includes the <code>--switch</code> flag to set the <code>selected workspace</code> among existing workspaces.</p> <p>A workspace in <code>pars</code> is a structure that organizes projects, tasks, and workflows, providing physical isolation. Multiple workspaces can be defined, and references to these workspaces can be made where needed. For example, when adding a project, you can specify the workspace with the <code>--workspace</code> flag or argument: <code>pars project new test-project-name --workspace my-workspace</code>.</p> <p><code>pars</code> provides support for autocompletion, filtering, and suggestions using the tab key, making it easier to work with workspaces.</p>","tags":["workspace"]},{"location":"guides/commands/workspace/index.html#usage","title":"Usage","text":"<p><pre><code>pars workspace [flags]\n</code></pre> <pre><code>pars workspace [command]\n</code></pre></p>","tags":["workspace"]},{"location":"guides/commands/workspace/index.html#commands","title":"Commands","text":"Name Description <code>list</code> List Workspaces in 6251a85a-47d0-11ee-be56-0242ac120002:pars:Environment:&lt;__None__&gt;:28cec485dd09b0f17ac12365b271ec9c <code>describe</code> Describe Workspace details <code>remove</code> Remove Workspace Tip <p>You can use suggestions to list available sub commands. To do this, simply press Tab to proceed. For more details, please visit our Command Autocompletion and Filtering Guide.</p>","tags":["workspace"]},{"location":"guides/commands/workspace/index.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> Name Datatype Required Default Description <code>--switch</code>, <code>-s</code> <code>string</code> true <code>workspace_name</code> Switch current workspace","tags":["workspace"]},{"location":"guides/commands/workspace/index.html#-switch","title":"<code>--switch</code>","text":"<ul> <li>Aliases <code>-s</code></li> <li>Datatype: <code>string</code></li> <li>Type: <code>workspace</code></li> <li>Multiplicity: Optional</li> <li>Description: Specifies the name of the workspace to set as selected.</li> </ul> <p>Usage</p> <ul> <li>The <code>--switch</code> flag is used to set an existing workspace as the <code>selected workspace</code>. This flag allows you to quickly change the selected workspace without needing to perform multiple steps.</li> </ul> Tip <p>You can use suggestions to list available workspaces. To do this, simply press Tab to proceed. For more details, please visit our Workspace Autocompletion and Filtering Guide.</p> <p>Notes</p> <ul> <li>Ensure the workspace name provided with the <code>--switch</code> flag exists to avoid errors during command execution.</li> </ul> Example <p><pre><code>pars workspace --switch OmicronConsulting\n</code></pre>  Swithched to: OmicronConsulting </p> <p> </p>","tags":["workspace"]},{"location":"guides/commands/workspace/describe.html","title":"Workspace Describe","text":"<p>Command: <code>workspace describe</code></p> <p>Shorthands: <code>w d</code></p> <p>The <code>workspace describe</code> command is used to display detailed information about a specified Workspace. This includes information such as the workspace's path, associated projects, and their structure. The command supports additional flags to customize the output.</p>","tags":["workspace","describe"]},{"location":"guides/commands/workspace/describe.html#usage","title":"Usage","text":"<pre><code>pars workspace describe [name] [flags]\n</code></pre> Example <p><pre><code>pars workspace describe OmicronConsulting\n</code></pre> <pre>\nWorkspace (OmicronConsulting) has 2 project\nPath : C:\\current_directory\\OmicronConsulting\n<p>Projects:\nApexSolutions\n- UserAuthService ()\n- PaymentGatewayService ()  \n\n</p>","tags":["workspace","describe"]},{"location":"guides/commands/workspace/describe.html#arguments","title":"Arguments","text":"Name\nDatatype\nRequired\nDefault\nDescription\n\n\n\n\n<code>name</code>\n<code>workspace</code>\nfalse\n<code>current_workspace</code>\nThe name of the workspace you want to describe","tags":["workspace","describe"]},{"location":"guides/commands/workspace/describe.html#name","title":"<code>name</code>","text":"<ul>\n<li>Datatype: <code>workspace</code></li>\n<li>Type: <code>text</code></li>\n<li>Multiplicity: Optional</li>\n<li>Default: <code>current_workspace</code></li>\n<li>Validation Rules: Existing workspace names</li>\n<li>Args Index: <code>0</code></li>\n<li>Description: Workspace name</li>\n</ul>\n\n<p> If you don't specify workspace name, by default <code>pars</code> get current workspace details</p>\n\n<p>Usage</p>\n<p>The <code>name</code> argument is used to specify the workspace name that you want to describe. This is required for the command to execute.</p>\n<p>Notes</p>\n<ul>\n<li>Ensure the workspace name provided is valid and exists to avoid errors during command execution.</li>\n</ul>\n\nTip\n<p>You can use suggestions to list available workspaces. To do this, simply press Tab to proceed. For more details, please visit our Workspace Autocompletion and Filtering Guide.</p>\n\n\nExample\n<p>Current workspace : \n    Get details for current workspace</p>\n<p><pre><code>pars workspace describe\n</code></pre>\n\n<pre>\nWorkspace (OmicronConsulting) has 2 project\nPath : C:\\current_directory\\OmicronConsulting\n<p>Projects:\nApexSolutions\n- UserAuthService ()\n- PaymentGatewayService ()\n\n</p>\n<p>Specific workspace : \n    Get details for custom workspace</p>\n<p><pre><code>pars workspace describe EpsilonEnterprises\n</code></pre>\n\n<pre>\nWorkspace (EpsilonEnterprises) has 0 project\nPath : C:\\current_directory\\EpsilonEnterprises\n<p>Projects:\nApexSolutions\n- UserAuthService ()\n- PaymentGatewayService ()\n\n</p>","tags":["workspace","describe"]},{"location":"guides/commands/workspace/describe.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p>\n\n\n\n\nName\nDatatype\nRequired\nDefault\nDescription\n\n\n\n\n<code>--path</code>, <code>-p</code>\n<code>boolean</code>\nfalse\n<code>false</code>\nShow only the path of the workspace\n\n\n<code>--view</code>, <code>-v</code>\n<code>WorkspaceViewTypesEnum</code>\nfalse\n<code>Hierarchical</code>\nSpecify the view format (e.g., hierarchical, flat)","tags":["workspace","describe"]},{"location":"guides/commands/workspace/describe.html#-path","title":"<code>--path</code>","text":"<ul>\n<li>Aliases <code>-p</code></li>\n<li>Datatype: <code>boolean</code></li>\n<li>Type: <code>boolean</code></li>\n<li>Multiplicity: Optional</li>\n<li>Default: <code>false</code></li>\n<li>Description: Show only the path of the workspace.</li>\n</ul>\n\nUse Cases\n<ul>\n<li>Change working directory</li>\n</ul>\nPowershellBash\n\n\n<p><pre><code>cd (pars workspace describe --path)\n</code></pre>\n\n</p>\n\n\n<p><pre><code>pars workspace describe --path | cd\n</code></pre>\n\n</p>\n\n\n\n<ul>\n<li>Open working directory in VS Code</li>\n</ul>\nPowershellBash\n\n\n<p><pre><code>code (pars workspace describe --path)\n</code></pre>\n\n</p>\n\n\n<p><pre><code>pars workspace describe --path | code\n</code></pre>\n\n</p>\n\n\n\n\n<p>Usage</p>\n<p>The <code>--path</code> flag is used to display only the path of the specified workspace. No additional information will be shown.</p>\n<p>Notes</p>\n<ul>\n<li>This flag does not require a value; simply setting the flag will trigger this behavior.</li>\n</ul>\n\nExample\n<p><pre><code>pars workspace OmicronConsulting --path\n</code></pre>\n\nC:\\foo\\current_directory\\OmicronConsulting\n</p>\n\n\n<p> <code>path</code> flag should be used alone, if you set this flag, you will get only path</p>\n<p><pre><code>pars workspace describe --path --view flat\n</code></pre>\n\nC:\\foo\\current_directory\\OmicronConsulting\n</p>","tags":["workspace","describe"]},{"location":"guides/commands/workspace/describe.html#-view","title":"<code>--view</code>","text":"<ul>\n<li>Datatype: <code>WorkspaceViewTypesEnum</code></li>\n<li>Type: <code>enum</code></li>\n<li>Multiplicity: Optional</li>\n<li>Default: <code>Hierarchical</code></li>\n<li>Valid Values: <code>Hierarchical</code>, <code>Flat</code></li>\n<li>Description: Specify the view format for the projects within the workspace</li>\n</ul>\n\nTip\n<p>You can use suggestions to list available view types. To do this, simply press Tab to proceed. For more details, please visit our Enumeration Autocompletion and Filtering Guide.</p>\n\n<p>Usage</p>\n<p>The <code>--view</code> flag is used to specify how the projects within the workspace should be displayed. The default format is flat, but it can be set to hierarchical to show a nested structure.</p>\n<p>Notes</p>\n<ul>\n<li>Ensure the specified format is supported to avoid errors during command execution.</li>\n</ul>\n\nExample\n<p>Hierarchical View : \n    List workspace projects in tree view</p>\n<p><pre><code>pars workspace describe --view Hierarchical\n</code></pre>\n\n<pre>\nWorkspace (OmicronConsulting) has 2 project\nPath : C:\\current_directory\\OmicronConsulting\n<p>Projects:\nApexSolutions\n- UserAuthService ()\n- PaymentGatewayService ()\n\n</p>\n<p>Flat View : \n    List workspace projects in basic list</p>\n<p><pre><code>pars workspace describe --view Flat\n</code></pre>\n\n<pre>\nWorkspace (OmicronConsulting) has 2 project\nPath : C:\\current_directory\\OmicronConsulting\n<p>Projects:\nApexSolutions\n- UserAuthService ()\n- PaymentGatewayService ()\n\n</p>\n\n\n\n<p>\n</p>","tags":["workspace","describe"]},{"location":"guides/commands/workspace/list.html","title":"Workspace List","text":"<p>Command: <code>workspace list</code></p> <p>Shorthands: <code>w l</code>, <code>wl</code></p> <p>The <code>workspace list</code> command is used to display a list of existing Workspace(s). This command helps you view all the workspaces that have been created, along with their status.</p> <p>You can list all Workspaces, see <code>current workspace</code> (<code>selected workspace</code> and <code>active workspace</code>) in the list</p>","tags":["workspace","list"]},{"location":"guides/commands/workspace/list.html#usage","title":"Usage","text":"<pre><code>pars workspace list [flags]\n</code></pre> Example <p>Classic usage <pre><code>pars workspace list\n</code></pre> <pre>\n(3) workspace available\n<p>* OmicronConsulting\nEpsilonEnterprises\nZetaSystems\n\n</p>\n<p>Call on selected workspace folder or childs\n<pre><code>pars workspace list\n</code></pre>\n\n<pre>\n(3) workspace available\n<p>&gt; * OmicronConsulting\nEpsilonEnterprises\nZetaSystems\n\n</p>\n<p>Call on different workspace folder or childs then selected workspace\n<pre><code>pars workspace list\n</code></pre>\n\n<pre>\n(3) workspace available\n<p>&gt; OmicronConsulting\n* EpsilonEnterprises\nZetaSystems\n\n</p>","tags":["workspace","list"]},{"location":"guides/commands/workspace/list.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p>\n\n\n\n<p>\n</p>","tags":["workspace","list"]},{"location":"guides/commands/workspace/remove.html","title":"Workspace Remove","text":"<p>Command: <code>workspace remove</code></p> <p>Shorthands: <code>w r</code></p> <p>The <code>workspace remove</code> command is used to delete one or more specified workspaces. This command helps you manage your workspaces by allowing the removal of unused or obsolete ones. Workspaces can be removed by providing one or more <code>name</code> arguments.</p>","tags":["workspace","remove"]},{"location":"guides/commands/workspace/remove.html#usage","title":"Usage","text":"<pre><code>pars workspace remove name [name] [flags]\n</code></pre> Example <p><pre><code>pars workspace remove OmicronConsulting\n</code></pre>  Workspace (OmicronConsulting) deleted permanently </p>","tags":["workspace","remove"]},{"location":"guides/commands/workspace/remove.html#arguments","title":"Arguments","text":"Name Datatype Required Default Description <code>name</code> <code>[]workspace</code> true <code>\"\"</code> Names of the workspaces to remove","tags":["workspace","remove"]},{"location":"guides/commands/workspace/remove.html#name","title":"<code>name</code>","text":"<ul> <li>Datatype: <code>[]workspace</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Multiple values allowed</li> <li>Default: <code>none</code></li> <li>Validation Rules: Existing workspace names</li> <li>Args Index: all</li> <li>Description: Names of the workspaces you want to remove. You can specify one or more workspace names separated by spaces</li> </ul> <p>Usage</p> <p>The <code>name</code> argument is used to specify one or more workspace names that you want to remove. This is useful for quickly deleting a few workspaces without needing a configuration file.</p> <p>Notes</p> <ul> <li>Multiple workspace names can be provided as space-separated values.</li> <li>Ensure the workspace names provided are valid and exist to avoid errors during command execution.</li> </ul> Tip <p>You can use suggestions to list available workspaces. To do this, simply press Tab to proceed. For more details, please visit our Workspace Autocompletion and Filtering Guide.</p> Example <p>Removing single workspace <pre><code>pars workspace remove OmicronConsulting\n</code></pre>  Workspace (OmicronConsulting) deleted permanently </p> <p>Removing multiple workspace <pre><code>pars workspace remove OmicronConsulting EpsilonEnterprises ZetaSystems\n</code></pre> <pre>\nWorkspace (OmicronConsulting) deleted permanently\nWorkspace (EpsilonEnterprises) deleted permanently\nWorkspace (ZetaSystems) deleted permanently\n</pre> </p>","tags":["workspace","remove"]},{"location":"guides/commands/workspace/remove.html#flags","title":"Flags","text":"<p> See Global flags and Common flags</p> <p> </p>","tags":["workspace","remove"]},{"location":"guides/components/index.html","title":"Components","text":""},{"location":"guides/components/templates/context.html","title":"Context","text":""},{"location":"guides/components/templates/context.html#workspace","title":"Workspace","text":"<p>Description</p> <p>Represents the workspace in which the project and resources are managed. It includes:</p> <ul> <li>Workspace: Model representation of the workspace.</li> <li>Original: Original workspace data.</li> </ul>"},{"location":"guides/components/templates/context.html#project","title":"Project","text":"<p>Description</p> <p>Represents a project that is being managed within the workspace. It includes:</p> <ul> <li>Project: Model representation of the project.</li> <li>Original: Original project data.</li> </ul>"},{"location":"guides/components/templates/context.html#resource","title":"Resource","text":"<p>Description</p> <p>Represents a resource used in the project. It includes:</p> <ul> <li>Resource: Model representation of the resource.</li> <li>Original: Original resource data.</li> </ul>"},{"location":"guides/components/templates/context.html#layer","title":"Layer","text":"<p>Description</p> <p>Represents the layer associated with the resource and template. It includes:</p> <ul> <li>Layer: Model representation of the layer.</li> <li>Original: Original layer data.</li> </ul>"},{"location":"guides/components/templates/context.html#section","title":"Section","text":"<p>Description</p> <p>Represents a specific section within the template. It includes:</p> <ul> <li>Section: Model representation of the section.</li> <li>Original: Original section data.</li> </ul>"},{"location":"guides/components/templates/context.html#template","title":"Template","text":"<p>Description</p> <p>Represents the code template that is used to generate content. It includes:</p> <ul> <li>Template: Model representation of the template.</li> <li>Original: Original template data.</li> </ul> <p>This document includes detailed descriptions of each context component, the structure of the general context, and how it can be used in templates. Feel free to adjust any specific details to better fit your use case.</p> <p> </p>"},{"location":"guides/components/templates/functions.html","title":"Functions","text":""},{"location":"guides/components/templates/functions.html#engine","title":"Engine","text":""},{"location":"guides/components/templates/functions.html#enginerendercontent","title":"engine.RenderContent","text":"<p>Description</p> <p>The <code>RenderContent</code> function takes a template name and data, then renders the content using the TemplateEngine.</p> <p>Signature <pre><code>RenderContent(templateName String, data Object) String\n</code></pre></p> <p>Parameters</p> Name Type Description <code>templateName</code> <code>String</code> The name of the template to render. <code>data</code> <code>Object</code> The data to pass to the template. <p>Return</p> Type Description <code>String</code> The rendered content. Returns an empty string if an error occurs. <p>Example</p> <p><pre><code>{{ $context := GetContextByBase .BaseContext \"Set::exampleSet\" \"Project::exampleProject\" \"Resource::exampleResource\" }}\n{{ $templateName := \"exampleTemplate\" }}\n{{ $renderedContent := RenderContent $templateName $context }}\nResult: {{ $renderedContent }}\n</code></pre> <pre>\nResult: Rendered content of template: exampleTemplate with data: { ...context data... }\n</pre> </p> <p>In this example, the <code>RenderContent</code> method is utilized within the template to render content from a template named <code>exampleTemplate</code> using the context data obtained from <code>GetContextByBase</code>. The output shows the rendered content based on the provided template and data.</p>"},{"location":"guides/components/templates/functions.html#enginegetcontent","title":"engine.GetContent","text":"<p>Description</p> <p>The <code>GetContent</code> method in the engine space retrieves the content of a shared template based on the specified template name. It uses the <code>SharedTemplateService</code> to fetch the template. If an error occurs or the template is not found, it returns an empty String.</p> <p>Signature <pre><code>GetContent(templateName String) string\n</code></pre></p> <p>Parameters</p> Name Type Description <code>templateName</code> <code>String</code> The name of the template to be retrieved. <p>Return</p> Type Description <code>String</code> The content of the specified template. Returns an empty string if any error occurs or the template is not found. <p>Example</p> <p><pre><code>{{ $templateName := \"exampleTemplate\" }}\n{{ $templateContent := GetContent $templateName }}\nContent: {{ $templateContent }}\n</code></pre> <pre>\nContent: The content of the template: exampleTemplate\n</pre> </p> <p>In this example, the <code>GetContent</code> method is utilized within the template to retrieve the content of a template named <code>exampleTemplate</code>. The output shows the content of the specified template.</p>"},{"location":"guides/components/templates/functions.html#enginerendertemplate","title":"engine.RenderTemplate","text":"<p>Description</p> <p>The <code>RenderTemplate</code> method in the engine space renders a template using the specified template name and data. It retrieves the template content using the <code>GetContent</code> method and processes it with the <code>TemplateEngine</code> function. If an error occurs, it returns an empty string.</p> <p>Signature <pre><code>RenderTemplate(templateName string, data any) string\n</code></pre></p> <p>Parameters</p> Name Type Description <code>templateName</code> <code>String</code> The name of the template to be rendered. <code>data</code> <code>Object</code> The data to be used in the template. <p>Return</p> Type Description <code>String</code> The rendered content of the specified template with the provided data. Returns an empty string if any error occurs. <p>Example</p> <p><pre><code>{{ $templateName := \"exampleTemplate\" }}\n{{ $data := .ExampleData }}\n{{ $renderedContent := RenderTemplate $templateName $data }}\nContent: {{ $renderedContent }}\n</code></pre> <pre>\nContent: The rendered content of the template: exampleTemplate with provided data.\n</pre> </p> <p>In this example, the <code>RenderTemplate</code> method is utilized within the template to render the content of a template named <code>exampleTemplate</code> with the provided data. The output shows the rendered content of the specified template.</p>"},{"location":"guides/components/templates/functions.html#context","title":"Context","text":""},{"location":"guides/components/templates/functions.html#contextgetcontextbybase","title":"context.GetContextByBase","text":"<p>Description</p> <p>The <code>GetContextByBase</code> function retrieves a <code>TemplateDataContext</code> based on the provided base context and additional arguments. It resolves and validates various components like set, resource, layer, project, section, and template.</p> <p>Signature <pre><code>GetContextByBase(base Context, args ...String) Context\n</code></pre></p> <p>Parameters</p> Name Type Description <code>base</code> <code>Context</code> The base context containing initial values. <code>args</code> <code>...String</code> A variadic list of arguments to override or specify components in the context. Each argument should be in the format <code>Key::Value</code>. Valid keys include <code>Set</code>, <code>Project</code>, <code>Resource</code>, <code>Template</code>, <code>Layer</code>, and <code>Section</code>. <p>Return</p> Type Description <code>Context</code> The resolved context based on the provided base and additional arguments. Returns an empty <code>Context</code> if any error occurs during the resolution process. <p>Example</p> <p><pre><code>{{ $context := GetContextByBase .BaseContext \"Set::exampleSet\" \"Project::exampleProject\" \"Resource::exampleResource\" }}\nResult: {{ $context }}\n</code></pre> <pre>\nResult: {Resolved context information based on provided arguments}\n</pre> </p> <p>In this example, <code>GetContextByBase</code> returns a <code>Context</code> with the specified set, project, and resource, resolved from the base context.</p>"},{"location":"guides/components/templates/functions.html#contextgetcontextbybaseforarray","title":"context.GetContextByBaseForArray","text":"<p>Description</p> <p>The <code>GetContextByBaseForArray</code> function retrieves a <code>Context</code> based on the provided base context and additional arguments in an array format. It internally calls <code>GetContextByBase</code> to perform the resolution.</p> <p>Signature <pre><code>GetContextByBaseForArray(base Context, args []String) Context\n</code></pre></p> <p>Parameters</p> Name Type Description <code>base</code> <code>Context</code> The base context containing initial values. <code>args</code> <code>[]String</code> An array of arguments to override or specify components in the context. Each argument should be in the format <code>key::value</code>. Valid keys include <code>Set</code>, <code>Project</code>, <code>Resource</code>, <code>Template</code>, <code>Layer</code>, and <code>Section</code>. <p>Return</p> Type Description <code>Context</code> The resolved context based on the provided base and additional arguments. Returns an empty <code>Context</code> if any error occurs during the resolution process. <p>Example</p> <p><pre><code>{{ $context := GetContextByBaseForArray .BaseContext (slice \"Set::exampleSet\" \"Project::exampleProject\" \"Resource::exampleResource\") }}\nResult: {{ $context }}\n</code></pre> <pre>\nResult: {Resolved context information based on provided arguments}\n</pre> </p> <p>In this example, <code>GetContextByBaseForArray</code> returns a <code>CodeTemplateDataContext</code> with the specified set, project, and resource, resolved from the base context.</p>"},{"location":"guides/components/templates/functions.html#logical-operators","title":"Logical Operators","text":""},{"location":"guides/components/templates/functions.html#and","title":"and","text":"<p>Description</p> <p>The <code>and</code> function returns <code>true</code> if all provided boolean arguments are <code>true</code>. If any of the arguments is <code>false</code>, the function returns <code>false</code>.</p> <p>Signature <pre><code>and(args ...Boolean) Boolean\n</code></pre></p> <p>Parameters</p> Name Type Description <code>args</code> <code>...Boolean</code> A variadic list of boolean values to be evaluated. <p>Return</p> Type Description <code>Boolean</code> <code>true</code> if all arguments are <code>true</code>; otherwise, <code>false</code>. <p>Example</p> <p><pre><code>{{ $result := and true true false }}\nResult: {{ $result }}\n</code></pre> <pre>\nResult: false\n</pre> </p> <p>In this example, <code>and</code> returns <code>false</code> because not all arguments are <code>true</code>.</p>"},{"location":"guides/components/templates/functions.html#or","title":"or","text":"<p>Description</p> <p>The <code>or</code> function returns <code>true</code> if at least one of the provided boolean arguments is <code>true</code>. If all arguments are <code>false</code>, the function returns <code>false</code>.</p> <p>Signature <pre><code>or(args ...Boolean) Boolean\n</code></pre></p> <p>Parameters</p> Name Type Description <code>args</code> <code>...Boolean</code> A variadic list of boolean values to be evaluated. <p>Return</p> Type Description <code>Boolean</code> <code>true</code> if at least one argument is <code>true</code>; otherwise, <code>false</code>. <p>Example</p> <p><pre><code>{{ $result := or false true false }}\nResult: {{ $result }}\n</code></pre> <pre>\nResult: true\n</pre> </p> <p>In this example, <code>or</code> returns <code>true</code> because at least one argument is <code>true</code>.</p>"},{"location":"guides/components/templates/functions.html#not","title":"not","text":"<p>Description</p> <p>The <code>not</code> function returns the boolean negation of the provided argument. It returns <code>true</code> if the argument is <code>false</code>, and <code>false</code> if the argument is <code>true</code>.</p> <p>Signature <pre><code>not(arg Boolean) Boolean\n</code></pre></p> <p>Parameters</p> Name Type Description <code>arg</code> <code>Boolean</code> A variadic list of boolean values to be evaluated. <p>Return</p> Type Description <code>Boolean</code> <code>true</code> if at least one argument is <code>true</code>; otherwise, <code>false</code>. <p>Example</p> <p><pre><code>{{ $result := not true }}\nResult: {{ $result }}\n</code></pre> <pre>\nResult: false\n</pre> </p> <p>In this example, <code>not</code> returns <code>false</code> because the argument is <code>true</code>.</p>"},{"location":"guides/components/templates/functions.html#comparison-operators","title":"Comparison Operators","text":""},{"location":"guides/components/templates/functions.html#eq","title":"eq","text":"<p>Description</p> <p>The <code>eq</code> function returns the boolean truth of whether <code>arg1</code> is equal to <code>arg2</code>.</p> <p>Signature <pre><code>eq(arg1 Object, arg2 Object) Boolean\n</code></pre></p> <p>Parameters</p> Name Type Description <code>arg1</code> <code>Object</code> The first number to compare. <code>arg2</code> <code>Object</code> The second number to compare. <p>Return</p> Type Description <code>Boolean</code> <code>true</code> if <code>arg1</code> is equal to <code>arg2</code>; otherwise, <code>false</code>. <p>Example</p> <p><pre><code>{{ $result := eq 5 5 }}\nResult: {{ $result }}\n</code></pre> <pre>\nResult: true\n</pre> </p> <p>In this example, <code>eq</code> returns <code>true</code> because <code>5</code> is equal to <code>5</code>.</p>"},{"location":"guides/components/templates/functions.html#ne","title":"ne","text":"<p>Description</p> <p>The <code>ne</code> function returns the boolean truth of whether <code>arg1</code> is not equal to <code>arg2</code>.</p> <p>Signature <pre><code>ne(arg1 Object, arg2 Object) Boolean\n</code></pre></p> <p>Parameters</p> Name Type Description <code>arg1</code> <code>Object</code> The first number to compare. <code>arg2</code> <code>Object</code> The second number to compare. <p>Return</p> Type Description <code>Boolean</code> <code>true</code> if <code>arg1</code> is not equal to <code>arg2</code>; otherwise, <code>false</code>. <p>Example</p> <p><pre><code>{{ $result := ne 5 3 }}\nResult: {{ $result }}\n</code></pre> <pre>\nResult: true\n</pre> </p> <p>In this example, <code>ne</code> returns <code>true</code> because <code>5</code> is not equal to <code>3</code>.</p>"},{"location":"guides/components/templates/functions.html#lt","title":"lt","text":"<p>Description</p> <p>The <code>lt</code> function returns the boolean truth of whether <code>arg1</code> is less than <code>arg2</code>.</p> <p>Signature <pre><code>lt(arg1 Number, arg2 Number) Boolean\n</code></pre></p> <p>Parameters</p> Name Type Description <code>arg1</code> <code>Number</code> The first number to compare. <code>arg2</code> <code>Number</code> The second number to compare. <p>Return</p> Type Description <code>Boolean</code> <code>true</code> if <code>arg1</code> is less than <code>arg2</code>; otherwise, <code>false</code>. <p>Example</p> <p><pre><code>{{ $result := ne 3 5 }}\nResult: {{ $result }}\n</code></pre> <pre>\nResult: true\n</pre> </p> <p>In this example, <code>lt</code> returns <code>true</code> because <code>3</code> is less than <code>5</code>.</p>"},{"location":"guides/components/templates/functions.html#le","title":"le","text":"<p>Description</p> <p>The <code>le</code> function returns the boolean truth of whether <code>arg1</code> is less than or equal <code>arg2</code>.</p> <p>Signature <pre><code>le(arg1 Number, arg2 Number) Boolean\n</code></pre></p> <p>Parameters</p> Name Type Description <code>arg1</code> <code>Number</code> The first number to compare. <code>arg2</code> <code>Number</code> The second number to compare. <p>Return</p> Type Description <code>Boolean</code> <code>true</code> if <code>arg1</code> is less than or equal to <code>arg2</code>; otherwise, <code>false</code>. <p>Example</p> <p><pre><code>{{ $result := le 5 5 }}\nResult: {{ $result }}\n</code></pre> <pre>\nResult: true\n</pre> </p> <p>In this example, <code>le</code> returns <code>true</code> because <code>5</code> is less than or equal to <code>5</code>.</p>"},{"location":"guides/components/templates/functions.html#gt","title":"gt","text":"<p>Description</p> <p>The <code>gt</code> function returns the boolean truth of whether <code>arg1</code> is greater than <code>arg2</code>.</p> <p>Signature <pre><code>gt(arg1 Number, arg2 Number) Boolean\n</code></pre></p> <p>Parameters</p> Name Type Description <code>arg1</code> <code>Number</code> The first number to compare. <code>arg2</code> <code>Number</code> The second number to compare. <p>Return</p> Type Description <code>Boolean</code> <code>true</code> if <code>arg1</code> is greater than <code>arg2</code>; otherwise, <code>false</code>. <p>Example</p> <p><pre><code>{{ $result := gt 7 5 }}\nResult: {{ $result }}\n</code></pre> <pre>\nResult: true\n</pre> </p> <p>In this example, <code>gt</code> returns <code>true</code> because <code>5</code> is greater than <code>3</code>.</p>"},{"location":"guides/components/templates/functions.html#ge","title":"ge","text":"<p>Description</p> <p>The <code>ge</code> function returns the boolean truth of whether <code>arg1</code> is greater than or equal <code>arg2</code>.</p> <p>Signature <pre><code>ge(arg1 Number, arg2 Number) Boolean\n</code></pre></p> <p>Parameters</p> Name Type Description <code>arg1</code> <code>Number</code> The first number to compare. <code>arg2</code> <code>Number</code> The second number to compare. <p>Return</p> Type Description <code>Boolean</code> <code>true</code> if <code>arg1</code> is greater than or equal to <code>arg2</code>; otherwise, <code>false</code>. <p>Example</p> <p><pre><code>{{ $result := ge 5 5 }}\nResult: {{ $result }}\n</code></pre> <pre>\nResult: true\n</pre> </p> <p>In this example, <code>gt</code> returns <code>true</code> because <code>5</code> is greater than or equal to <code>5</code>.</p>"},{"location":"guides/components/templates/functions.html#math","title":"Math","text":""},{"location":"guides/components/templates/functions.html#mathabs","title":"math.Abs","text":"<p>Description The <code>Abs</code> method in the math space calculates the absolute value of a number. It takes one <code>Number</code> parameter, and returns the result as a <code>Float64</code>.</p> <p>Signature <pre><code>Abs(x Number) Float64\n</code></pre></p> <p>Parameters</p> Name Type Description <code>x</code> <code>Number</code> The number to find the absolute value of <p>Return</p> Type Description <code>Float64</code> The absolute value of <code>x</code> <p>Example</p> <p><pre><code>{{ $number := -3.5 }}\nThe absolute value of {{ $number }} is {{ math.Abs $number }}\n</code></pre> <pre>\nThe absolute value of -3.5 is 3.5\n</pre> </p> <p>In this example, the <code>Abs</code> method is utilized within the template to compute the absolute value of -3.5, resulting in the output <code>The absolute value of -3.5 is 3.5</code>.</p>"},{"location":"guides/components/templates/functions.html#mathadd","title":"math.Add","text":"<p>Description The <code>Add</code> method in the math space calculates the sum of multiple numbers. It takes a variadic number of <code>Number</code> parameters, and returns the result as a <code>Float64</code>.</p> <p>Signature <pre><code>Add(values ...Number) Float64\n</code></pre></p> <p>Parameters</p> Name Type Description <code>values</code> <code>...Number</code> A variadic number of values to be summed <p>Return</p> Type Description <code>Float64</code> The sum of the values <p>Example</p> <p><pre><code>{{ $values := list 1 2 3 4.5 }}\nThe sum of the values is {{ math.Add $values... }}\n</code></pre> <pre>\nThe sum of the values is 10.5\n</pre> </p> <p>In this example, the <code>Add</code> method is utilized within the template to compute the sum of the values 1, 2, 3, and 4.5, resulting in the output <code>The sum of the values is 10.5</code>.</p>"},{"location":"guides/components/templates/functions.html#mathsub","title":"math.Sub","text":"<p>Description The <code>Sub</code> method in the math space calculates the difference between two numbers. It takes two <code>Number</code> parameters, and returns the result as a <code>Float64</code>.</p> <p>Signature <pre><code>Sub(Number x, Number y) Float64\n</code></pre></p> <p>Parameters</p> Name Type Description <code>x</code> <code>Number</code> The number to be subtracted from <code>y</code> <code>Number</code> The number to subtract <p>Return</p> Type Description <code>Float64</code> The difference between <code>x</code> and <code>y</code> <p>Example</p> <p><pre><code>{{ $minuend := 10 }}\n{{ $subtrahend := 3 }}\nThe difference between {{ $minuend }} and {{ $subtrahend }} is {{ math.Sub $minuend $subtrahend }}\n</code></pre> <pre>\nThe difference between 10 and 3 is 7\n</pre> </p> <p>In this example, the <code>Sub</code> method is utilized within the template to compute the difference between 10 and 3, resulting in the output <code>The difference between 10 and 3 is 7</code>.</p>"},{"location":"guides/components/templates/functions.html#mathpow","title":"math.Pow","text":"<p>Description The <code>Pow</code> method in the <code>math</code> space calculates the power of one number raised to another. It takes two <code>Number</code> parameters, and returns the result as a <code>Float64</code>.</p> <p>Signature <pre><code>Pow(Number x, Number y) Float64\n</code></pre></p> <p>Parameters</p> Name Type Description <code>x</code> <code>Number</code> The base number <code>y</code> <code>Number</code> The exponent <p>Return</p> Type Description <code>Float64</code> The result of raising <code>x</code> to the power of <code>y</code> <p>Example</p> <p><pre><code>{{ $base := 2 }}\n{{ $exponent := 3 }}\nThe result of {{ $base }}^{{ $exponent }} is {{ math.Pow $base $exponent }}\n</code></pre> <pre>\nThe result of 2^3 is 8\n</pre> </p> <p>In this example, the <code>Pow</code> method is utilized within the template to compute the power of 2 raised to 3, resulting in the output <code>The result of 2^3 is 8</code>.</p>"},{"location":"guides/components/templates/functions.html#mathmul","title":"math.Mul","text":"<p>Description The <code>Mul</code> method in the <code>math</code> space calculates the product of multiple numbers. It takes a variadic number of <code>Number</code> parameters, and returns the result as a <code>Float64</code>.</p> <p>Signature <pre><code>Mul(values ...Number) Float64\n</code></pre></p> <p>Parameters</p> Name Type Description <code>values</code> <code>...Number</code> A variadic number of values to be multiplied <p>Return</p> Type Description <code>Float64</code> The product of the values <p>Example</p> <p><pre><code>{{ $values := list 1 2 3 4.5 }}\nThe product of the values is {{ math.Mul $values... }}\n</code></pre> <pre>\nThe product of the values is 27\n</pre> </p> <p>In this example, the <code>Mul</code> method is utilized within the template to compute the product of the values 1, 2, 3, and 4.5, resulting in the output <code>The product of the values is 27</code>.</p>"},{"location":"guides/components/templates/functions.html#mathdiv","title":"math.Div","text":"<p>Description The <code>Div</code> method in the <code>math</code> space calculates the division of one number by another. It takes two <code>Number</code> parameters, and returns the result as a <code>Float64</code>. If the second parameter is zero, it panics with the message \"division by zero\".</p> <p>Signature <pre><code>Div(Number x, Number y) Float64\n</code></pre></p> <p>Parameters</p> Name Type Description <code>x</code> <code>Number</code> The dividend <code>y</code> <code>Number</code> The divisor <p>Return</p> Type Description <code>Float64</code> The result of the division <p>Example</p> <p><pre><code>{{ $dividend := 10 }}\n{{ $divisor := 2 }}\nThe result of dividing {{ $dividend }} by {{ $divisor }} is {{ math.Div $dividend $divisor }}\n</code></pre> <pre>\nThe result of dividing 10 by 2 is 5\n</pre> </p> <p>In this example, the <code>Div</code> method is utilized within the template to compute the division of 10 by 2, resulting in the output <code>The result of dividing 10 by 2 is 5</code>.</p>"},{"location":"guides/components/templates/functions.html#mathmax","title":"math.Max","text":"<p>Description The <code>Max</code> method in the <code>math</code> space returns the maximum of two numbers. It takes two <code>Number</code> parameters, and returns the result as a <code>Float64</code>.</p> <p>Signature <pre><code>Max(Number x, Number y) Float64\n</code></pre></p> <p>Parameters</p> Name Type Description <code>x</code> <code>Number</code> The first number <code>y</code> <code>Number</code> The second number <p>Return</p> Type Description <code>Float64</code> The maximum of `x` and `y` <p>Example</p> <p><pre><code>{{ $a := 5 }}\n{{ $b := 10 }}\nThe maximum of {{ $a }} and {{ $b }} is {{ math.Max $a $b }}\n</code></pre> <pre>\nThe maximum of 5 and 10 is 10\n<p>\n</p>\n<p>In this example, the <code>Max</code> method is utilized within the template to find the maximum of 5 and 10, resulting in the output <code>The maximum of 5 and 10 is 10</code>.</p>"},{"location":"guides/components/templates/functions.html#mathmin","title":"math.Min","text":"<p>Description\nThe <code>Min</code> method in the <code>math</code> space returns the minimum of two numbers. It takes two <code>Number</code> parameters, and returns the result as a <code>Float64</code>.</p>\n<p>Signature\n<pre><code>Min(Number x, Number y) Float64\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>x</code>\n<code>Number</code>\nThe first number\n\n\n<code>y</code>\n<code>Number</code>\nThe second number\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Float64</code>\nThe minimum of `x` and `y`\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $a := 5 }}\n{{ $b := 10 }}\nThe minimum of {{ $a }} and {{ $b }} is {{ math.Min $a $b }}\n</code></pre>\n\n<pre>\nThe minimum of 5 and 10 is 5\n</pre>\n</p>\n<p>In this example, the <code>Min</code> method is utilized within the template to find the minimum of 5 and 10, resulting in the output <code>The minimum of 5 and 10 is 5</code>.</p>"},{"location":"guides/components/templates/functions.html#mathmod","title":"math.Mod","text":"<p>Description\nThe <code>Mod</code> method in the <code>math</code> space calculates the modulus of one number by another. It takes two <code>Number</code> parameters, and returns the result as a <code>Float64</code>.</p>\n<p>Signature\n<pre><code>Mod(Number x, Number y) Float64\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>x</code>\n<code>Number</code>\nThe dividend\n\n\n<code>y</code>\n<code>Number</code>\nThe divisor\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Float64</code>\nThe modulus of `x` by `y`\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $a := 10 }}\n{{ $b := 3 }}\nThe modulus of {{ $a }} by {{ $b }} is {{ math.Mod $a $b }}\n</code></pre>\n\n<pre>\nThe modulus of 10 by 3 is 1\n<p>\n</p>\n<p>In this example, the <code>Mod</code> method is utilized within the template to compute the modulus of 10 by 3, resulting in the output <code>The modulus of 10 by 3 is 1</code>.</p>"},{"location":"guides/components/templates/functions.html#mathround","title":"math.Round","text":"<p>Description\nThe <code>Round</code> method in the <code>math</code> space rounds a number to the nearest integer. It takes one <code>Number</code> parameter, converts it to <code>Float64</code> if valid, and returns the result as a <code>Float64</code>.</p>\n<p>Signature\n<pre><code>Round(Number x) Float64\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>x</code>\n<code>Number</code>\nThe number to round\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Float64</code>\nThe rounded value of `x`\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $a := 3.6 }}\nThe rounded value of {{ $a }} is {{ math.Round $a }}\n</code></pre>\n\n<pre>\nThe rounded value of 3.6 is 4\n<p>\n</p>\n<p>In this example, the <code>Round</code> method is utilized within the template to round the number 3.6, resulting in the output <code>The rounded value of 3.6 is 4</code>.</p>"},{"location":"guides/components/templates/functions.html#mathfloor","title":"math.Floor","text":"<p>Description\nThe <code>Floor</code> method in the <code>math</code> space returns the largest integer less than or equal to a given number. It takes one <code>Number</code> parameter, converts it to <code>Float64</code> if valid, and returns the result as a <code>Float64</code>.</p>\n<p>Signature\n<pre><code>Floor(Number x) Float64\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>x</code>\n<code>Number</code>\nThe number to floor\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Float64</code>\nThe floored value of `x`\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $a := 3.6 }}\nThe floored value of {{ $a }} is {{ math.Floor $a }}\n</code></pre>\n\n<pre>\nThe floored value of 3.6 is 3\n<p>\n</p>\n<p>In this example, the <code>Floor</code> method is utilized within the template to floor the number 3.6, resulting in the output <code>The floored value of 3.6 is 3</code>.</p>"},{"location":"guides/components/templates/functions.html#mathisint","title":"math.IsInt","text":"<p>Description\nThe <code>IsInt</code> method in the <code>math</code> space checks if a given value is an integer. It takes one <code>Object</code> parameter and returns <code>true</code> if the value is an integer or a string representing an integer, otherwise returns <code>false</code>.</p>\n<p>Signature\n<pre><code>IsInt(Object n) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>n</code>\n<code>Object</code>\nThe value to be checked\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n`true` if `n` is an integer, else `false`\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $val := 123 }}\nIs {{ $val }} an integer? {{ math.IsInt $val }}\n</code></pre>\n\n<pre>\nIs 123 an integer? true\n</pre>\n</p>\n<p>In this example, the <code>IsInt</code> method is utilized within the template to check if 123 is an integer, resulting in the output <code>Is 123 an integer? true</code>.</p>"},{"location":"guides/components/templates/functions.html#mathisfloat","title":"math.IsFloat","text":"<p>Description\nThe <code>IsFloat</code> method in the <code>math</code> space checks if a given value is a floating-point number. It takes one <code>Object</code> parameter and returns <code>true</code> if the value is a float or a string representing a float, otherwise returns <code>false</code>.</p>\n<p>Signature\n<pre><code>IsFloat(Object n) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>n</code>\n<code>Object</code>\nThe value to be checked\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n`true` if `n` is a float, else `false`\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $val := \"123.45\" }}\nIs {{ $val }} a float? {{ math.IsFloat $val }}\n</code></pre>\n\n<pre>\nIs 123.45 a float? true\n</pre>\n</p>\n<p>In this example, the <code>IsFloat</code> method is utilized within the template to check if \"123.45\" is a float, resulting in the output <code>Is 123.45 a float? true</code>.</p>"},{"location":"guides/components/templates/functions.html#mathisnum","title":"math.IsNum","text":"<p>Description\nThe <code>IsNum</code> method in the <code>math</code> space checks if a given value is a number (either an integer or a float). It takes one <code>Object</code> parameter and returns <code>true</code> if the value is a number or a string representing a number, otherwise returns <code>false</code>.</p>\n<p>Signature\n<pre><code>IsNum(Object n) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>n</code>\n<code>Object</code>\nThe value to be checked\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n`true` if `n` is a number, else `false`\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $val := \"123.45\" }}\nIs {{ $val }} a number? {{ math.IsNum $val }}\n</code></pre>\n\n<pre>\nIs 123.45 a number? true\n</pre>\n</p>\n<p>In this example, the <code>IsNum</code> method is utilized within the template to check if \"123.45\" is a number, resulting in the output <code>Is 123.45 a number? true</code>.</p>"},{"location":"guides/components/templates/functions.html#string","title":"String","text":""},{"location":"guides/components/templates/functions.html#stringstartswith","title":"string.StartsWith","text":"<p>Description</p>\n<p>The <code>StartsWith</code> method checks if the given string starts with the specified prefix.</p>\n<p>Signature\n<pre><code>StartsWith(str String, prefix String) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to check the prefix against.\n\n\n<code>prefix</code>\n<code>String</code>\nThe prefix to check at the start of the string.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n<code>true</code> if the string starts with the prefix, <code>false</code> otherwise.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"Hello, world!\" }}\n{{ $prefix := \"Hello\" }}\nStarts with prefix: {{ string.StartsWith $str $prefix }}\n</code></pre>\n\n<pre>\nStarts with prefix: true\n</pre>\n</p>\n<p>In this example, the <code>StartsWith</code> method is utilized within the template to check if <code>\"Hello, world!\"</code> starts with <code>\"Hello\"</code>, resulting in the output <code>Starts with prefix: true</code>.</p>"},{"location":"guides/components/templates/functions.html#stringendswith","title":"string.EndsWith","text":"<p>Description</p>\n<p>The <code>EndsWith</code> method checks if the given string ends with the specified suffix.</p>\n<p>Signature\n<pre><code>EndsWith(str String, suffix String) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to check the suffix against.\n\n\n<code>suffix</code>\n<code>String</code>\nThe suffix to check at the end of the string.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n<code>true</code> if the string ends with the suffix, <code>false</code> otherwise.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"Hello, world!\" }}\n{{ $suffix := \"world!\" }}\nEnds with suffix: {{ string.EndsWith $str $suffix }}\n</code></pre>\n\n<pre>\nEnds with suffix: true\n</pre>\n</p>\n<p>In this example, the <code>EndsWith</code> method is utilized within the template to check if <code>\"Hello, world!\"</code> ends with <code>\"world!\"</code>, resulting in the output <code>Ends with suffix: true</code>.</p>"},{"location":"guides/components/templates/functions.html#stringcontains","title":"string.Contains","text":"<p>Description</p>\n<p>The <code>Contains</code> method checks if the given string contains the specified substring.</p>\n<p>Signature\n<pre><code>Contains(str String, substr String) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to search within.\n\n\n<code>substr</code>\n<code>String</code>\nThe substring to search for within the string.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code><code>|</code>true<code>if the string contains the substring,</code>false` otherwise.\n\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"Hello, world!\" }}\n{{ $substr := \"world\" }}\nContains substring: {{ string.Contains $str $substr }}\n</code></pre>\n\n<pre>\nContains substring: true\n</pre>\n</p>\n<p>In this example, the <code>Contains</code> method is utilized within the template to check if <code>\"Hello, world!\"</code> contains <code>\"world\"</code>, resulting in the output <code>Contains substring: true</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtouppercase","title":"string.ToUpperCase","text":"<p>Description</p>\n<p>The <code>ToUpperCase</code> method converts all characters in the given string to uppercase.</p>\n<p>Signature\n<pre><code>ToUpperCase(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to convert to uppercase.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe uppercase version of the input string.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"Hello, world!\" }}\nUppercase: {{ string.ToUpperCase $str }}\n</code></pre>\n\n<pre>\nUppercase: HELLO, WORLD!\n</pre>\n</p>\n<p>In this example, the <code>ToUpperCase</code> method is utilized within the template to convert <code>\"Hello, world!\"</code> to uppercase, resulting in the output <code>Uppercase: HELLO, WORLD!</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtolowercase","title":"string.ToLowerCase","text":"<p>Description</p>\n<p>The <code>ToLowerCase</code> method converts all characters in the given string to lowercase.</p>\n<p>Signature\n<pre><code>ToLowerCase(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to convert to lowercase.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe lowercase version of the input string.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"Hello, world!\" }}\nLowercase: {{ string.ToLowerCase $str }}\n</code></pre>\n\n<pre>\nLowercase: hello, world!\n</pre>\n</p>\n<p>In this example, the <code>ToLowerCase</code> method is utilized within the template to convert <code>\"Hello, world!\"</code> to lowercase, resulting in the output <code>Lowercase: hello, world!</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtopascalcase","title":"string.ToPascalCase","text":"<p>Description</p>\n<p>The <code>ToPascalCase</code> method converts the given string to PascalCase format, where each word starts with an uppercase letter and there are no spaces between words.</p>\n<p>Signature\n<pre><code>ToPascalCase(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to convert to PascalCase.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe PascalCase version of the input string.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"hello world example\" }}\nPascalCase: {{ string.ToPascalCase $str }}\n</code></pre>\n\n<pre>\nPascalCase: HelloWorldExample\n</pre>\n</p>\n<p>In this example, the <code>ToPascalCase</code> method is utilized within the template to convert <code>\"hello world example\"</code> to PascalCase, resulting in the output <code>PascalCase: HelloWorldExample</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtocamelcase","title":"string.ToCamelCase","text":"<p>Description</p>\n<p>The <code>ToCamelCase</code> method converts the given string to camelCase format, where the first word is in lowercase and subsequent words start with uppercase letters, with no spaces between words.</p>\n<p>Signature\n<pre><code>ToCamelCase(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to convert to camelCase.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe camelCase version of the input string.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"hello world example\" }}\nCamelCase: {{ string.ToCamelCase $str }}\n</code></pre>\n\n<pre>\nCamelCase: helloWorldExample\n</pre>\n</p>\n<p>In this example, the <code>ToCamelCase</code> method is utilized within the template to convert <code>\"hello world example\"</code> to camelCase, resulting in the output <code>CamelCase: helloWorldExample</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtosnakecase","title":"string.ToSnakeCase","text":"<p>Description</p>\n<p>The <code>ToSnakeCase</code> method converts the given <code>String</code> to snake_case format, where words are separated by underscores, and all letters are in lowercase.</p>\n<p>Signature\n<pre><code>ToSnakeCase(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to convert to snake_case.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe snake_case version of the input string.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"HelloWorldExample\" }}\nSnakeCase: {{ string.ToSnakeCase $str }}\n</code></pre>\n\n<pre>\nSnakeCase: hello_world_example\n</pre>\n</p>\n<p>In this example, the <code>ToSnakeCase</code> method is utilized within the template to convert <code>\"HelloWorldExample\"</code> to snake_case, resulting in the output <code>SnakeCase: hello_world_example</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtokebabcase","title":"string.ToKebabCase","text":"<p>Description</p>\n<p>The <code>ToKebabCase</code> method converts the given string to kebab-case format, where words are separated by hyphens, and all letters are in lowercase.</p>\n<p>Signature\n<pre><code>ToKebabCase(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to convert to kebab-case.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe kebab-case version of the input string.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"Hello World Example\" }}\nKebabCase: {{ string.ToKebabCase $str }}\n</code></pre>\n\n<pre>\nKebabCase: hello-world-example\n</pre>\n</p>\n<p>In this example, the <code>ToKebabCase</code> method is utilized within the template to convert <code>\"Hello World Example\"</code> to kebab-case, resulting in the output <code>KebabCase: hello-world-example</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtoupperflatcase","title":"string.ToUpperFlatCase","text":"<p>Description</p>\n<p>The <code>ToUpperFlatCase</code> method converts the given string to flat case format, where all spaces are removed, and all letters are converted to uppercase.</p>\n<p>Signature\n<pre><code>ToUpperFlatCase(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to convert to flat case.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe uppercase flat case version of the input string.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"Hello World Example\" }}\nUpperFlatCase: {{ string.ToUpperFlatCase $str }}\n</code></pre>\n\n<pre>\nUpperFlatCase: HELLOWORLDEXAMPLE\n</pre>\n</p>\n<p>In this example, the <code>ToUpperFlatCase</code> method is utilized within the template to convert <code>\"Hello World Example\"</code> to flat case with uppercase letters, resulting in the output <code>UpperFlatCase: HELLOWORLDEXAMPLE</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtolowerflatcase","title":"string.ToLowerFlatCase","text":"<p>Description</p>\n<p>The <code>ToLowerFlatCase</code> method converts the given string to flat case format, where all spaces are removed, and all letters are converted to lowercase.</p>\n<p>Signature\n<pre><code>ToLowerFlatCase(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to convert to flat case.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe lowercase flat case version of the input string.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"Hello World Example\" }}\nLowerFlatCase: {{ string.ToLowerFlatCase $str }}\n</code></pre>\n\n<pre>\nLowerFlatCase: helloworldexample\n</pre>\n</p>\n<p>In this example, the <code>ToLowerFlatCase</code> method is utilized within the template to convert <code>\"Hello World Example\"</code> to flat case with lowercase letters, resulting in the output <code>LowerFlatCase: helloworldexample</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtocobolcase","title":"string.ToCobolCase","text":"<p>Description</p>\n<p>The ToCobolCase method converts the given string to COBOL case format, where spaces are replaced by hyphens, and all letters are converted to uppercase.</p>\n<p>Signature\n<pre><code>ToCobolCase(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to convert to COBOL case.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe COBOL case version of the input string.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"Hello World Example\" }}\nCobolCase: {{ string.ToCobolCase $str }}\n</code></pre>\n\n<pre>\nCobolCase: HELLO-WORLD-EXAMPLE\n</pre>\n</p>\n<p>In this example, the <code>ToCobolCase</code> method is utilized within the template to convert <code>\"Hello World Example\"</code> to COBOL case, resulting in the output <code>CobolCase: HELLO-WORLD-EXAMPLE</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtotraincase","title":"string.ToTrainCase","text":"<p>Description</p>\n<p>The <code>ToTrainCase</code> method converts the given string to Train Case format, where words are capitalized, separated by hyphens, and spaces are replaced with hyphens.</p>\n<p>Signature\n<pre><code>ToTrainCase(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to convert to Train Case.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe Train Case version of the input string.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"hello world example\" }}\nTrainCase: {{ string.ToTrainCase $str }}\n</code></pre>\n\n<pre>\nTrainCase: Hello-World-Example\n</pre>\n</p>\n<p>In this example, the <code>ToTrainCase</code> method is utilized within the template to convert <code>\"hello world example\"</code> to Train Case, resulting in the output <code>TrainCase: Hello-World-Example</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtonormalcase","title":"string.ToNormalCase","text":"<p>Description</p>\n<p>The <code>ToNormalCase</code> method converts the given string to a more natural format, where hyphens and underscores are replaced by spaces, and each word is capitalized.</p>\n<p>Signature\n<pre><code>ToNormalCase(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to convert to Normal Case.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe Normal Case version of the input string.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"hello-world_example\" }}\nNormalCase: {{ string.ToNormalCase $str }}\n</code></pre>\n\n<pre>\nNormalCase: Hello World Example\n</pre>\n</p>\n<p>In this example, the <code>ToNormalCase</code> method is utilized within the template to convert <code>\"hello-world_example\"</code> to a normal case format, resulting in the output <code>NormalCase: Hello World Example</code>.</p>"},{"location":"guides/components/templates/functions.html#stringnormalize","title":"string.Normalize","text":"<p>Description</p>\n<p>The <code>Normalize</code> method replaces newline characters with spaces and trims leading and trailing spaces from the given string.</p>\n<p>Signature\n<pre><code>Normalize(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to normalize by replacing newlines with spaces and trimming.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe normalized string with newlines replaced by spaces and trimmed.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"  Hello\\nWorld  \" }}\nNormalized: {{ string.Normalize $str }}\n</code></pre>\n\n<pre>\nNormalized: Hello World\n</pre>\n</p>\n<p>In this example, the <code>Normalize</code> method is utilized within the template to replace newline characters in <code>\" Hello\\nWorld \"</code> with spaces and trim the result, resulting in the output <code>Normalized: Hello World</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtrimspace","title":"string.TrimSpace","text":"<p>Description</p>\n<p>The <code>TrimSpace</code> method removes leading and trailing white space characters from the given string.</p>\n<p>Signature\n<pre><code>TrimSpace(str String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string from which leading and trailing white spaces are to be removed.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe string with leading and trailing white spaces removed.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"  Hello World  \" }}\nTrimmed: {{ string.TrimSpace $str }}\n</code></pre>\n\n<pre>\nTrimmed: Hello World\n</pre>\n</p>\n<p>In this example, the <code>TrimSpace</code> method is utilized within the template to remove leading and trailing spaces from <code>\" Hello World \"</code>, resulting in the output <code>Trimmed: Hello World</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtrim","title":"string.Trim","text":"<p>Description</p>\n<p>The <code>Trim</code> method removes all leading and trailing occurrences of the specified cutset characters from the given string.</p>\n<p>Signature\n<pre><code>Trim(str String, cutset String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to trim.\n\n\n<code>cutset</code>\n<code>String</code>\nThe set of characters to remove from the start and end of <code>str</code>.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe string with specified characters removed from the start and end.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"***Hello World***\" }}\nTrimmed: {{ string.Trim $str \"*\" }}\n</code></pre>\n\n<pre>\nTrimmed: Hello World\n</pre>\n</p>\n<p>In this example, the <code>Trim</code> method is utilized within the template to remove asterisks from both ends of <code>\"***Hello World***\"</code>, resulting in the output <code>Trimmed: Hello World</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtrimsuffix","title":"string.TrimSuffix","text":"<p>Description</p>\n<p>The <code>TrimSuffix</code> method removes the specified suffix characters from the end of the given string.</p>\n<p>Signature\n<pre><code>TrimSuffix(str String, cutset String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string from which to remove the suffix.\n\n\n<code>cutset</code>\n<code>String</code>\nThe suffix characters to remove from <code>str</code>.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe string with the specified suffix removed.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"Hello World!!!\" }}\nTrimmed: {{ string.TrimSuffix $str \"!\" }}\n</code></pre>\n\n<pre>\nTrimmed: Hello World\n</pre>\n</p>\n<p>In this example, the <code>TrimSuffix</code> method is utilized within the template to remove exclamation marks from the end of <code>\"Hello World!!!\"</code>, resulting in the output <code>Trimmed: Hello World</code>.</p>"},{"location":"guides/components/templates/functions.html#stringtrimprefix","title":"string.TrimPrefix","text":"<p>Description</p>\n<p>The <code>TrimPrefix</code> method removes the specified prefix characters from the start of the given string.</p>\n<p>Signature\n<pre><code>TrimPrefix(str String, cutset String) string\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string from which to remove the prefix.\n\n\n<code>cutset</code>\n<code>String</code>\nThe prefix characters to remove from <code>str</code>.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe string with the specified prefix removed.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"!!!Hello World\" }}\nTrimmed: {{ string.TrimPrefix $str \"!\" }}\n</code></pre>\n\n<pre>\nTrimmed: Hello World\n</pre>\n</p>\n<p>In this example, the <code>TrimPrefix</code> method is utilized within the template to remove exclamation marks from the start of <code>\"!!!Hello World\"</code>, resulting in the output <code>Trimmed: Hello World</code>.</p>"},{"location":"guides/components/templates/functions.html#stringreplace","title":"string.Replace","text":"<p>Description</p>\n<p>The <code>Replace</code> method replaces occurrences of the old substring with the new substring in the given string, up to a specified number of replacements.</p>\n<p>Signature\n<pre><code>Replace(str String, old String, new String, n Int) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string in which replacements are to be made.\n\n\n<code>old</code>\n<code>String</code>\nThe substring to be replaced.\n\n\n<code>new</code>\n<code>String</code>\nThe substring to replace <code>old</code> with.\n\n\n<code>n</code>\n<code>Int</code>\nThe maximum number of replacements. Use <code>-1</code> to replace all occurrences.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe string with <code>old</code> replaced by <code>new</code> up to <code>n</code> times.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"foo foo foo\" }}\nReplaced: {{ string.Replace $str \"foo\" \"bar\" 2 }}\n</code></pre>\n\n<pre>\nReplaced: bar bar foo\n</pre>\n</p>\n<p>In this example, the <code>Replace</code> method is utilized within the template to replace the first two occurrences of <code>\"foo\"</code> with <code>\"bar\"</code> in <code>\"foo foo foo\"</code>, resulting in the output <code>Replaced: bar bar foo</code>.</p>"},{"location":"guides/components/templates/functions.html#stringsplit","title":"string.Split","text":"<p>Description</p>\n<p>The <code>Split</code> method splits the given string into a slice of substrings separated by the specified separator.</p>\n<p>Signature\n<pre><code>Split(str String, sep String) []String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to split.\n\n\n<code>sep</code>\n<code>String</code>\nThe separator to use for splitting.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>...String</code>\nA slice of substrings split by <code>sep</code>.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"a,b,c\" }}\nSplit: {{ string.Split $str \",\" }}\n</code></pre>\n\n<pre>\nSplit: [a b c]\n</pre>\n</p>\n<p>In this example, the <code>Split</code> method is utilized within the template to split <code>\"a,b,c\"</code> by commas, resulting in the output <code>Split: [a b c]</code>.</p>"},{"location":"guides/components/templates/functions.html#stringconcat","title":"string.Concat","text":"<p>Description</p>\n<p>The <code>Concat</code> method concatenates a slice of strings into a single string, separated by the specified separator.</p>\n<p>Signature\n<pre><code>Concat(sep String, items ...String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>sep</code>\n<code>String</code>\nThe separator to insert between items.\n\n\n<code>items</code>\n<code>...String</code>\nThe strings to concatenate.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe concatenated string with <code>sep</code> between items.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $items := list \"a\" \"b\" \"c\" }}\nConcatenated: {{ string.Concat \",\" $items }}\n</code></pre>\n\n<pre>\nConcatenated: a,b,c\n</pre>\n</p>\n<p>In this example, the <code>Concat</code> method is utilized within the template to concatenate <code>\"a\"</code>, <code>\"b\"</code>, and <code>\"c\"</code> with commas, resulting in the output <code>Concatenated: a,b,c</code>.</p>"},{"location":"guides/components/templates/functions.html#stringrepeat","title":"string.Repeat","text":"<p>Description</p>\n<p>The <code>Repeat</code> method repeats the given string a specified number of times.</p>\n<p>Signature\n<pre><code>Repeat(str String, count Int) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>str</code>\n<code>String</code>\nThe string to repeat.\n\n\n<code>count</code>\n<code>Int</code>\nThe number of times to repeat the string.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe string repeated <code>count</code> times.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $str := \"Pars\" }}\nRepeated: {{ string.Repeat $str 3 }}\n</code></pre>\n\n<pre>\nRepeated: ParsParsPars\n</pre>\n</p>\n<p>In this example, the <code>Repeat</code> method is utilized within the template to repeat <code>\"Pars\"</code> three times, resulting in the output <code>Repeated: ParsParsPars</code>.</p>"},{"location":"guides/components/templates/functions.html#stringjoinfields","title":"string.JoinFields","text":"<p>Description</p>\n<p>The <code>JoinFields</code> method joins the fields of a slice of structs or simple values into a single string, separated by the specified separator. If the slice contains structs, it extracts the value of the specified field.</p>\n<p>Signature\n<pre><code>JoinFields(slice []Object, sep String, key String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>slice</code>\n<code>[]Object</code>\nThe slice containing structs or simple values.\n\n\n<code>sep</code>\n<code>String</code>\nThe separator to insert between joined fields.\n\n\n<code>key</code>\n<code>String</code>\nThe field name to extract from structs (ignored if <code>slice</code> contains simple values).\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe joined string with fields separated by <code>sep</code>.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $items := list (struct \"Name\" \"Alice\") (struct \"Name\" \"Bob\") }}\nJoined Fields: {{ string.JoinFields $items \",\" \"Name\" }}\n</code></pre>\n\n<pre>\nJoined Fields: Alice,Bob\n</pre>\n</p>\n<p>In this example, the <code>JoinFields</code> method is utilized within the template to join the <code>\"Name\"</code> fields from a slice of structs with commas, resulting in the output <code>Joined Fields: Alice,Bob</code>.</p>"},{"location":"guides/components/templates/functions.html#stringsplitfields","title":"string.SplitFields","text":"<p>Description</p>\n<p>The <code>SplitFields</code> method splits the given string into a slice of interfaces using the specified separator.</p>\n<p>Signature\n<pre><code>SplitFields(input String, sep String) []String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>input</code>\n<code>String</code>\nThe string to split.\n\n\n<code>sep</code>\n<code>String</code>\nThe separator to use for splitting.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]String</code>\nA slice of split substrings as interfaces.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $input := \"a,b,c\" }}\nSplit Fields: {{ string.SplitFields $input \",\" }}\n</code></pre>\n\n<pre>\nSplit Fields: [a b c]\n</pre>\n</p>\n<p>In this example, the <code>SplitFields</code> method is utilized within the template to split<code>\"a,b,c\"</code> by commas, resulting in the output <code>Split Fields: [a b c]</code>.</p>"},{"location":"guides/components/templates/functions.html#stringpluralize","title":"string.Pluralize","text":"<p>Description</p>\n<p>The <code>Pluralize</code> method returns the plural form of the given word. It handles irregular plurals and applies common English pluralization rules.</p>\n<p>Signature\n<pre><code>Pluralize(word String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>word</code>\n<code>String</code>\nThe singular word to pluralize.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe plural form of the given word.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $word := \"child\" }}\nPluralized: {{ string.Pluralize $word }}\n</code></pre>\n\n<pre>\nPluralized: children\n</pre>\n</p>\n<p>In this example, the <code>Pluralize</code> method is utilized within the template to convert <code>\"child\"</code> to its plural form <code>\"children\"</code>, resulting in the output <code>Pluralized: children</code>.</p>"},{"location":"guides/components/templates/functions.html#stringunpluralize","title":"string.UnPluralize","text":"<p>Description</p>\n<p>The <code>UnPluralize</code> method returns the singular form of the given plural word. It handles irregular plurals and applies common English singularization rules.</p>\n<p>Signature\n<pre><code>UnPluralize(word String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>word</code>\n<code>String</code>\nThe plural word to singularize.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe singular form of the given plural word.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $word := \"children\" }}\nSingularized: {{ string.UnPluralize $word }}\n</code></pre>\n\n<pre>\nSingularized: child\n</pre>\n</p>\n<p>In this example, the <code>UnPluralize</code> method is utilized within the template to convert <code>\"children\"</code> to its singular form <code>\"child\"</code>, resulting in the output <code>Singularized: child</code>.</p>"},{"location":"guides/components/templates/functions.html#stringindent","title":"string.Indent","text":"<p>Description</p>\n<p>The <code>Indent</code> method adds a specified indentation to the beginning of each line in the given text. It preserves the existing content of the lines and adds the indentation before each line.</p>\n<p>Signature\n<pre><code>Indent(text String, indent String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>text</code>\n<code>String</code>\nThe text to which indentation will be added.\n\n\n<code>indent</code>\n<code>String</code>\nThe indentation to add before each line.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe text with added indentation.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $text := \"line1\\nline2\" }}\n{{ $indent := \"    \" }}\nIndented: {{ string.Indent $text $indent }}\n</code></pre>\n\n<pre>\nIndented: \n    line1\n    line2\n</pre>\n</p>\n<p>In this <code>example</code>, the Indent method is used to add four spaces before each line of the text, resulting in the output with the added indentation.</p>"},{"location":"guides/components/templates/functions.html#stringindentauto","title":"string.IndentAuto","text":"<p>Description</p>\n<p>The <code>IndentAuto</code> method automatically adds the existing indentation from the first line of the text to all lines in the text. If the text has no lines, it returns the original text.</p>\n<p>Signature\n<pre><code>IndentAuto(text String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>text</code>\n<code>String</code>\nThe text to which the existing indentation will be added.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe text with the existing indentation automatically added.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $text := \"  line1\\n  line2\" }}\nAuto Indented: {{ string.IndentAuto $text }}\n</code></pre>\n\n<pre>\nAuto Indented: \n    line1\n    line2\n</pre>\n</p>\n<p>In this example, the <code>IndentAuto</code> method automatically detects the indentation from the first line and applies it to all lines in the text.</p>"},{"location":"guides/components/templates/functions.html#stringarraytostringslice","title":"string.ArrayToStringSlice","text":"<p>Description</p>\n<p>The <code>ArrayToStringSlice</code> method converts an array of <code>[]Object</code> to a slice of strings, filtering out any non-string values.</p>\n<p>Signature\n<pre><code>ArrayToStringSlice(arr []Object) []string\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>arr</code>\n<code>[]Object</code>\nThe array to convert to a slice of strings.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]String</code>\nA slice of strings extracted from the array.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $arr := slice \"one\" 2 \"three\" }}\nString Slice: {{ string.ArrayToStringSlice $arr }}\n</code></pre>\n\n<pre>\nString Slice: [one three]\n</pre>\n</p>\n<p>In this example, the <code>ArrayToStringSlice</code> method converts an array containing strings and non-strings into a slice containing only the strings.</p>"},{"location":"guides/components/templates/functions.html#regexp","title":"Regexp","text":""},{"location":"guides/components/templates/functions.html#regexpfind","title":"regexp.Find","text":"<p>Description</p>\n<p>The <code>Find</code> method searches for the first occurrence of the regular expression <code>expression</code> within the <code>input</code> string and returns the matching substring.</p>\n<p>Signature\n<pre><code>Find(expression String, input String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\nexpression\n<code>String</code>\nThe regular expression to compile and use for searching.\n\n\ninput\n<code>String</code>\nThe input string in which to search for the regular expression.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe first substring that matches the regular expression.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $pattern := \"\\\\d+\" }}\n{{ $input := \"The price is 42 dollars.\" }}\n{{ $match, $err := regex.Find $pattern $input }}\n{{ if $err }}\n    &lt;p&gt;Error: {{ $err }}&lt;/p&gt;\n{{ else }}\n    &lt;p&gt;Match: {{ $match }}&lt;/p&gt;\n{{ end }}\n</code></pre>\n\n<pre>\nMatch: 42\n</pre>\n</p>\n<p>In this example, the <code>Find</code> method is utilized within the template to search for the first occurrence of the pattern <code>\\d+</code> in the input string <code>\"The price is 42 dollars.\"</code>, resulting in the output <code>Match: 42</code>.</p>"},{"location":"guides/components/templates/functions.html#regexpfindall","title":"regexp.FindAll","text":"<p>Description</p>\n<p>The <code>FindAll</code> method in the <code>regexp</code> type searches for all occurrences of a regular expression pattern within a given input string. It returns up to <code>n</code> matches.</p>\n<p>Signature\n<pre><code>FindAll(expression String, n Int, input String) []String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>expression</code>\n<code>String</code>\nThe regular expression pattern to search for.\n\n\n<code>n</code>\n<code>Int</code>\nThe maximum number of matches to return.\n\n\n<code>input</code>\n<code>String</code>\nThe input string to search within.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]String</code>\nA slice of strings containing matches.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $expression := \"\\\\d+\" }}\n{{ $input := \"The prices are 20, 30, and 40 dollars.\" }}\n{{ $matches := regex.FindAll $expression 3 $input }}\nMatches found: {{ $matches }}\n</code></pre>\n\n<pre>\nMatches found: [20 30 40]\n</pre>\n</p>\n<p>In this example, the <code>FindAll</code> method is utilized within the template to search for all occurrences of the pattern <code>\\d+</code> in the input string <code>\"The prices are 20, 30, and 40 dollars.\"</code>, returning up to 3 matches. The result is <code>Matches found: [20 30 40]</code>.</p>"},{"location":"guides/components/templates/functions.html#regexpmatch","title":"regexp.Match","text":"<p>Description</p>\n<p>The <code>Match</code> method in the <code>regexp</code> space checks if the input string matches the given regular expression. It returns a boolean indicating whether the match was successful and an error if the regular expression compilation fails.</p>\n<p>Signature\n<pre><code>Match(expression String, input String) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>expression</code>\n<code>String</code>\nThe regular expression to match against.\n\n\n<code>input</code>\n<code>String</code>\nThe input string to check for a match.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n<code>true</code> if the input string matches the regular expression, <code>false</code> otherwise.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $expression := \"^Hello\" }}\n{{ $input := \"Hello, world!\" }}\nDoes the input match? {{ regex.Match $expression $input }}\n</code></pre>\n\n<pre>\nDoes the input match? true\n</pre>\n</p>\n<p>In this example, the <code>Match</code> method is utilized within the template to check if the input string <code>\"Hello, world!\"</code> starts with the regular expression <code>^Hello</code>, resulting in the output <code>Does the input match? true</code>.</p>"},{"location":"guides/components/templates/functions.html#regexpquotemeta","title":"regexp.QuoteMeta","text":"<p>Description</p>\n<p>The <code>QuoteMeta</code> method returns a string with all the special characters escaped. This is useful when you need to use a literal string as a regular expression.</p>\n<p>Signature\n<pre><code>QuoteMeta(input String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>input</code>\n<code>String</code>\nThe input string to escape for use in a regular expression.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe input string with all special characters escaped.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $input := \"Hello.*World\" }}\nQuoted meta: {{ regex.QuoteMeta $input }}\n</code></pre>\n\n<pre>\nQuoted meta: Hello.\\*World\n</pre>\n</p>\n<p>In this example, the <code>QuoteMeta</code> method is utilized within the template to escape special characters in the string <code>\"Hello.*World\"</code>, resulting in the output <code>Quoted meta: Hello\\.\\\\*World</code>.</p>"},{"location":"guides/components/templates/functions.html#regexpreplace","title":"regexp.Replace","text":"<p>Description</p>\n<p>The <code>Replace</code> method replaces all occurrences of the regular expression pattern in the input string with the replacement string.</p>\n<p>Signature\n<pre><code>Replace(expression String, replacement String, input String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>expression</code>\n<code>String</code>\nThe regular expression to search for.\n\n\n<code>replacement</code>\n<code>String</code>\nThe string to replace the matches with.\n\n\n<code>input</code>\n<code>String</code>\nThe input string to perform the replacements on.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe resulting string after replacements.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $expression := \"world\" }}\n{{ $replacement := \"universe\" }}\n{{ $input := \"Hello, world!\" }}\nReplaced: {{ regex.Replace $expression $replacement $input }}\n</code></pre>\n\n<pre>\nReplaced: Hello, universe!\n</pre>\n</p>\n<p>In this example, the <code>Replace</code> method is utilized within the template to replace occurrences of <code>\"world\"</code> with <code>\"universe\"</code> in the string <code>\"Hello, world!\"</code>, resulting in the output <code>Replaced: Hello, universe!</code>.</p>"},{"location":"guides/components/templates/functions.html#regexpreplaceliteral","title":"regexp.ReplaceLiteral","text":"<p>Description</p>\n<p>The <code>ReplaceLiteral</code> method performs a literal replacement of all occurrences of the pattern in the input string with the replacement string. Unlike <code>Replace</code>, this does not interpret the pattern as a regular expression.</p>\n<p>Signature\n<pre><code>ReplaceLiteral(expression String, replacement String, input String) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>expression</code>\n<code>String</code>\nThe literal string to search for.\n\n\n<code>replacement</code>\n<code>String</code>\nThe string to replace the matches with.\n\n\n<code>input</code>\n<code>String</code>\nThe input string to perform the replacements on.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe resulting string after literal replacements.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $expression := \"world\" }}\n{{ $replacement := \"universe\" }}\n{{ $input := \"Hello, world!\" }}\nReplaced literal: {{ regex.ReplaceLiteral $expression $replacement $input }}\n</code></pre>\n\n<pre>\nReplaced literal: Hello, universe!\n</pre>\n</p>\n<p>In this example, the <code>ReplaceLiteral</code> method is utilized within the template to replace occurrences of the literal string <code>\"world\"</code> with <code>\"universe\"</code> in the string <code>\"Hello, world!\"</code>, resulting in the output <code>Replaced literal: Hello, universe!</code>.</p>"},{"location":"guides/components/templates/functions.html#regexpsplit","title":"regexp.Split","text":"<p>Description</p>\n<p>The <code>Split</code> method splits the input string around each match of the regular expression. The <code>n</code> parameter controls the number of substrings to return.</p>\n<p>Signature\n<pre><code>Split(expression String, n Int, input String) []String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>expression</code>\n<code>String</code>\nThe regular expression to split the string by.\n\n\n<code>n</code>\n<code>Int</code>\nThe maximum number of substrings to return. If <code>n</code> is less than 0, there is no limit.\n\n\n<code>input</code>\n<code>String</code>\nThe input string to split.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]String</code>\nA slice of substrings split around the regular expression.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $expression := \"\\\\s\" }}\n{{ $n := 2 }}\n{{ $input := \"Hello world from Pars\" }}\nSplit result: {{ regex.Split $expression $n $input }}\n</code></pre>\n\n<pre>\nSplit result: [Hello world from Pars]\n</pre>\n</p>\n<p>In this example, the <code>Split</code> method is utilized within the template to split the string <code>\"Hello world from Pars\"</code> around spaces (<code>\\s</code>), resulting in the output <code>Split result: [Hello world from Pars]</code>.</p>"},{"location":"guides/components/templates/functions.html#array","title":"Array","text":""},{"location":"guides/components/templates/functions.html#arrayslice","title":"array.Slice","text":"<p>Description</p>\n<p>The <code>Slice</code> method in the <code>array</code> space takes a variable number of arguments and returns them as a slice of <code>interface{}</code>. This is useful for creating slices from a list of values within a template.</p>\n<p>Signature\n<pre><code>Slice(args ...Object) []Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>args</code>\n<code>...Object</code>\nThe values to be included in the slice\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]Object</code>\nA slice containing the provided values\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $a := 1 }}\n{{ $b := \"two\" }}\n{{ $c := 3.0 }}\nThe slice contains: {{ array.Slice $a $b $c }}\n</code></pre>\n\n<pre>\nThe slice contains: [1 two 3]\n</pre>\n</p>\n<p>In this example, the <code>Slice</code> method is utilized within the template to create a slice containing the values 1, \"two\", and 3.0, resulting in the output <code>The slice contains: [1 two 3]</code>.</p>"},{"location":"guides/components/templates/functions.html#arrayhas","title":"array.Has","text":"<p>Description</p>\n<p>The <code>Has</code> method in the <code>array</code> space checks if a map, slice, or array contains a specific key or value. It takes two <code>Object</code> parameters: the collection and the key or value to check for, and returns <code>true</code> if the key or value is found, otherwise returns <code>false</code>.</p>\n<p>Signature\n<pre><code>Has(in []Object, key String) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>[]Object</code>\nThe collection to be checked\n\n\n<code>key</code>\n<code>String</code>\nThe key or value to check for\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n`true` if `key` is found, else `false`\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice \"one\" \"two\" \"three\" }}\nDoes the list contain \"two\"? {{ array.Has $list \"two\" }}\n</code></pre>\n\n<pre>\nDoes the list contain \"two\"? true\n</pre>\n</p>\n<p>In this example, the <code>Has</code> method is utilized within the template to check if the list contains \"two\", resulting in the output <code>Does the list contain \"two\"? true</code>.</p>"},{"location":"guides/components/templates/functions.html#arrayappend","title":"array.Append","text":"<p>Description</p>\n<p>The <code>Append</code> method in the <code>array</code> space adds an element to the end of a slice. It takes two <code>Object</code> parameters: the value to append and the slice to append to, and returns the updated slice.</p>\n<p>Signature\n<pre><code>Append(v Object, list []Object) []Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>v</code>\n<code>Object</code>\nThe value to append\n\n\n<code>list</code>\n<code>[]Object</code>\nThe slice to append to\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]Object</code>\nThe updated slice\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice \"one\" \"two\" }}\nThe updated list is: {{ array.Append \"three\" $list }}\n</code></pre>\n\n<pre>\nThe updated list is: [one two three]\n</pre>\n</p>\n<p>In this example, the <code>Append</code> method is utilized within the template to add \"three\" to the end of the list, resulting in the output <code>The updated list is: [one two three]</code>.</p>"},{"location":"guides/components/templates/functions.html#arrayprepend","title":"array.Prepend","text":"<p>Description</p>\n<p>The <code>Prepend</code> method in the <code>array</code> space adds an element to the beginning of a slice. It takes two <code>Object</code> parameters: the value to prepend and the slice to prepend to, and returns the updated slice.</p>\n<p>Signature\n<pre><code>Prepend(v Object, list Object) []Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>v</code>\n<code>Object</code>\nThe value to prepend\n\n\n<code>list</code>\n<code>[]Object</code>\nThe slice to prepend to\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]Object</code>\nThe updated slice\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice \"one\" \"two\" }}\nThe updated list is: {{ array.Prepend \"zero\" $list }}\n</code></pre>\n\n<pre>\nThe updated list is: [zero one two]\n</pre>\n</p>\n<p>In this example, the <code>Prepend</code> method is utilized within the template to add \"zero\" to the beginning of the list, resulting in the output <code>The updated list is: [zero one two]</code>.</p>"},{"location":"guides/components/templates/functions.html#arrayuniq","title":"array.Uniq","text":"<p>Description</p>\n<p>The <code>Uniq</code> method in the <code>array</code> space removes duplicate elements from a slice. It takes one <code>Object</code> parameter: the slice to process, and returns a new slice with duplicates removed.</p>\n<p>Signature\n<pre><code>Uniq(list []Object) []Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>list</code>\n<code>[]Object</code>\nThe slice to process\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]Object</code>\nThe slice with duplicates removed\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice \"one\" \"two\" \"one\" \"three\" \"two\" }}\nThe unique list is: {{ array.Uniq $list }}\n</code></pre>\n\n<pre>\nThe unique list is: [one two three]\n</pre>\n</p>\n<p>In this example, the <code>Uniq</code> method is utilized within the template to remove duplicate values from the list, resulting in the output <code>The unique list is: [one two three]</code>.</p>"},{"location":"guides/components/templates/functions.html#arrayreverse","title":"array.Reverse","text":"<p>Description</p>\n<p>The <code>Reverse</code> method in the <code>array</code> space reverses the order of elements in a slice. It takes one <code>Object</code> parameter: the slice to reverse, and returns a new slice with the elements in reverse order.</p>\n<p>Signature\n<pre><code>Reverse(list []Object) []Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>list</code>\n<code>[]Object</code>\nThe slice to reverse\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]Object</code>\nThe reversed slice\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice \"one\" \"two\" \"three\" }}\nThe reversed list is: {{ array.Reverse $list }}\n</code></pre>\n\n<pre>\nThe reversed list is: [three two one]\n</pre>\n</p>\n<p>In this example, the <code>Reverse</code> method is utilized within the template to reverse the order of the list, resulting in the output <code>The reversed list is: [three two one]</code>.</p>"},{"location":"guides/components/templates/functions.html#arraysort","title":"array.Sort","text":"<p>Description</p>\n<p>The <code>Sort</code> method in the <code>array</code> space sorts a slice of elements based on a specified key. It takes two <code>Object</code> parameters: the key to sort by and the slice to sort. It returns a new sorted slice and an error if the operation fails.</p>\n<p>Signature\n<pre><code>Sort(key String, list []Object) []Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>key</code>\n<code>String</code>\nThe key to sort by\n\n\n<code>list</code>\n<code>[]Object</code>\nThe slice to sort\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]Object</code>\nThe sorted slice\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice (dict \"name\" \"Alice\" \"age\" 30) (dict \"name\" \"Bob\" \"age\" 25) (dict \"name\" \"Charlie\" \"age\" 35) }}\nThe sorted list by age is: {{ array.Sort \"age\" $list }}\n</code></pre>\n\n<pre>\nThe sorted list by age is: [{name:Bob age:25} {name:Alice age:30} {name:Charlie age:35}]\n</pre>\n</p>\n<p>In this example, the <code>Sort</code> method is utilized within the template to sort the list of dictionaries by the key \"age\", resulting in the output <code>The sorted list by age is: [{name:Bob age:25} {name:Alice age:30} {name:Charlie age:35}]</code>.</p>"},{"location":"guides/components/templates/functions.html#arrayflatten","title":"array.Flatten","text":"<p>Description</p>\n<p>The <code>Flatten</code> method in the <code>array</code> space flattens a nested slice or array up to a specified depth. It takes two parameters: the slice or array to flatten and the depth to which to flatten it. It returns a new flattened slice and an error if the operation fails.</p>\n<p>Signature\n<pre><code>Flatten(list []Object, depth Int) []Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>list</code>\n<code>[]Object</code>\nThe slice or array to flatten\n\n\n<code>depth</code>\n<code>Int</code>\nThe depth to which to flatten\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]Object</code>\nThe flattened slice\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $nestedList := slice (slice 1 2) (slice 3 (slice 4 5)) 6 }}\nThe flattened list is: {{ array.Flatten $nestedList 1 }}\n</code></pre>\n\n<pre>\nThe flattened list is: [1 2 3 [4 5] 6]\n</pre>\n</p>\n<p>In this example, the <code>Flatten</code> method is utilized within the template to flatten the nested list to a depth of 1. The resulting output is <code>The flattened list is: [1 2 3 [4 5] 6]</code>.</p>"},{"location":"guides/components/templates/functions.html#arrayisfirst","title":"array.IsFirst","text":"<p>Description</p>\n<p>The <code>IsFirst</code> method in the <code>array</code> space checks if a given index is the first position (i.e., index 0) in a slice. It takes two parameters: the index and the slice to check. It returns <code>true</code> if the index is 0, otherwise <code>false</code>.</p>\n<p>Signature\n<pre><code>IsFirst(index Int, slice []Object) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>index</code>\n<code>Int</code>\nThe index to check\n\n\n<code>slice</code>\n<code>[]Object</code>\nThe slice to check\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n`true` if the index is 0, else `false`\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice \"a\" \"b\" \"c\" }}\nIs index 0 the first? {{ array.IsFirst 0 $list }}\n</code></pre>\n\n<pre>\nIs index 0 the first? true\n</pre>\n</p>\n<p>In this example, the <code>IsFirst</code> method is utilized within the template to check if index 0 is the first position in the list, resulting in the output <code>Is index 0 the first? true</code>.</p>"},{"location":"guides/components/templates/functions.html#arrayislast","title":"array.IsLast","text":"<p>Description</p>\n<p>The <code>IsLast</code> method in the <code>array</code> space checks if a given index is the last position in a slice. It takes two parameters: the index and the slice to check. It returns <code>true</code> if the index is the last position, otherwise <code>false</code>.</p>\n<p>Signature\n<pre><code>IsLast(index Int, slice []Object) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>index</code>\n<code>Int</code>\nThe index to check\n\n\n<code>slice</code>\n<code>[]Object</code>\nThe slice to check\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n`true` if the index is the last position, else `false`\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice \"a\" \"b\" \"c\" }}\nIs index 2 the last? {{ array.IsLast 2 $list }}\n</code></pre>\n\n<pre>\nIs index 2 the last? true\n</pre>\n</p>\n<p>In this example, the <code>IsLast</code> method is utilized within the template to check if index 2 is the last position in the list, resulting in the output <code>Is index 2 the last? true</code>.</p>"},{"location":"guides/components/templates/functions.html#arrayhaselements","title":"array.HasElements","text":"<p>Description</p>\n<p>The <code>HasElements</code> method in the <code>array</code> space checks if a slice contains any elements. It takes one parameter: the slice to check. It returns <code>true</code> if the slice has more than 0 elements, otherwise <code>false</code>.</p>\n<p>Signature\n<pre><code>HasElements(slice []Object) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>slice</code>\n<code>[]Object</code>\nThe slice to check\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n`true` if the slice has elements, else `false`\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice \"a\" \"b\" \"c\" }}\nDoes the list have elements? {{ array.HasElements $list }}\n</code></pre>\n\n<pre>\nDoes the list have elements? true\n</pre>\n</p>\n<p>In this example, the <code>HasElements</code> method is utilized within the template to check if the list has any elements, resulting in the output <code>Does the list have elements? true</code>.</p>"},{"location":"guides/components/templates/functions.html#arraycount","title":"array.Count","text":"<p>Description</p>\n<p>The <code>Count</code> method in the <code>array</code> space returns the number of elements in a slice. It takes one parameter: the slice to count. It returns the count of elements as an <code>int</code>.</p>\n<p>Signature\n<pre><code>Count(slice []Object) Int\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>slice</code>\n<code>[]Object</code>\nThe slice to count\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Int</code>\nThe number of elements in the slice\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice \"a\" \"b\" \"c\" }}\nThe number of elements is: {{ array.Count $list }}\n</code></pre>\n\n<pre>\nThe number of elements is: 3\n</pre>\n</p>\n<p>In this example, the <code>Count</code> method is utilized within the template to count the number of elements in the list, resulting in the output <code>The number of elements is: 3</code>.</p>"},{"location":"guides/components/templates/functions.html#arrayfirst","title":"array.First","text":"<p>Description</p>\n<p>The <code>First</code> method in the <code>array</code> space returns the first element of a slice. It takes one parameter: the slice to check. It returns the first element if the slice is not empty; otherwise, it returns <code>nil</code>.</p>\n<p>Signature\n<pre><code>First(slice []Object) Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>slice</code>\n<code>[]Object</code>\nThe slice to check\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Object</code>\nThe first element of the slice, or `nil` if the slice is empty\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice \"a\" \"b\" \"c\" }}\nThe first element is: {{ array.First $list }}\n</code></pre>\n\n<pre>\nThe first element is: a\n</pre>\n</p>\n<p>In this example, the <code>First</code> method is utilized within the template to get the first element of the list, resulting in the output <code>The first element is: a</code>.</p>"},{"location":"guides/components/templates/functions.html#arraylast","title":"array.Last","text":"<p>Description</p>\n<p>The <code>Last</code> method in the <code>array</code> space returns the last element of a slice. It takes one parameter: the slice to check. It returns the last element if the slice is not empty; otherwise, it returns <code>nil</code>.</p>\n<p>Signature\n<pre><code>Last(slice []Object) Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>slice</code>\n<code>[]Object</code>\nThe slice to check\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Object</code>\nThe last element of the slice, or `nil` if the slice is empty\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice \"a\" \"b\" \"c\" }}\nThe last element is: {{ array.Last $list }}\n</code></pre>\n\n<pre>\nThe last element is: c\n</pre>\n</p>\n<p>In this example, the <code>Last</code> method is utilized within the template to get the last element of the list, resulting in the output <code>The last element is: c</code>.</p>"},{"location":"guides/components/templates/functions.html#arraycontains","title":"array.Contains","text":"<p>Description</p>\n<p>The <code>Contains</code> method in the <code>array</code> space checks if a slice contains a specified value. For slices of struct types, it searches for the value in a specified field. It takes three parameters: the slice to search, the key (if searching within structs), and the value to search for. It returns <code>true</code> if the value is found; otherwise, <code>false</code>.</p>\n<p>Signature\n<pre><code>Contains(slice []Object, key String, value Object) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>slice</code>\n<code>[]Object</code>\nThe slice to search\n\n\n<code>key</code>\n<code>String</code>\nThe field name to search within structs (can be empty)\n\n\n<code>value</code>\n<code>Object</code>\nThe value to search for\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n`true` if the value is found in the slice, else `false`\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice (struct \"Name\" \"Alice\") (struct \"Name\" \"Bob\") }}\nDoes the list contain \"Alice\"? {{ array.Contains $list \"Name\" \"Alice\" }}\n</code></pre>\n\n<pre>\nDoes the list contain \"Alice\"? true\n</pre>\n</p>\n<p>In this example, the <code>Contains</code> method is utilized within the template to check if the list contains an item where the \"Name\" field is \"Alice\", resulting in the output <code>Does the list contain \"Alice\"? true</code>.</p>"},{"location":"guides/components/templates/functions.html#arrayfind","title":"array.Find","text":"<p>Description</p>\n<p>The <code>Find</code> method in the <code>array</code> space searches for an item in a slice that matches a specified value. For slices of struct types, it searches for the value in a specified field. It takes three parameters: the slice to search, the key (if searching within structs), and the value to find. It returns the found item or <code>nil</code> if no match is found.</p>\n<p>Signature\n<pre><code>Find(slice []Object, key String, value Object) Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>slice</code>\n<code>[]Object</code>\nThe slice to search\n\n\n<code>key</code>\n<code>String</code>\nThe field name to search within structs (can be empty)\n\n\n<code>value</code>\n<code>Object</code>\nThe value to find\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Object</code>\nThe found item or `nil` if no match is found\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $list := slice (struct \"Name\" \"Alice\") (struct \"Name\" \"Bob\") }}\nThe item with Name \"Alice\" is: {{ array.Find $list \"Name\" \"Alice\" }}\n</code></pre>\n\n<pre>\nThe item with Name \"Alice\" is: {Name: Alice}\n</pre>\n</p>\n<p>In this example, the <code>Find</code> method is utilized within the template to locate an item where the \"Name\" field is \"Alice\", resulting in the output <code>The item with Name \"Alice\" is: {Name: Alice}</code>.</p>"},{"location":"guides/components/templates/functions.html#arrayfilter","title":"array.Filter","text":"<p>Description</p>\n<p>The <code>Filter</code> method in the <code>array</code> space filters a slice or a single struct based on a specified path and value. It returns a slice of items that match the criteria. It takes three parameters: the data to filter, the path to the field (for nested structs), and the value to filter by. It returns a slice of items that match the criteria.</p>\n<p>Signature\n<pre><code>Filter(data []Object, path String, value String) []Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>data</code>\n<code>Object</code>\nThe slice or struct to filter\n\n\n<code>path</code>\n<code>String</code>\nThe path to the field to filter by (e.g., \"Field.SubField\")\n\n\n<code>value</code>\n<code>String</code>\nThe value to filter by\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]Object</code>\nA slice of items that match the filter criteria\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $data := slice (struct \"Info\" (struct \"Name\" \"Alice\")) (struct \"Info\" (struct \"Name\" \"Bob\")) }}\nFiltered items where Info.Name is \"Alice\": {{ array.Filter $data \"Info.Name\" \"Alice\" }}\n</code></pre>\n\n<pre>\nFiltered items where Info.Name is \"Alice\": [{Info: {Name: Alice}}]\n</pre>\n</p>\n<p>In this example, the <code>Filter</code> method is utilized within the template to filter items where the \"Info.Name\" field is \"Alice\", resulting in the output <code>Filtered items where Info.Name is \"Alice\": [{Info: {Name: Alice}}]</code>.</p>"},{"location":"guides/components/templates/functions.html#map","title":"Map","text":""},{"location":"guides/components/templates/functions.html#mapdictionary","title":"map.Dictionary","text":"<p>Description</p>\n<p>The <code>Dictionary</code> method creates a map from a series of key-value pairs provided as arguments. It expects an even number of arguments; the first argument is the key and the second is the value. The method converts the keys to strings and handles values that might be pointers.</p>\n<p>Signature\n<pre><code>Dictionary(v ...Object) Map[String, Object]\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>v</code>\n<code>...Object</code>\nA series of alternating keys and values to be converted into a map.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Map[String, Object]</code>\nA map where keys are strings and values are the corresponding values provided.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $dict := map.Dictionary \"key1\" \"value1\" \"key2\" \"value2\" }}\nKey1: {{ $dict.key1 }}\nKey2: {{ $dict.key2 }}\n</code></pre>\n\n<pre>\nKey1: value1\nKey2: value2\n</pre>\n</p>\n<p>In this example, the <code>Dictionary</code> method is used to create a map from key-value pairs provided in the arguments.</p>"},{"location":"guides/components/templates/functions.html#maphas","title":"map.Has","text":"<p>Description</p>\n<p>The <code>Has</code> method checks if a given key or value exists within a map or slice. For maps, it checks if the specified key exists. For slices and arrays, it checks if the specified value exists within the array.</p>\n<p>Signature\n<pre><code>Has(in Map[String, Object], key String) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>Map[String, Object]</code>\nThe map, slice, or array to search within.\n\n\n<code>key</code>\n<code>String</code>\nThe key to check in the map, or the value to check in the slice/array.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n<code>true</code> if the key or value exists; otherwise, <code>false</code>.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $map := map.Dictionary \"key1\" \"value1\" \"key2\" \"value2\" }}\nKey exists: {{ map.Has $map \"key1\" }}\nValue exists: {{ map.Has $map \"value2\" }}\n</code></pre>\n\n<pre>\nKey exists: true\nValue exists: true\n</pre>\n</p>\n<p>In this example, the <code>Has</code> method is used to check for the existence of a key and a value in a map. It returns <code>true</code> for both checks.</p>"},{"location":"guides/components/templates/functions.html#maphaskey","title":"map.HasKey","text":"<p>Description</p>\n<p>The <code>HasKey</code> method checks if a given key exists in a map. It returns <code>true</code> if the key is present in the map; otherwise, it returns <code>false</code>.</p>\n<p>Signature\n<pre><code>HasKey(m Map[String, Object], key String) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>m</code>\n<code>Map[String, Object]</code>\nThe map to check for the presence of the key.\n\n\n<code>key</code>\n<code>String</code>\nThe key to check in the map.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n<code>true</code> if the key exists in the map; otherwise, <code>false</code>.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $map := map.Dictionary \"key1\" \"value1\" \"key2\" \"value2\" }}\nKey1 exists: {{ map.HasKey $map \"key1\" }}\nKey3 exists: {{ map.HasKey $map \"key3\" }}\n</code></pre>\n\n<pre>\nKey1 exists: true\nKey3 exists: false\n</pre>\n</p>\n<p>In this example, the <code>Dictionary</code> method is used to create a map from key-value pairs provided in the arguments.</p>"},{"location":"guides/components/templates/functions.html#mapkeys","title":"map.Keys","text":"<p>Description</p>\n<p>The <code>Keys</code> method retrieves all keys from one or more maps. If no maps are provided, it returns an error.</p>\n<p>Signature\n<pre><code>Keys(in ...Map[String, Object]) []String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>Map[String, Object]</code>\nOne or more maps from which to extract keys.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]String</code>\nA slice of keys extracted from the maps.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $map1 := map.Dictionary \"key1\" \"value1\" \"key2\" \"value2\" }}\n{{ $map2 := map.Dictionary \"key3\" \"value3\" \"key4\" \"value4\" }}\nKeys: {{ map.Keys $map1 $map2 }}\n</code></pre>\n\n<pre>\nKeys: [key1 key2 key3 key4]\n</pre>\n</p>\n<p>In this example, the <code>Keys</code> method retrieves all keys from the provided maps.</p>"},{"location":"guides/components/templates/functions.html#mapvalues","title":"map.Values","text":"<p>Description</p>\n<p>The <code>Values</code> method retrieves all values from one or more maps. If no maps are provided, it returns an error.</p>\n<p>Signature\n<pre><code>Values(in ...Map[String, Object]) []Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>Map[String, Object]</code>\nOne or more maps from which to extract values.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>[]Object</code>\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $map1 := map.Dictionary \"key1\" \"value1\" \"key2\" \"value2\" }}\n{{ $map2 := map.Dictionary \"key3\" \"value3\" \"key4\" \"value4\" }}\nValues: {{ map.Values $map1 $map2 }}\n</code></pre>\n\n<pre>\nValues: [value1 value2 value3 value4]\n</pre>\n</p>\n<p>In this example, the <code>Values</code> method retrieves all values from the provided maps.</p>"},{"location":"guides/components/templates/functions.html#mapmerge","title":"map.Merge","text":"<p>Description</p>\n<p>The <code>Merge</code> method combines multiple source maps into a destination map. If a key exists in multiple source maps, the value from the last map is used.</p>\n<p>Signature\n<pre><code>Merge(dst Map[String, Object], srcs ...Map[String, Object]) Map[String, Object]\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>dst</code>\n<code>Map[String, Object]</code>\nThe destination map to which source maps are merged.\n\n\n<code>srcs</code>\n<code>...Map[String, Object]</code>\nOne or more source maps to merge into the destination map.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Map[String, Object]</code>\nThe merged map containing all key-value pairs from the source maps.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $map1 := map.Dictionary \"key1\" \"value1\" \"key2\" \"value2\" }}\n{{ $map2 := map.Dictionary \"key2\" \"updatedValue2\" \"key3\" \"value3\" }}\n{{ $merged := map.Merge $map1 $map2 }}\nMerged: {{ $merged.key1 }}, {{ $merged.key2 }}, {{ $merged.key3 }}\n</code></pre>\n\n<pre>\nMerged: value1, updatedValue2, value3\n</pre>\n</p>\n<p>In this example, the <code>Merge</code> method combines the key-value pairs from <code>$map1</code> and <code>$map2</code>, with the value from <code>$map2</code> overwriting any matching keys.</p>"},{"location":"guides/components/templates/functions.html#mapomit","title":"map.Omit","text":"<p>Description</p>\n<p>The <code>Omit</code> method creates a new map by excluding specified keys from the original map.</p>\n<p>Signature\n<pre><code>Omit(in Map[String, Object], keys ...String) Map[String, Object]\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>Map[String, Object]</code>\nThe original map from which to omit keys.\n\n\n<code>keys</code>\n<code>...String</code>\nThe keys to omit from the original map.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Map[String, Object]</code>\nA new map with specified keys omitted.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $map := map.Dictionary \"key1\" \"value1\" \"key2\" \"value2\" \"key3\" \"value3\" }}\n{{ $omitted := map.Omit $map \"key2\" }}\nOmitted: {{ $omitted.key1 }}, {{ $omitted.key3 }}\n</code></pre>\n\n<pre>\nOmitted: value1, value3\n</pre>\n</p>\n<p>In this example, the <code>Omit</code> method creates a new map excluding <code>key2</code> from the original map.</p>"},{"location":"guides/components/templates/functions.html#mappick","title":"map.Pick","text":"<p>Description</p>\n<p>The <code>Pick</code> method creates a new map containing only the specified keys from the original map.</p>\n<p>Signature\n<pre><code>Pick(in Map[String, Object], keys ...String) Map[String, Object]\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>Map[String, Object]</code>\nThe original map from which to pick keys.\n\n\n<code>keys</code>\n<code>[]String</code>\nThe keys to pick from the original map.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Map[String, Object]</code>\nA new map containing only the specified keys.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $map := map.Dictionary \"key1\" \"value1\" \"key2\" \"value2\" \"key3\" \"value3\" }}\n{{ $picked := map.Pick $map \"key1\" \"key3\" }}\nPicked: {{ $picked.key1 }}, {{ $picked.key3 }}\n</code></pre>\n\n<pre>\nPicked: value1, value3\n</pre>\n</p>\n\n<p>In this example, the <code>Pick</code> method creates a new map containing only <code>key1</code> and <code>key3</code> from the original map.</p>"},{"location":"guides/components/templates/functions.html#convert","title":"Convert","text":""},{"location":"guides/components/templates/functions.html#converttobool","title":"convert.ToBool","text":"<p>Description</p>\n<p>The <code>ToBool</code> method in the <code>convert</code> space converts an input value to a boolean. It takes one parameter of any type and returns <code>true</code> or <code>false</code> based on the input's value. The method handles various types including boolean, string, integer, and float, converting them to a boolean representation.</p>\n<p>Signature\n<pre><code>ToBool(in Object) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>Object</code>\nThe input value to convert\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\nThe boolean representation of the input\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $input := \"true\" }}\nThe boolean value of \"{{ $input }}\" is {{ convert.ToBool $input }}\n</code></pre>\n\n<pre>\nThe boolean value of \"true\" is true\n</pre>\n</p>\n<p>In this example, the <code>ToBool</code> method is utilized within the template to convert the string <code>\"true\"</code> to its boolean representation, resulting in the output <code>The boolean value of \"true\" is true</code>.</p>"},{"location":"guides/components/templates/functions.html#converttostring","title":"convert.ToString","text":"<p>Description</p>\n<p>The <code>ToString</code> method in the <code>convert</code> space converts an input value to a string. It takes one parameter of any type and returns its string representation. The method handles various types including string, <code>fmt.Stringer</code>, byte slice, and others by converting them appropriately.</p>\n<p>Signature\n<pre><code>ToString(in Object) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>Object</code>\nThe input value to convert\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe string representation of the input\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $input := 123 }}\nThe string value of {{ $input }} is \"{{ convert.ToString $input }}\"\n</code></pre>\n\n<pre>\nThe string value of 123 is \"123\"\n</pre>\n</p>\n<p>In this example, the <code>ToString</code> method is utilized within the template to convert the integer <code>123</code> to its string representation, resulting in the output <code>The string value of 123 is \"123\"</code>.</p>"},{"location":"guides/components/templates/functions.html#converttoint64","title":"convert.ToInt64","text":"<p>Description</p>\n<p>The <code>ToInt64</code> method in the <code>convert</code> space converts an input value to an <code>int64</code>. It takes one parameter of any type and returns its <code>int64</code> representation or an error if the conversion fails.</p>\n<p>Signature\n<pre><code>ToInt64(v Object) Int64\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>v</code>\n<code>Object</code>\nThe input value to convert\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Int64</code>\nThe int64 representation of the input\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $input := \"123\" }}\nThe int64 value of {{ $input }} is {{ convert.ToInt64 $input }}\n</code></pre>\n\n<pre>\nThe int64 value of 123 is 123\n</pre>\n</p>\n<p>In this example, the <code>ToInt64</code> method is utilized within the template to convert the string <code>\"123\"</code> to its int64 representation, resulting in the output <code>The int64 value of 123 is 123</code>.</p>"},{"location":"guides/components/templates/functions.html#converttoint","title":"convert.ToInt","text":"<p>Description</p>\n<p>The <code>ToInt</code> method in the <code>convert</code> space converts an input value to an int. It takes one parameter of any type and attempts to convert it to an int. It returns the result along with any conversion error encountered.</p>\n<p>Signature\n<pre><code>ToInt(in Object) Int\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>Object</code>\nThe input value to convert\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Int</code>\nThe int representation of the input\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $input := \"123\" }}\nThe int value of {{ $input }} is {{ convert.ToInt $input }}\n</code></pre>\n\n<pre>\nThe int value of 123 is 123\n</pre>\n</p>\n<p>In this example, the <code>ToInt</code> method is utilized within the template to convert the string <code>\"123\"</code> to its int representation, resulting in the output <code>The int value of 123 is 123</code>.</p>"},{"location":"guides/components/templates/functions.html#converttoint64s","title":"convert.ToInt64s","text":"<p>Description</p>\n<p>The <code>ToInt64s</code> method in the <code>convert</code> space converts a variadic list of input values to a slice of int64. It takes multiple parameters of any type and attempts to convert them to int64 values. It returns the slice of int64 values along with any conversion error encountered.</p>\n<p>Signature\n<pre><code>ToInt64s(in ...Object) []Int64\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>...Object</code>\nThe input values to convert\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Int64</code>\nThe slice of int64 representations of the inputs\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $input1 := \"123\" }}\n{{ $input2 := 456 }}\n{{ $result, $err := convert.ToInt64s $input1 $input2 }}\nThe int64 values are {{ $result }}\n</code></pre>\n\n<pre>\nThe int64 values are [123 456]\n</pre>\n</p>\n<p>In this example, the <code>ToInt64s</code> method is utilized within the template to convert the string <code>\"123\"</code> and the integer <code>456</code> to their int64 representations, resulting in the output <code>The int64 values are [123 456]</code>.</p>"},{"location":"guides/components/templates/functions.html#converttoints","title":"convert.ToInts","text":"<p>Description</p>\n<p>The <code>ToInts</code> method in the <code>convert</code> space converts a variadic list of input values to a slice of int. It takes multiple parameters of any type and attempts to convert them to int values. It returns the slice of int values along with any conversion error encountered.</p>\n<p>Signature\n<pre><code>ToInts(in ...Object) []Int64\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>...Object</code>\nThe input values to convert\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]Int64</code>\nThe slice of int representations of the inputs\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $input1 := \"123\" }}\n{{ $input2 := 456 }}\n{{ $result, $err := convert.ToInts $input1 $input2 }}\nThe int values are {{ $result }}\n</code></pre>\n\n<pre>\nThe int values are [123 456]\n</pre>\n</p>\n<p>In this example, the <code>ToInts</code> method is utilized within the template to convert the string <code>\"123\"</code> and the integer <code>456</code> to their int representations, resulting in the output <code>The int values are [123 456]</code>.</p>"},{"location":"guides/components/templates/functions.html#converttofloat64","title":"convert.ToFloat64","text":"<p>Description</p>\n<p>The <code>ToFloat64</code> method in the <code>convert</code> space converts an input value to a float64. It attempts to convert various types of inputs, including strings, integers, unsigned integers, floating-point numbers, and booleans, to their float64 representations. It returns the float64 value along with any conversion error encountered.</p>\n<p>Signature\n<pre><code>ToFloat64(v Object) Float64\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>v</code>\n<code>Object</code>\nThe input value to convert\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Float64</code>\nThe float64 representation of the input\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $input := \"123.45\" }}\n{{ $result, $err := convert.ToFloat64 $input }}\nThe float64 value is {{ $result }}\n</code></pre>\n\n<pre>\nThe float64 value is 123.45\n</pre>\n</p>\n<p>In this example, the <code>ToFloat64</code> method is utilized within the template to convert the string <code>\"123.45\"</code> to its float64 representation, resulting in the output <code>The float64 value is 123.45</code>.</p>"},{"location":"guides/components/templates/functions.html#data","title":"Data","text":""},{"location":"guides/components/templates/functions.html#datadefault","title":"data.Default","text":"<p>Description</p>\n<p>The <code>Default</code> method returns the given <code>defaultValue</code> if the <code>value</code> is considered \"empty\" based on its type. It checks various types and their default \"empty\" values, such as null, zero for numeric types, empty strings, slices, maps, etc. If the value is empty, it returns <code>defaultValue</code>; otherwise, it returns the <code>value</code> itself.</p>\n<p>Signature\n<pre><code>Default(value Object, defaultValue Object) Object\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>value</code>\n<code>Object</code>\nThe value to check and potentially return.\n\n\n<code>defaultValue</code>\n<code>Object</code>\nThe value to return if <code>value</code> is considered empty.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Object</code>\nThe <code>value</code> if it is not empty; otherwise, <code>defaultValue</code>.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $value := \"\" }}\n{{ $default := \"default\" }}\nThe result is {{ data.Default $value $default }}\n</code></pre>\n\n<pre>\nThe result is default\n</pre>\n</p>\n<p>In this example, the <code>Default</code> method is used within the template to return \"default\" because the <code>value</code> is an empty string.</p>"},{"location":"guides/components/templates/functions.html#dataisdefault","title":"data.IsDefault","text":"<p>Description</p>\n<p>The <code>IsDefault</code> method checks if a given value is considered \"empty\" based on its type. It returns <code>true</code> if the value is nil or has a default \"empty\" state for its type (such as zero for numeric types, empty strings, slices, maps, etc.). Otherwise, it returns <code>false</code>.</p>\n<p>Signature\n<pre><code>IsDefault(value Object) Boolean\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>value</code>\n<code>Object</code>\nThe value to check if it is in its default state.\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>Boolean</code>\n<code>true</code> if the value is in its default state; otherwise, <code>false</code>.\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $value := 0 }}\nThe value is default: {{ data.IsDefault $value }}\n</code></pre>\n\n<pre>\nThe value is default: true\n</pre>\n</p>\n<p>In this example, the <code>IsDefault</code> method checks if <code>value</code> is <code>0</code>, which is considered its default state for integers. The result is <code>true</code> since <code>0</code> is the default value for integers.</p>"},{"location":"guides/components/templates/functions.html#base64","title":"Base64","text":""},{"location":"guides/components/templates/functions.html#base64encode","title":"base64.Encode","text":"<p>Description</p>\n<p>The <code>Encode</code> method in the <code>base64</code> space encodes a byte array into a base64 encoded string. This method uses the standard base64 encoding scheme to convert the input bytes into a string representation.</p>\n<p>Signature\n<pre><code>Encode(in []Byte) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>[]Byte</code>\nThe input byte array to encode\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe base64 encoded string\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $input := []byte \"Hello, World!\" }}\n{{ $encoded, $err := base64.Encode $input }}\nThe base64 encoded string is {{ $encoded }}\n</code></pre>\n\n<pre>\nThe base64 encoded string is SGVsbG8sIFdvcmxkIQ==\n</pre>\n</p>\n<p>In this example, the <code>Encode</code> method is utilized within the template to convert the byte array <code>\"Hello, World!\"</code> to its base64 encoded string representation, resulting in the output <code>The base64 encoded string is SGVsbG8sIFdvcmxkIQ==</code>.</p>"},{"location":"guides/components/templates/functions.html#base64decode","title":"base64.Decode","text":"<p>Description</p>\n<p>The <code>Decode</code> method in the <code>base64</code> space decodes a base64 encoded string into a byte array. This method first attempts to decode the input string using the standard base64 encoding scheme. If it fails, it attempts to decode using the URL base64 encoding scheme.</p>\n<p>Signature\n<pre><code>Decode(in String) []Byte\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>in</code>\n<code>String</code>\nThe base64 encoded string to decode\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>[]Byte</code>\nThe decoded byte array\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $encoded := \"SGVsbG8sIFdvcmxkIQ==\" }}\n{{ $decoded, $err := base64.Decode $encoded }}\nThe decoded byte array is {{ $decoded }}\n</code></pre>\n\n<pre>\nThe decoded byte array is Hello, World!\n</pre>\n</p>\n<p>In this example, the <code>Decode</code> method is utilized within the template to convert the base64 encoded string <code>\"SGVsbG8sIFdvcmxkIQ==\"</code> back to its original byte array representation, resulting in the output <code>The decoded byte array is Hello, World!</code>.</p>"},{"location":"guides/components/templates/functions.html#json","title":"JSON","text":""},{"location":"guides/components/templates/functions.html#jsontojson","title":"json.ToJson","text":"<p>Description</p>\n<p>The <code>ToJson</code> method in the <code>json</code> space converts a Go data structure into its JSON string representation. This method uses the standard JSON encoding scheme to marshal the input data into a JSON string.</p>\n<p>Signature\n<pre><code>ToJson(data Object) String\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>data</code>\n<code>Object</code>\nThe Go data structure to convert to JSON\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe JSON string representation of the data\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $data := dict \"name\" \"John\" \"age\" 30 }}\n{{ $jsonStr, $err := json.ToJson $data }}\nThe JSON representation is {{ $jsonStr }}\n</code></pre>\n\n<pre>\nThe JSON representation is {\"name\":\"John\",\"age\":30}\n</pre>\n</p>\n<p>In this example, the <code>ToJson</code> method is utilized within the template to convert the dictionary <code>{\"name\": \"John\", \"age\": 30}</code> into its JSON string representation, resulting in the output <code>The JSON representation is {\"name\":\"John\",\"age\":30}</code>.</p>"},{"location":"guides/components/templates/functions.html#jsonprettifyjson","title":"json.PrettifyJSON","text":"<p>Description</p>\n<p>The <code>PrettifyJSON</code> method in the <code>json</code> space takes a JSON string and formats it into a human-readable, pretty-printed JSON string with indentation. This method first unmarshals the input JSON string into an intermediate data structure and then marshals it back into a pretty-printed JSON string.</p>\n<p>Signature\n<pre><code>PrettifyJSON(jsonString String) string\n</code></pre></p>\n<p>Parameters</p>\n\n\n\nName\nType\nDescription\n\n\n\n\n<code>jsonString</code>\n\nThe JSON string to prettify\n\n\n\n<p>Return</p>\n\n\n\nType\nDescription\n\n\n\n\n<code>String</code>\nThe pretty-printed JSON string\n\n\n\n\n<p>Example</p>\n<p><pre><code>{{ $jsonStr := \"{\\\"name\\\":\\\"John\\\",\\\"age\\\":30}\" }}\n{{ $prettyJsonStr, $err := json.PrettifyJSON $jsonStr }}\nThe pretty-printed JSON is {{ $prettyJsonStr }}\n</code></pre>\n\n<pre>\nThe pretty-printed JSON is {\n\"name\": \"John\",\n\"age\": 30\n}\n</pre>\n</p>\n<p>In this example, the <code>PrettifyJSON</code> method is utilized within the template to convert the JSON string <code>{\"name\":\"John\",\"age\":30}</code> into a pretty-printed JSON string, resulting in the output <code>The pretty-printed JSON is {\n\"name\": \"John\",\n\"age\": 30\n}</code>.</p>\n\n\n\n<p>\n</p>"},{"location":"guides/components/templates/syntax.html","title":"Syntax","text":""},{"location":"guides/components/templates/syntax.html#overview","title":"Overview","text":"<p>Template Design provides a robust and flexible syntax for creating templates. This document outlines the fundamental components and structures used in template design, including functions, variables, objects, maps, arrays, conditions, loops, actions, delimiters, and comments.</p>"},{"location":"guides/components/templates/syntax.html#the-basics","title":"The basics","text":"<p>Templates are defined using a combination of static text and dynamic expressions. Dynamic expressions are enclosed within delimiters and can include variables, functions, pipelines, and more.</p>"},{"location":"guides/components/templates/syntax.html#delimiters","title":"Delimiters","text":"<p>Delimiters enclose dynamic expressions and commands within a template. <code>{{ }}</code> delimiters used for expressions and for statements.</p> <pre><code>{{ expression }}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#trim-markers","title":"Trim Markers","text":"<p>The hyphen trim marker is used to remove whitespace before or after a delimiter. It can be placed immediately inside a delimiter to trim spaces.</p> <pre><code>{{- $variable }}  &lt;!-- Trims space before the variable --&gt;\n{{ $variable -}}  &lt;!-- Trims space after the variable --&gt;\n{{- $variable -}} &lt;!-- Trims space before and after the variable --&gt;\n</code></pre>"},{"location":"guides/components/templates/syntax.html#comments","title":"Comments","text":"<p>Comments provide a way to include explanatory notes within a template. They are ignored during processing.</p> <pre><code>{{/* This is a comment */}}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#context","title":"Context","text":"<p>Context refers to the data available within a template. It includes variables, objects, and functions that can be referenced and manipulated. For more details visit 6251a85a-47d0-11ee-be56-0242ac120002:_:context.html::47e12ce4c85652f0d1c788a7e9563eef <p>In Pars templates, the dot (<code>.</code>) represents the current context, which is the data passed to the template. The context can be a simple variable, a complex object, or even a collection of objects. The dot is used to access fields and methods of the current context.</p> <pre><code>{{ .Workspace.Name }}\n</code></pre> <p>Context Scope</p> <p>The context (<code>.</code>) is scoped to the block it is in. For example, within a range or with block, the context changes to the specific item being iterated over or the specific part of the data structure being focused on.</p> <pre><code>{{ range .workspace.projects }}\n  {{ .title }} &lt;!-- Within this block, . refers to each project --&gt;\n{{ end }}\n\n{{ .workspace.name }} &lt;!-- Outside the block, . refers to the root context --&gt;\n</code></pre> <p>Assigning Context to a Variable</p> <p>You can assign the current context to a variable for easier access or manipulation:</p> <pre><code>{{ $context := .Workspace.Project }}\nProject Title: {{ $context.Title }}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#functions","title":"Functions","text":"<p>Functions are predefined operations that can be used within templates to manipulate data, format output, and perform various tasks. For more details visit 6251a85a-47d0-11ee-be56-0242ac120002:_:functions.html::14e3a68c5f82b53d1cf0d4b15e8eb5b1 <pre><code>{{ console.print \"Hello World\" }}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#arguments","title":"Arguments","text":"<p>Functions can take arguments, which are values or expressions passed to the function. Arguments are enclosed in parentheses and separated by commas.</p> <pre><code>{{ functionName arg1 arg2 }}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#pipelines","title":"Pipelines","text":"<p>Pipelines allow chaining of functions and operations, passing the output of one function as the input to the next. They are denoted by the <code>|</code> character.</p> <pre><code>{{ variable | function1 | function2 }}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#variables","title":"Variables","text":"<p>Variables store values that can be referenced and manipulated within a template.</p> <pre><code>{{ $variable := \"value\" }}\n{{ $variable }}\n</code></pre> <p>Variable scope Variables have a scope, which determines where they can be accessed within the template. Scope can be local (within a block) or global (across the entire template).</p> <pre><code>{{ $global := \"Global Scope\" }}\n{{ range $i, $item := .Items }}\n  {{ $local := \"Local Scope\" }}\n  {{ $global = \"Modified Global\" }}\n  {{ $local = \"Modified Local\" }}\n  {{ $i }}: {{ $item }}, Global: {{ $global }}, Local: {{ $local }}\n{{ end }}\n</code></pre> <p>Initial Assignment</p> <p>A variable is initially assigned a value using the <code>:=</code> operator. This creates a new variable and assigns it a value within the current scope.</p> <pre><code>{{ $greeting := \"Hello, World!\" }}\n{{ $greeting }}  &lt;!-- Output: Hello, World! --&gt;\n</code></pre> <p>Re-assignment</p> <p>A variable can be re-assigned a new value using the <code>=</code> operator. This updates the existing variable's value within the current scope.</p> <pre><code>{{ $greeting := \"Hello, World!\" }}\n{{ $greeting = \"Hi, Universe!\" }}\n{{ $greeting }}  &lt;!-- Output: Hi, Universe! --&gt;\n</code></pre>"},{"location":"guides/components/templates/syntax.html#objects","title":"Objects","text":"<p>Objects represent structured data and can be accessed using dot notation.</p> <pre><code>{{ .Object.Field }}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#maps","title":"Maps","text":"<p>Maps are collections of key-value pairs, where each key is unique.</p> <pre><code>{{ $map := map.Dictionary \"key1\" \"value1\" \"key2\" \"value2\" }}\n{{ $map.key1 }}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#arrays","title":"Arrays","text":"<p>Arrays are ordered collections of elements, accessed by their index.</p> <pre><code>{{ $array := array.Slice  \"item1\" \"item2\" \"item3\" }}\n{{ index $array 0 }}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#conditions","title":"Conditions","text":"<p>Conditions allow for branching logic within templates, enabling different outputs based on specified criteria.</p> <pre><code>{{ if condition }}\n  &lt;!-- output if condition is true --&gt;\n{{ else if condition2 }}\n  &lt;!-- output if condition2 is true --&gt;\n{{ else }}\n  &lt;!-- output if condition is false --&gt;\n{{ end }}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#range","title":"Range","text":"<p>Loops iterate over collections (arrays, maps, etc.), repeating a block of code for each element.</p> <p>Basic Syntax <pre><code>{{ range $index, $element := $array }}\n  {{ $index }}: {{ $element }}\n{{ end }}\n</code></pre></p> <p>Iterating Without Index</p> <p>If you do not need the index, you can iterate over the elements directly:</p> <pre><code>{{ range $fruit := $fruits }}\n  Fruit: {{ $fruit }}\n{{ end }}\n</code></pre> <p>Iterating Over an Array</p> <p>You can also iterate over an array without explicitly defining the variable:</p> <pre><code>{{ range $fruits }}\n  Fruit: {{ . }}\n{{ end }}\n</code></pre> <p>Using Else with Range</p> <p>The <code>else</code> action can be used to provide an alternative block of code to execute if the collection is empty.</p> <pre><code>{{ range $fruits }}\n  Fruit: {{ . }}\n{{ else }}\n  No fruits available.\n{{ end }}\n</code></pre> <p>Range with Maps</p> <p>When iterating over a map, <code>range</code> provides both the key and value.</p> <pre><code>{{ $fruitColors := map.Dictionary \"apple\" \"red\" \"banana\" \"yellow\" \"cherry\" \"red\" }}\n{{ range $fruit, $color := $fruitColors }}\n  {{ $fruit }}: {{ $color }}\n{{ end }}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#break","title":"Break","text":"<p>The <code>break</code> action terminates the loop immediately and skips any remaining iterations.</p> <pre><code>{{ range $index, $element := $collection }}\n  {{ if condition }}\n    {{ break }}\n  {{ end }}\n  &lt;!-- actions --&gt;\n{{ end }}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#continue","title":"Continue","text":"<p>The <code>continue</code> action skips the current iteration and proceeds to the next one.</p> <pre><code>{{ range $index, $element := $collection }}\n  {{ if condition }}\n    {{ continue }}\n  {{ end }}\n  &lt;!-- actions --&gt;\n{{ end }}\n</code></pre>"},{"location":"guides/components/templates/syntax.html#with","title":"With","text":"<p>The <code>with</code> action in pars is used to specify a new context within a block. It allows you to drill down into a specific part of the data, making it easier to work with nested data structures by temporarily setting the context to a more specific value.</p> <pre><code>{{ with &lt;variable&gt; }}\n  &lt;!-- ... if variable is not empty ... --&gt;\n{{ else }}\n  &lt;!-- ... if variable is empty ... --&gt;\n{{ end }}\n</code></pre> <p> </p>"},{"location":"guides/references/index.html","title":"References","text":""},{"location":"guides/references/data-structures.html","title":"Data Structures","text":""},{"location":"guides/references/data-structures.html#object","title":"Object","text":"<ul> <li>Description: The base type for all other types. Every variable is of type <code>Object</code>, meaning any variable of any specific type is also an <code>Object</code>.</li> <li>Symbol: <code>{}</code></li> <li>Technical Details: All types, including those defined under <code>Number</code>, <code>Text</code>, <code>Boolean</code>, <code>Map</code>, <code>Blob</code>, <code>Time</code>, and <code>Null</code>, are derived from <code>Object</code>.</li> <li>Usage: Used as a generic base class for all other types.</li> <li>Example:      <pre><code>Object myObject = {};\n</code></pre></li> </ul>"},{"location":"guides/references/data-structures.html#collection","title":"Collection","text":"<ul> <li>Description: Groups of objects, such as arrays, lists, or sets.</li> <li>Symbol: <code>[]</code></li> <li>Technical Details: Collections allow for the storage and manipulation of multiple items in a single structure.</li> <li>Usage: Used for storing and working with multiple items.</li> <li>Example:      <pre><code>Int[] numbers = [1, 2, 3, 4, 5]\n</code></pre></li> </ul>"},{"location":"guides/references/data-structures.html#set","title":"Set","text":"<ul> <li>Description: A collection of unique elements without duplicates.</li> <li>Symbol: <code>[,]</code></li> <li>Technical Details: Sets ensure that each element is unique and provide efficient membership tests.</li> <li>Usage: Used for storing distinct elements and performing set operations like union, intersection, and difference.</li> <li>Example:      <pre><code>Set[Int] uniqueNumbers = [1, 2, 3, 4, 5];\n</code></pre></li> </ul>"},{"location":"guides/references/data-structures.html#tuple","title":"Tuple","text":"<ul> <li>Description: An ordered list of elements, which can be of different types. Tuples are typically used to group multiple values together and can be immutable, depending on the programming language.</li> <li>Symbol: <code>(,)</code></li> <li>Technical Details: Tuples are indexed, starting from zero, and can hold a fixed number of elements. They are often used to return multiple values from a function or to group related data together.</li> <li>Usage: Used to store a collection of values of potentially different types. Commonly used in function return types and for grouping related values.</li> <li>Example:      <pre><code>(String, Int) person = (\"Alice\", 30);\n</code></pre></li> </ul>"},{"location":"guides/references/data-structures.html#map","title":"Map","text":"<ul> <li>Description: Key-value pairs, such as dictionaries or hash maps.</li> <li>Symbol: <code>{,}</code></li> <li>Technical Details: Maps allow for the efficient retrieval of values based on keys.</li> <li>Usage: Used for associative arrays and similar structures where key-based access is needed.</li> <li>Example:      <pre><code>Map[String, Int] ageMap = {\"Alice\": 30,  \"Bob\": 25}\n</code></pre></li> </ul>"},{"location":"guides/references/data-structures.html#enum","title":"Enum","text":"<ul> <li>Description: Enumerated type, representing a fixed set of named values.</li> <li>Symbol: <code>&lt;&gt;</code></li> <li>Technical Details: Enums provide a way to define a set of named constants.</li> <li>Usage: Used for variables that can only take one out of a small set of possible values.</li> <li>Example:      <pre><code>Enum Day {\n    Monday,\n    Tuesday,\n    Wednesday,\n    Thursday,\n    Friday,\n    Saturday,\n    Sunday\n}\n</code></pre></li> </ul>"},{"location":"guides/references/literals.html","title":"Literals","text":""},{"location":"guides/references/literals.html#number-literals","title":"Number Literals","text":""},{"location":"guides/references/literals.html#integer-literals","title":"Integer Literals","text":"<ul> <li>Description: Represents whole numbers without any fractional or decimal component.</li> <li>Technical Details: Can be positive or negative. Typically represented in decimal (base 10), but can also be in binary (base 2), octal (base 8), or hexadecimal (base 16).</li> <li>Usage: Used for counting, indexing, and basic arithmetic operations.</li> <li>Example:      <pre><code>Int positiveInt = 123;\nInt negativeInt = -456;\nInt binaryInt = 0b1010;   // Binary literal\nInt octalInt = 0123;      // Octal literal\nInt hexInt = 0x1A3;       // Hexadecimal literal\n</code></pre></li> </ul>"},{"location":"guides/references/literals.html#floating-point-literals","title":"Floating-point Literals","text":"<ul> <li>Description: Represents numbers with fractional or decimal components.</li> <li>Technical Details: Can be positive or negative. Typically represented in decimal notation or scientific notation.</li> <li>Usage: Used for calculations requiring precision with decimal points, such as scientific and financial computations.</li> <li>Example:      <pre><code>Float simpleFloat = 123.45;\nFloat negativeFloat = -67.89;\nFloat scientificFloat = 1.23e4;   // Scientific notation (1.23 x 10^4)\n</code></pre></li> </ul>"},{"location":"guides/references/literals.html#text-literals","title":"Text Literals","text":""},{"location":"guides/references/literals.html#character-literals","title":"Character Literals","text":"<ul> <li>Description: Represents a single character enclosed in single quotes.</li> <li>Technical Details: Can include letters, digits, symbols, or escape sequences.</li> <li>Usage: Used to store and manipulate individual characters.</li> <li>Example:      <pre><code>Char letter = 'A';\nChar digit = '7';\nChar symbol = '#';\nChar escapeSequence = '\\n';   // Newline character\n</code></pre></li> </ul>"},{"location":"guides/references/literals.html#string-literals","title":"String Literals","text":"<ul> <li>Description: Represents a sequence of characters enclosed in double quotes.</li> <li>Technical Details: Can include letters, digits, symbols, and escape sequences. Supports concatenation and various string operations.</li> <li>Usage: Used to store and manipulate text data.</li> <li>Example:      <pre><code>String greeting = \"Hello, world!\";\nString multiline = \"This is line 1.\\nThis is line 2.\";\nString concatenated = \"Hello, \" + \"world!\";\n</code></pre></li> </ul>"},{"location":"guides/references/literals.html#boolean-literals","title":"Boolean Literals","text":"<ul> <li>Description: Represents logical values indicating <code>true</code> or <code>false</code>.</li> <li>Technical Details: Used in conditional statements and logical operations.</li> <li>Usage: Indicates the truthiness or falsiness of a condition.</li> <li>Example:      <pre><code>Boolean isActive = true;\nBoolean isComplete = false;\nif (isActive) {\n    // Perform some action\n}\n</code></pre></li> </ul>"},{"location":"guides/references/literals.html#null-literals","title":"Null Literals","text":"<ul> <li>Description: Represents the absence of a value or a non-existent reference. <code>none</code></li> <li>Technical Details: Indicates that a variable does not currently hold a valid value.</li> <li>Usage: Used to signify uninitialized or optional values.</li> <li>Example:      <pre><code>Object value = none;\nif (value == none) {\n    // Handle the absence of a value\n}\n</code></pre></li> </ul>"},{"location":"guides/references/value-types.html","title":"Value Types","text":""},{"location":"guides/references/value-types.html#object","title":"Object","text":"<ul> <li>Description: The base type for all other types. Every variable is of type <code>Object</code>, meaning any variable of any specific type is also an <code>Object</code>.</li> <li>Technical Details: All types, including those defined under <code>Number</code>, <code>Text</code>, <code>Boolean</code>, <code>Map</code>, and <code>Null</code>, are derived from <code>Object</code>.</li> <li>Initial Value: <code>none</code></li> </ul>"},{"location":"guides/references/value-types.html#bit","title":"Bit","text":"<ul> <li>Description: Represents a binary digit, either 0 or 1.</li> <li>Technical Details: Bit values are used in low-level operations and bit manipulation.</li> <li>Usage: Typically used for bitwise operations.</li> <li>Initial Value: <code>0</code></li> <li>Example: <code>Bit value = 1</code></li> </ul>"},{"location":"guides/references/value-types.html#number","title":"Number","text":""},{"location":"guides/references/value-types.html#int","title":"Int","text":""},{"location":"guides/references/value-types.html#uint8-ubyte","title":"UInt8 (UByte)","text":"<ul> <li>Description: Unsigned 8-bit integer.</li> <li>Technical Details: Ranges from 0 to 255.</li> <li>Usage: Used for small ranges of non-negative numbers.</li> <li>Initial Value: <code>0</code></li> <li>Example: <code>UInt8 age = 25</code></li> </ul>"},{"location":"guides/references/value-types.html#int8-byte","title":"Int8 (Byte)","text":"<ul> <li>Description: Signed 8-bit integer.</li> <li>Technical Details: Ranges from -128 to 127.</li> <li>Usage: Used for small ranges of signed numbers.</li> <li>Initial Value: <code>0</code></li> <li>Example: <code>Int8 temperature = -10</code></li> </ul>"},{"location":"guides/references/value-types.html#uint16-ushort","title":"UInt16 (UShort)","text":"<ul> <li>Description: Unsigned 16-bit integer.</li> <li>Technical Details: Ranges from 0 to 65,535.</li> <li>Usage: Used for larger ranges of non-negative numbers.</li> <li>Initial Value: <code>0</code></li> <li>Example: <code>UInt16 height = 180</code></li> </ul>"},{"location":"guides/references/value-types.html#int16-short","title":"Int16 (Short)","text":"<ul> <li>Description: Signed 16-bit integer.</li> <li>Technical Details: Ranges from -32,768 to 32,767.</li> <li>Usage: Used for larger ranges of signed numbers.</li> <li>Initial Value: <code>0</code></li> <li>Example: <code>Int16 distance = -5000</code></li> </ul>"},{"location":"guides/references/value-types.html#uint32-uint","title":"UInt32 (UInt)","text":"<ul> <li>Description: Unsigned 32-bit integer.</li> <li>Technical Details: Ranges from 0 to 4,294,967,295.</li> <li>Usage: Used for even larger ranges of non-negative numbers.</li> <li>Initial Value: <code>0</code></li> <li>Example: <code>UInt32 population = 1000000</code></li> </ul>"},{"location":"guides/references/value-types.html#int32-int","title":"Int32 (Int)","text":"<ul> <li>Description: Signed 32-bit integer.</li> <li>Technical Details: Ranges from -2,147,483,648 to 2,147,483,647.</li> <li>Usage: Used for a wide range of signed numbers.</li> <li>Initial Value: <code>0</code></li> <li>Example: <code>Int32 score = 1500</code></li> </ul>"},{"location":"guides/references/value-types.html#uint64-ulong","title":"UInt64 (ULong)","text":"<ul> <li>Description: Unsigned 64-bit integer.</li> <li>Technical Details: Ranges from 0 to 18,446,744,073,709,551,615.</li> <li>Usage: Used for very large ranges of non-negative numbers.</li> <li>Initial Value: <code>0</code></li> <li>Example: <code>UInt64 fileSize = 1234567890123</code></li> </ul>"},{"location":"guides/references/value-types.html#int64-long","title":"Int64 (Long)","text":"<ul> <li>Description: Signed 64-bit integer.</li> <li>Technical Details: Ranges from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.</li> <li>Usage: Used for very large ranges of signed numbers.</li> <li>Initial Value: <code>0</code></li> <li>Example: <code>Int64 bigNumber = -987654321012345</code></li> </ul>"},{"location":"guides/references/value-types.html#uint128","title":"UInt128","text":"<ul> <li>Description: Unsigned 128-bit integer.</li> <li>Technical Details: Ranges from 0 to 3.4 x 10^38.</li> <li>Usage: Used for extremely large ranges of non-negative numbers. (Rarely used)</li> <li>Initial Value: <code>0</code></li> <li>Example: <code>UInt128 bigValue = 340282366920938463463374607431768211456</code></li> </ul>"},{"location":"guides/references/value-types.html#int128","title":"Int128","text":"<ul> <li>Description: Signed 128-bit integer.</li> <li>Technical Details: Ranges from -1.7 x 10^38 to 1.7 x 10^38.</li> <li>Usage: Used for extremely large ranges of signed numbers. (Rarely used)</li> <li>Initial Value: <code>0</code></li> <li>Example: <code>Int128 largeNumber = -170141183460469231731687303715884105728</code></li> </ul>"},{"location":"guides/references/value-types.html#float","title":"Float","text":""},{"location":"guides/references/value-types.html#float16","title":"Float16","text":"<ul> <li>Description: 16-bit floating-point number.</li> <li>Technical Details: Provides lower precision but uses less memory.</li> <li>Usage: Used in specialized applications where memory is a concern.</li> <li>Initial Value: <code>0.0</code></li> <li>Example: <code>Float16 temperature = 22.5f</code></li> </ul>"},{"location":"guides/references/value-types.html#float32-float","title":"Float32 (Float)","text":"<ul> <li>Description: 32-bit floating-point number (single precision).</li> <li>Technical Details: Provides a balance between precision and memory usage.</li> <li>Usage: Commonly used for general floating-point calculations.</li> <li>Initial Value: <code>0.0</code></li> <li>Example: <code>Float32 distance = 3.14f</code></li> </ul>"},{"location":"guides/references/value-types.html#float64-double","title":"Float64 (Double)","text":"<ul> <li>Description: 64-bit floating-point number (double precision).</li> <li>Technical Details: Provides higher precision than <code>Float32</code>.</li> <li>Usage: Used when higher precision in calculations is required.</li> <li>Initial Value: <code>0.0</code></li> <li>Example: <code>Float64 pi = 3.141592653589793</code></li> </ul>"},{"location":"guides/references/value-types.html#float128","title":"Float128","text":"<ul> <li>Description: 128-bit floating-point number.</li> <li>Technical Details: Offers extended precision for high-accuracy calculations.</li> <li>Usage: Used in scientific and high-precision applications. (Rarely used)</li> <li>Initial Value: <code>0.0</code></li> <li>Example: <code>Float128 preciseValue = 3.1415926535897932384626</code></li> </ul>"},{"location":"guides/references/value-types.html#decimal","title":"Decimal","text":"<ul> <li>Description: Represents fixed-point numbers with a specific number of decimal places.</li> <li>Technical Details: Used for exact decimal representation and calculations.</li> <li>Usage: Ideal for financial calculations and scenarios where exact decimal representation is crucial.</li> <li>Initial Value: <code>0.0</code></li> <li>Example: <code>Decimal price = 199.99m</code></li> </ul>"},{"location":"guides/references/value-types.html#text","title":"Text","text":""},{"location":"guides/references/value-types.html#string","title":"String","text":"<ul> <li>Description: Represents a sequence of characters.</li> <li>Technical Details: Used for storing and manipulating text.</li> <li>Usage: Commonly used for handling text data.</li> <li>Initial Value: <code>\"\"</code></li> <li>Example: <code>String message = \"Hello, World!\"</code></li> </ul>"},{"location":"guides/references/value-types.html#char","title":"Char","text":"<ul> <li>Description: Represents a single character.</li> <li>Technical Details: Used for operations involving individual characters.</li> <li>Usage: Useful for processing and manipulating individual characters.</li> <li>Initial Value: <code>'\\0'</code></li> <li>Example: <code>Char initial = 'A'</code></li> </ul>"},{"location":"guides/references/value-types.html#boolean","title":"Boolean","text":"<ul> <li>Description: Represents a logical value, either <code>true</code> or <code>false</code>.</li> <li>Technical Details: Used in conditional statements and logical operations.</li> <li>Usage: Essential for control flow and decision-making in code.</li> <li>Initial Value: <code>false</code></li> <li>Example: <code>Boolean isActive = true</code></li> </ul>"},{"location":"guides/references/value-types.html#blob","title":"Blob","text":"<ul> <li>Description: Represents a Binary Large Object, typically used to store binary data such as files, images, or multimedia.</li> <li>Technical Details: Can hold a large amount of binary data and is often used in database storage or file handling.</li> <li>Usage: Used for handling and storing binary data.</li> <li>Initial Value: <code>none</code></li> <li>Example: <code>Blob image = loadBlob(\"path/to/image.jpg\")</code></li> </ul>"},{"location":"guides/references/value-types.html#time","title":"Time","text":"<ul> <li>Description: Represents time-related data such as dates, times, or durations.</li> <li>Technical Details: Can be used to store and manipulate date and time information.</li> <li>Usage: Ideal for applications that require date and time calculations, scheduling, or time-based data.</li> <li>Initial Value: <code>none</code></li> <li>Example: <code>Time currentTime = getCurrentTime()</code></li> </ul>"},{"location":"guides/schemas/index.html","title":"Schemas","text":""},{"location":"guides/schemas/enum/index.html","title":"Index","text":""},{"location":"guides/schemas/enum/logLevelEnum.html","title":"Log Level Enum","text":""},{"location":"guides/schemas/enum/logLevelEnum.html#summary","title":"Summary","text":"<p><code>LogLevelEnum</code> is an enumeration that defines various levels of logging verbosity. Each level represents the severity or importance of the messages that can be logged. This can be useful for filtering log messages based on their relevance and significance.</p>"},{"location":"guides/schemas/enum/logLevelEnum.html#constants","title":"Constants","text":""},{"location":"guides/schemas/enum/logLevelEnum.html#silence","title":"Silence","text":"<p>Description: No logging output. This level effectively silences all log messages.</p>"},{"location":"guides/schemas/enum/logLevelEnum.html#verbose","title":"Verbose","text":"<p>Description: Logs detailed information that is typically useful for debugging and understanding the flow of the application. This includes low-level details that are usually too verbose for regular operation but can be helpful during development.</p>"},{"location":"guides/schemas/enum/logLevelEnum.html#info","title":"Info","text":"<p>Description: Logs informational messages that highlight the progress of the application at a high level. These messages provide general operational information that can be useful for understanding the state and behavior of the application.</p>"},{"location":"guides/schemas/enum/logLevelEnum.html#warn","title":"Warn","text":"<p>Description: Logs potentially harmful situations that are not immediately causing errors but might lead to problems. These messages indicate potential issues that should be looked into to prevent future errors.</p>"},{"location":"guides/schemas/enum/logLevelEnum.html#error","title":"Error","text":"<p>Description: Logs error events that might still allow the application to continue running. These messages indicate serious issues that have occurred but are not necessarily fatal to the application's operation.</p>"},{"location":"guides/schemas/enum/logLevelEnum.html#fatal","title":"Fatal","text":"<p>Description: Logs very severe error events that will presumably lead the application to abort. These messages indicate critical failures that require immediate attention and usually result in the termination of the application.</p> <p> </p>"},{"location":"guides/schemas/enum/workspaceViewTypesEnum.html","title":"Workspace View Types Enum","text":""},{"location":"guides/schemas/enum/workspaceViewTypesEnum.html#summary","title":"Summary","text":"<p><code>WorkspaceViewTypesEnum</code> is an enumeration that defines the different ways to list projects within a workspace. This can be useful for providing users with options to view their projects in a manner that best suits their needs.</p>"},{"location":"guides/schemas/enum/workspaceViewTypesEnum.html#constants","title":"Constants","text":""},{"location":"guides/schemas/enum/workspaceViewTypesEnum.html#hierarchical","title":"Hierarchical","text":"<p>Description: Projects are listed in a hierarchical structure. This view organizes projects in a tree-like format, often based on their group structure.</p>"},{"location":"guides/schemas/enum/workspaceViewTypesEnum.html#flat","title":"Flat","text":"<p>Description: Projects are listed in a flat structure. This view organizes projects in a simple list without any nesting or hierarchy. It provides a straightforward and uncluttered way to see all projects at the same level, which can be useful for quickly finding a project without navigating through nested levels.</p> <p> </p>"},{"location":"guides/schemas/general/yaml-specifications.html","title":"YAML Specifications","text":"<p>Tips:</p> <ul> <li>Use consistent indentation to improve readability.</li> <li>Ensure there are no extra spaces or characters around colons and quotation marks.</li> <li>Validate your YAML files to ensure they are syntactically correct.</li> </ul> <p>Additional Notes:</p> <ul> <li>The Go struct and unmarshal method provided in the original query are used internally by the application to process YAML data. You don't need to worry about these for creating YAML headers.</li> <li>This guide assumes you have a basic understanding of YAML syntax. If you're new to YAML, refer to online resources or tutorials for a comprehensive introduction.</li> </ul> <p>Remember, the key to creating valid YAML headers is to follow the correct structure, use proper indentation, and adhere to the specified value types for each field.</p> <p> </p>"},{"location":"guides/schemas/object/index.html","title":"Index","text":""},{"location":"guides/schemas/object/group/group-object-model.html","title":"Group Object Model","text":""},{"location":"guides/schemas/object/group/group-object-model.html#overview","title":"Overview","text":"<p>YAML Structure</p> <pre><code>Type: Group\nName:  \nMetadata:\n  Tags: \nSpecifications:\n  Name: \n  Path: \n  Package: \n</code></pre> <p>Summary</p> <ul> <li><code>Type</code>: Must always be <code>Group</code>.</li> <li><code>Name</code>: Unique identifier for the group, applicable across different workspaces.</li> <li><code>Metadata</code>: Contains <code>tags</code> for labeling and categorization. See the Metadata Section Documentation.</li> <li><code>Specifications</code>:<ul> <li><code>Name</code>: Instance name used in development and generation.</li> <li><code>Path</code>: Relative path in the workspace; defaults to <code>Name</code> if not specified.</li> <li><code>Package</code>: Defines the package or namespace; can be a string array or a <code>/</code> separated string; defaults to name if not specified. See the Specifications Section Documentation.</li> </ul> </li> </ul> <p>This document serves as a guide for developers to correctly define and use the <code>Group</code> model in their YAML manifest files, ensuring proper structure and consistency in the workspace.</p> <p>Fields</p> <ul> <li>Type: <code>Group</code></li> <li>Name: <code>String</code></li> <li>Metadata: <code>Metadata</code></li> <li>Specifications: <code>Specifications</code></li> </ul> <p>Required Fields</p> <ul> <li><code>Type</code></li> <li><code>Name</code></li> <li><code>Specifications.Name</code></li> </ul>"},{"location":"guides/schemas/object/group/group-object-model.html#field-descriptions","title":"Field Descriptions","text":""},{"location":"guides/schemas/object/group/group-object-model.html#type","title":"<code>Type</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Must be <code>Group</code></li> <li>Description: Specifies the type of the model.</li> </ul> <p>Usage</p> <p>The <code>Type</code> field identifies the model type as a Group.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>Group</code> and cannot be changed</li> </ul> <p>Examples</p> <pre><code>Type: Group\n</code></pre>"},{"location":"guides/schemas/object/group/group-object-model.html#name","title":"<code>Name</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Any string value that ensures uniqueness within the environment</li> <li>A unique identifier for the group, assigned by the developer. This name should be unique within the selected environment, as the group is independent of the workspace and can be used across different workspaces.</li> </ul> <p>Usage</p> <p>The <code>Name</code> is used to identify the group model and must align with the project architecture and plan.</p> <p>Notes</p> <ul> <li>Ensure the <code>Name</code> is unique to avoid conflicts across different workspaces.</li> </ul> <p>Examples</p> <pre><code>Name: UserManagementGroup\n</code></pre>"},{"location":"guides/schemas/object/group/group-object-model.html#metadata","title":"<code>Metadata</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An object containing metadata about the group</li> </ul>"},{"location":"guides/schemas/object/group/group-object-model.html#metadatatags","title":"<code>Metadata.Tags</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>[]String</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Labels for the group, used for filtering, grouping, and selection purposes.</li> </ul> <p>Usage</p> <p>Use <code>Tags</code> to categorize and manage groups more effectively.</p> <p>Notes</p> <ul> <li><code>Tags</code> can be used for filtering and organizing groups based on specific criteria.</li> </ul> <p>Examples</p> <pre><code>Metadata:\n  Tags:\n  - backend\n  - user-management\n</code></pre> <pre><code>Metadata:\n  Tags: [backend, user-management]\n</code></pre>"},{"location":"guides/schemas/object/group/group-object-model.html#specifications","title":"<code>Specifications</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: Contains specific details about the group instance.</li> </ul>"},{"location":"guides/schemas/object/group/group-object-model.html#specificationsname","title":"<code>Specifications.Name</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: The name given to the group instance. This is used during development or generation processes. While the <code>Name</code> in the header identifies the model, the <code>Name</code> in the specifications identifies the instance of the group.</li> </ul> <p>Usage</p> <p>This <code>Name</code> is used to reference the specific instance of the group.</p> <p>Notes</p> <ul> <li>Different from the header <code>Name</code>, which identifies the model.</li> </ul> <p>Examples</p> <pre><code>Specifications:\n  Name: UserManagement\n</code></pre>"},{"location":"guides/schemas/object/group/group-object-model.html#specificationspath","title":"<code>Specifications.Path</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: Uses <code>Name</code> if not provided</li> <li>Description: The relative path of the group within the workspace. When the group is physically constructed, it will be created at the path defined here.</li> <li>Valid values: Any valid relative path.</li> </ul> <p>Usage</p> <p>Define a specific <code>Path</code> to control where the group is created in the workspace.</p> <p>Notes</p> <ul> <li>If no <code>Path</code> is defined, the group name is used as the default path.</li> </ul> <p>Examples</p> <pre><code>Specifications:\n  Path: src/user_management\n</code></pre>"},{"location":"guides/schemas/object/group/group-object-model.html#specificationspackage","title":"<code>Specifications.Package</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code> or <code>[]String</code></li> <li>Type: <code>text</code> or <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: Uses <code>Name</code> if not provided</li> <li>Description: Labels for the group, used for filtering, grouping, and selection purposes.</li> <li>Valid Values: Any string or array of strings. If a single string is provided, it can be separated by <code>/</code>.</li> </ul> <p>Usage</p> <p>Specify the <code>Package</code> to organize code and resources under a specific namespace.</p> <p>Notes</p> <ul> <li>If no <code>Package</code> is defined, the group <code>Name</code> is used as the default package name.</li> </ul> <p>Examples</p> <pre><code>Specifications:\n  Package: com.example.user\n</code></pre> <pre><code>Specifications:\n  Package: com/example/user\n</code></pre> <pre><code>Specifications:\n  Package: [com, example, user]\n</code></pre> <pre><code>Specifications:\n  Package: \n  - com\n  - example\n  - user\n</code></pre>"},{"location":"guides/schemas/object/group/group-object-model.html#examples","title":"Examples","text":"Example <pre><code>Type: Group\nName: UserManagementGroup\nMetadata:\n  Tags: [backend, user-management]\nSpecifications:\n  Name: UserManagement\n  Path: src/user_management\n  Package: [com, example, user]\n</code></pre> <p>This document provides detailed information about the <code>Group</code> model used in Pars for dynamic code generation. The Group model is defined with specific fields and sections that help in structuring and managing different groups. Model and references to detailed documentation for each section: <code>Metadata</code>, and <code>Specifications</code>.</p> <p> </p>"},{"location":"guides/schemas/object/project/application-project-object-model.html","title":"Application Project Object Model","text":""},{"location":"guides/schemas/object/project/application-project-object-model.html#overview","title":"Overview","text":"<p>YAML Structure</p> <pre><code>Type: Project\nKind: Application\nName:  \nMetadata:\n  Tags:\nSpecifications:\n  Name: \n  Platform: \n    Type:\n    Version:\n  Runtime:\n    Type:\n    Version:\n  Language:\n    Type:\n    Version:\n  ProjectType:\n  Set: \n  Group:\n  Workspace:\n  Package:\n  Path:\n  Labels:\n  Configuration:\n    Layers:\n    - Name:\n      Path:\n      Package:\n    Dependencies:\n    - Name: \n      Version:\n    References:\n    - Name:\n      Group:\n      Workspace:\n</code></pre> <p>Summary</p> <ul> <li><code>Type</code>: Must always be <code>Project</code>.</li> <li><code>Kind</code>: Must always be <code>Application</code>.</li> <li><code>Name</code>: Unique identifier for the project, applicable across different workspaces</li> <li><code>Metadata</code>: Contains <code>Tags</code> for labeling and categorization. See the Metadata Section Documentation.</li> <li><code>Specifications</code>:<ul> <li><code>Name</code>: Instance name used in development and generation.</li> <li><code>Set</code>: Optional. Used to group projects, templates, resources, and tasks.</li> <li><code>Platform</code>: Indicates the technology or framework.</li> <li><code>Runtime</code>: Specifies the runtime environment.</li> <li><code>Language</code>: Specifies the programming language.</li> <li><code>ProjectType</code>: Type of the project.</li> <li><code>Package</code>: Defines the package or namespace.</li> <li><code>Group</code>: Indicates the group this project belongs to.</li> <li><code>Workspace</code>: Indicates the workspace this project belongs to.</li> <li><code>Path</code>: Relative path in the workspace.</li> <li><code>Labels</code>: Key-value pairs for filtering and selection.</li> <li><code>Configuration</code>: Contains layers, dependencies, and references.</li> </ul> </li> </ul> <p>This document serves as a guide for developers to correctly define and use the <code>Application Project</code> model in their YAML manifest files, ensuring proper structure and consistency in the workspace.</p> <p>Fields</p> <ul> <li>Type: <code>Project</code></li> <li>Kind: <code>Application</code></li> <li>Name: <code>String</code></li> <li>Metadata: <code>Metadata</code></li> <li>Specifications: <code>Specifications</code></li> </ul> <p>Required Fields</p> <ul> <li><code>Type</code></li> <li><code>Name</code></li> <li><code>Specifications.Name</code></li> <li><code>Specifications.Platform</code></li> <li><code>Specifications.ProjectType</code></li> </ul>"},{"location":"guides/schemas/object/project/application-project-object-model.html#field-descriptions","title":"Field Descriptions","text":""},{"location":"guides/schemas/object/project/application-project-object-model.html#type","title":"<code>Type</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Must be <code>Project</code></li> <li>Description: Specifies the type of the model.</li> </ul> <p>Usage</p> <p>The <code>Type</code> field identifies the model type as a Project.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>Project</code> and cannot be changed</li> </ul> <p>Examples</p> <pre><code>Type: Project\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#kind","title":"<code>Kind</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Must be <code>Application</code></li> <li>Description: Specifies the kind of the project.</li> </ul> <p>Usage</p> <p>The <code>Kind</code> field identifies the project type as a Application.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>Application</code> and cannot be changed</li> </ul> <p>Examples</p> <pre><code>Kind: Project\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#name","title":"<code>Name</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Any string value that ensures uniqueness within the workspace</li> <li>A unique identifier for the project, assigned by the developer. This name should be unique within the workspace, as the project is depend on the workspace.</li> </ul> <p>Usage</p> <p>The <code>Name</code> is used to identify the group model and must align with the project architecture and plan.</p> <p>Notes</p> <ul> <li>Ensure the <code>Name</code> is unique to avoid conflicts in the workspace.</li> </ul> <p>Examples</p> <pre><code>Name: EShopping.ProductService\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#metadata","title":"<code>Metadata</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An object containing metadata about the group</li> </ul>"},{"location":"guides/schemas/object/project/application-project-object-model.html#metadatatags","title":"<code>Metadata.Tags</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>[]String</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Labels for the group, used for filtering, grouping, and selection purposes.</li> </ul> <p>Usage</p> <p>Use <code>Tags</code> to categorize and manage groups more effectively.</p> <p>Notes</p> <ul> <li><code>Tags</code> can be used for filtering and organizing groups based on specific criteria.</li> </ul> <p>Examples</p> <pre><code>Metadata:\n  Tags:\n  - backend\n  - nodejs\n</code></pre> <pre><code>Metadata:\n  Tags: [backend, nodejs]\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specifications","title":"<code>Specifications</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: Contains specific details about the project instance.</li> </ul>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationsname","title":"<code>Specifications.Name</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: The name given to the group instance. This is used during development or generation processes. While the <code>Name</code> in the header identifies the model, the <code>Name</code> in the specifications identifies the instance of the group.</li> <li>The name given to the project instance. This is used during development or generation processes. While the <code>Name</code> in the header identifies the model, the name in the specifications identifies the instance of the project.</li> </ul> <p>Usage</p> <p>This <code>Name</code> is used to reference the specific instance of the project.</p> <p>Notes</p> <ul> <li>Different from the header <code>Name</code>, which identifies the model.</li> </ul> <p>Examples</p> <pre><code>Specifications:\n  Name: ProductService\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationsplatform","title":"<code>Specifications.Platform</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code> or <code>object</code></li> <li>Type: <code>text</code> or <code>structured-data</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code>,</li> <li>Valid values: <code>dotnet</code>, <code>go</code>, <code>nodejs</code>, <code>angular</code>, or specific versions.</li> <li>Description: Indicates the technology or framework used by the project.</li> </ul> <p>You can see all available platforms at Platforms</p> <p>Usage</p> <p>The <code>Platform</code> specifies the underlying technology stack for the project.</p> <p>Notes</p> <ul> <li>You can set value as inline <code>String</code> or <code>platform object</code></li> </ul> <p>Examples</p> <p>Inline latest version <pre><code>Specifications:\n  Platform: nodejs\n</code></pre></p> <p>Inline specific version <pre><code>Specifications:\n  Platform: nodejs@14\n</code></pre></p> <p>Object format <pre><code>Specifications:\n  Platform: \n    Type: nodejs\n    Version: 14\n</code></pre></p>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationsruntime","title":"<code>Specifications.Runtime</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code> or <code>object</code></li> <li>Type: <code>text</code> or <code>structured-data</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code>,</li> <li>Valid values: <code>dotnet</code>, <code>go</code>, <code>nodejs</code>, <code>angular</code>, or specific versions.</li> <li>Description: Specifies the runtime environment.</li> </ul> <p>Usage</p> <p>Defines the <code>Runtime</code> environment for the project.</p> <p>Notes</p> <ul> <li>You can set value as inline <code>String</code> or <code>runtime object</code></li> </ul> <p>Examples</p> <p>Inline latest version <pre><code>Specifications:\n  Runtime: nodejs\n</code></pre></p> <p>Inline specific version <pre><code>Specifications:\n  Runtime: nodejs@14\n</code></pre></p> <p>Object format <pre><code>Specifications:\n  Runtime: \n    Type: nodejs\n    Version: 14\n</code></pre></p>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationslanguage","title":"<code>Specifications.Language</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code> or <code>object</code></li> <li>Type: <code>text</code> or <code>structured-data</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code>,</li> <li>Valid values: <code>csharp</code>, <code>go</code>, <code>typescript</code>, <code>javascript</code>, or specific versions.</li> <li>Description: Specifies the programming language.</li> </ul> <p>Usage</p> <p>Defines the programming <code>Language</code> used in the project.</p> <p>Notes</p> <ul> <li>You can set value as inline <code>String</code> or <code>language object</code></li> </ul> <p>Examples</p> <p>Inline latest version <pre><code>Specifications:\n  Runtime: javascript\n</code></pre></p> <p>Inline specific version <pre><code>Specifications:\n  Runtime: javascript@es6\n</code></pre></p> <p>Object format <pre><code>Specifications:\n  Runtime: \n    Type: javascript\n    Version: es6\n</code></pre></p>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationsprojecttype","title":"<code>Specifications.ProjectType</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code>,</li> <li>Valid values: <code>webapi</code>, <code>webapp</code>, <code>spa</code>, <code>console</code>, <code>library</code>, <code>desktop</code>, <code>mobile</code>.</li> <li>Description: Indicates the type of project.</li> </ul> <p>Usage</p> <p>Defines the project type within the given platform.</p> <p>Notes</p> <ul> <li>Refer to the platform guide for supported project types</li> </ul> <p>Examples</p> <pre><code>Specifications:\n  ProjectType: webapi\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationspackage","title":"<code>Specifications.Package</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code> or <code>[]string</code></li> <li>Type: <code>text</code> or <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: Uses <code>Name</code> if not provided</li> <li>Description: Defines the package or namespace.</li> </ul> <p>Usage</p> <p>Specifies the package to organize code and resources under a specific namespace.</p> <p>Notes</p> <ul> <li>If no <code>Package</code> is defined, the project <code>Name</code> is used as the default package name. </li> <li>You can specify string split by <code>/</code></li> </ul> <p>Examples</p> <pre><code>Specifications:\n    Package: com/eshopping/product\n</code></pre> <pre><code>Specifications:\n    Package:  [com, eshopping, product]\n</code></pre> <pre><code>Specifications:\n    Package: \n    - com\n    - eshopping\n    - product\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationsset","title":"<code>Specifications.Set</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An optional field used to group projects, templates, resources, and tasks for better organization.</li> </ul> <p>Usage</p> <p>Use <code>Set</code> to group related projects together.</p> <p>Notes</p> <ul> <li>Useful for managing related projects in a microservices architecture or monolithic application.</li> </ul> <p>Examples</p> <pre><code>Specifications:\n  Set: EShopping\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationsgroup","title":"<code>Specifications.Group</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Indicates the group this project belongs to. Must be a previously defined group in Pars.</li> </ul> <p>Usage</p> <p>Specifies the <code>group</code> to which the project belongs, useful for organizing projects within the same group.</p> <p>Notes</p> <ul> <li>If a <code>group</code> is defined, the project will be created within the group's directory, and the project's package will be defined within the group's package.</li> </ul> <p>Examples</p> <pre><code>Specifications:\n    Group: EShopping\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationsworkspace","title":"<code>Specifications.Workspace</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: Uses <code>current workspace</code> if not provided</li> <li>Description: Specifies the workspace to which the project belongs.</li> </ul> <p>Usage</p> <p>Defines the workspace for the project. If the workspace is defined, the project will belong to the specified workspace. If not defined, the project will default to the current workspace.</p> <p>Notes</p> <ul> <li>This value must be a workspace defined in Pars.</li> <li>Ensures that the project is correctly associated with the intended workspace.</li> </ul> <p>Examples</p> <pre><code>Specifications:\n  Workspace: main\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationspath","title":"<code>Specifications.Path</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: Uses <code>Name</code> if not provided</li> <li>Description: Defines the relative path of the project within the workspace or group if defined.</li> <li>Valid values: Any valid relative path.</li> </ul> <p>Usage</p> <p>Specifies the path where the project will be created within the workspace or group if defined.</p> <p>Notes</p> <ul> <li>If no <code>Path</code> is defined, the project name is used as the default path.</li> </ul> <p>Examples</p> <pre><code>Specifications:\n  Path: services/product-service\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationslabels","title":"<code>Specifications.Labels</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>Map[String, String]</code></li> <li>Type: <code>map</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Key-value pairs for filtering and selection.</li> </ul> <p>Usage</p> <p>Specifies labels to manage and organize projects based on key-value pairs.</p> <p>Notes</p> <ul> <li>Labels can be used for filtering and selection in future decision-making processes.</li> </ul> <p>Examples</p> <pre><code>Specifications:\n  Labels: \n  - environment: production\n  - client: nodejs\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationsconfiguration","title":"<code>Specifications.Configuration</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Contains configuration details for the project</li> </ul>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationsconfigurationlayers","title":"<code>Specifications.Configuration.Layers</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>[]object</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Defines the directory and package structure of the project.</li> </ul> <p>Usage</p> <p>Specifies layers to organize the project's directory and package structure.</p> <p>Notes</p> <ul> <li>Each layer can have its own path and package information.</li> <li>Best practice for the <code>Name</code> field is to use \"<code>:</code>\" to separate layers. This creates a hierarchical directory structure where each \"<code>:</code>\" denotes a subdirectory.</li> <li>The <code>Path</code> and <code>Package</code> information can be defined independently of the <code>Name</code> separator.</li> </ul> <p>Examples</p> <p>Inline example:</p> <pre><code>Specifications:\n  Configuration: \n    Layers:\n    - Library:Data\n</code></pre> <p>Object example:</p> <pre><code>Specifications:\n  Configuration: \n    Layers:\n    - Name: Library:Data\n    Path: entities\n    Package: entities\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationsconfigurationdependencies","title":"<code>Specifications.Configuration.Dependencies</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>[]object</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Defines the dependencies for the project.</li> </ul> <p>Usage</p> <p>Specifies dependencies for the project.</p> <p>Notes</p> <ul> <li>Dependencies can be defined inline or as objects with name and version.</li> </ul> <p>Examples</p> <p>Inline example:</p> <pre><code>Specifications:\n  Configuration: \n    Dependencies:\n    - express\n    - mongoose@5.10.9\n</code></pre> <p>Object example:</p> <pre><code>Specifications:\n  Configuration: \n    Layers:\n    - Name: mongoose\n    Version: 5.10.9\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#specificationsconfigurationreferences","title":"<code>Specifications.Configuration.References</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>[]object</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Defines references to other projects.</li> </ul> <p>Usage</p> <p>Specifies references to other projects within the same or different groups.</p> <p>Notes</p> <ul> <li>References include project name, group, and workspace.</li> </ul> <p>Examples</p> <pre><code>Specifications:\n  Configuration: \n    References:\n    - Name: EShopping.Core\n    Group: EShopping\n    Workspace: main\n</code></pre>"},{"location":"guides/schemas/object/project/application-project-object-model.html#examples","title":"Examples","text":"Example <pre><code>---\nType: Project\nKind: Application\nName: NodeShop.ProductService\nMetadata:\n    Tags: [backend, nodejs]\nSpecifications:\n    Name: ProductService\n    Set: NodeShop\n    Platform:\n        Type: NodeJS\n        Version: 14\n    Runtime:\n        Type: NodeJS\n        Version: 14\n    Language:\n        Type: javascript\n        Version: es6\n    ProjectType: webapi\n    Package: com.nodeshop.product\n    Group: NodeShopGroup\n    Path: /services/product-service\n    Labels:\n        environment: production\n        client: nodejs\n    Configuration:\n        Layers:\n        - Name: Library:Data:Entities\n          Path: entities\n          Package: entities\n        Dependencies:\n        - Name: express\n        - Name: mongoose\n          Version: 5.10.9\n          References:\n        - Name: NodeShop.Core\n        Group: NodeShopGroup\n        Workspace: main\n</code></pre> <p>You can visit Application Project Samples for different examples.</p> <p>This document provides detailed information about the <code>Application Project</code> project model used in Pars for dynamic code generation. The <code>Application Project</code> project model is defined with specific fields and sections that help in structuring and managing different projects.</p> <p> </p>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html","title":"Data Resource Object Model","text":""},{"location":"guides/schemas/object/resource/data-resource-object-model.html#overview","title":"Overview","text":"<p>YAML Structure</p> <pre><code>Type: Resource\nKind: Data\nName:  \nMetaData:\nSpecifications:\n  Name: \n  Set: \n  Layers: \n  - Name:\n    Sections:\n      - Name:\n        Classes:\n        Attributes:\n        Options:\n        Labels:\n        Methods:\n  Labels: \n  Data: \n</code></pre> <p>Summary</p> <ul> <li><code>Type</code>: Must always be <code>Resource</code>.</li> <li><code>Kind</code>: Should be <code>Data</code>.</li> <li><code>Name</code>: Unique identifier for the resource.</li> <li><code>Metadata</code>: Contains <code>Tags</code> for labeling and categorization.</li> <li><code>Specifications</code>:<ul> <li><code>Name</code>: Instance name used in development and generation.</li> <li><code>Set</code>: Optional. Used to group resources, similar to projects.</li> <li><code>Layers</code>: Defines layers where only the name is specified.</li> <li><code>Labels</code>: Key-value pairs for filtering and selection.</li> <li><code>Data</code>: Yaml formatted data. Any data compliant with YAML standards can be defined here.</li> </ul> </li> </ul> <p>Fields</p> <ul> <li>Type: <code>Resource</code></li> <li>Kind: <code>Object</code></li> <li>Name: <code>String</code></li> <li>Metadata: <code>Metadata</code></li> <li>Specifications: <code>Specifications</code></li> </ul> <p>Required Fields</p> <ul> <li><code>Type</code></li> <li><code>Kind</code></li> <li><code>Name</code></li> <li><code>Specifications.Name</code></li> </ul>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#field-descriptions","title":"Field Descriptions","text":""},{"location":"guides/schemas/object/resource/data-resource-object-model.html#type","title":"<code>Type</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Must be <code>Resource</code></li> <li>Description: Specifies the type of the model.</li> </ul> <p>Usage</p> <p>The <code>Type</code> field identifies the model type as a Resource.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>Resource</code>.</li> </ul> <p>Example</p> <pre><code>Type: Resource\n</code></pre>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#kind","title":"<code>Kind</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Must be <code>Data</code></li> <li>Description: Specifies the kind of the resource.</li> </ul> <p>Usage</p> <p>The <code>Kind</code> field identifies the resource type as an Data.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>Data</code>.</li> </ul> <p>Example</p> <pre><code>Kind: Data\n</code></pre>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#name","title":"<code>Name</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Any string value that ensures uniqueness within the environment.</li> <li>Description: A unique identifier for the resource, assigned by the developer. This name should be unique within the selected environment.</li> </ul> <p>Usage</p> <p>The <code>Name</code> is used to identify the resource model and must align with the project architecture and plan.</p> <p>Notes</p> <ul> <li>Ensure the <code>Name</code> is unique to avoid conflicts.</li> </ul> <p>Example</p> <pre><code>Name: UserResource\n</code></pre>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#metadata","title":"<code>Metadata</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An object containing metadata about the resource.</li> </ul>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#metadatatags","title":"<code>Metadata.Tags</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>[]string</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Labels for the resource, used for filtering, grouping, and selection purposes.</li> </ul> <p>Usage</p> <p>Use <code>Tags</code> to categorize and manage resources more effectively.</p> <p>Notes</p> <ul> <li><code>Tags</code> can be used for filtering and organizing resources based on specific criteria.</li> </ul> <p>Examples</p> <pre><code>MetaData:\n  Tags:\n  - catalog\n  - category\n</code></pre>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#specifications","title":"<code>Specifications</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: Contains specific details about the resource instance.</li> </ul>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#specificationsname","title":"<code>Specifications.Name</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: The name given to the resource instance. This is used during development or generation processes. While the name in the header identifies the model, the name in the specifications identifies the instance of the resource.</li> </ul> <p>Usage</p> <p>This <code>Name</code> is used to reference the specific instance of the resource.</p> <p>Notes</p> <ul> <li>Different from the header <code>Name</code>, which identifies the model.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Name: Categories\n</code></pre>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#specificationsset","title":"<code>Specifications.Set</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An optional field used to group resources, similar to projects.</li> </ul> <p>Usage</p> <p>Use <code>Set</code> to group related resources together.</p> <p>Notes</p> <ul> <li>Useful for managing related resources in a microservices architecture or monolithic application.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Set: EShopping\n</code></pre>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#specificationslayers","title":"<code>Specifications.Layers</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>array</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Defines layers where only the name is specified.</li> </ul> <p>Usage</p> <p>Specifies layers to organize the resource's structure.</p> <p>Notes</p> <ul> <li>Similar to the layers in projects, but only the name is specified without path and package information.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Layers:\n  - Name: catalog\n</code></pre>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#specificationslayersname","title":"<code>specifications.layers.name</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: The name of the layer, used as an identifier in Pars and in code generation.</li> </ul> <p>Usage</p> <p>Specifies the <code>Name</code> of the layer.</p> <p>Notes</p> <ul> <li>The <code>Name</code> should be compliant with the naming conventions of the target programming language.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Layers:\n  - Name: catalog\n</code></pre>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#specificationslayerssections","title":"<code>Specifications.Layers.Sections</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>array</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Additional sections for complex structures.</li> </ul> <p>Usage</p> <p>Specifies additional sections for complex resource structures in layer.</p> <p>Notes</p> <ul> <li>Sections can contain nested classes, attributes, options, labels, and methods.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Layers:\n    - Name: catalog\n      Sections:\n      - Name: ValidatorSection\n        Classes:\n        - Name: Address\n          Attributes:\n          - Name: street\n          - Name: city\n          Methods:\n          - Name: validate\n</code></pre>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#specificationslabels","title":"<code>Specifications.Labels</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>object</code></li> <li>Type: <code>map</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Key-value pairs for filtering and selection.</li> </ul> <p>Usage</p> <p>Specifies labels to manage and organize resources based on key-value pairs.</p> <p>Notes</p> <ul> <li>Labels can be used for filtering and selection in future decision-making processes.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Labels:\n    environment: production\n    module: product\n</code></pre>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#specificationsdata","title":"<code>Specifications.Data</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>array</code> or <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: YAML formatted data. Any data compliant with YAML standards can be defined here.</li> </ul> <p>Usage</p> <p>The <code>Data</code> field allows for the definition of data in YAML format. This data can be used to seed databases, initialize configurations, or any other purpose where predefined data is required.</p> <p>Example</p> <pre><code>Specifications:\n    Data:\n    - id: 1\n        Name: Electronics\n    - id: 2\n        Name: Clothing\n    - id: 3\n        Name: Home &amp; Kitchen\n</code></pre>"},{"location":"guides/schemas/object/resource/data-resource-object-model.html#examples","title":"Examples","text":"Example <pre><code>Type: Resource\nKind: Data\nName: Product_SeedDataTypes\nMetaData:\nSpecifications:\nName: ProductType\nSet: EShopping\nLayers: \n- Name:\n    Sections:\n    - Name:\n        Classes:\n        Attributes:\n        Options:\n        Labels:\n        Methods:\nLabels: \nData:\n    - id: 1\n    Name: Electronics\n    - id: 2\n    Name: Clothing\n    - id: 3\n    Name: Home &amp; Kitchen\n</code></pre> <p>This document provides detailed information about the <code>Data Resource</code> model used in Pars. The <code>Data Resource</code> model is defined with specific fields that help in structuring and managing different data resources. The <code>Data</code> field allows for flexible and YAML-compliant data definitions.</p> <p> </p>"},{"location":"guides/schemas/object/resource/data-type-object-model.html","title":"Data Type Object Model","text":""},{"location":"guides/schemas/object/resource/data-type-object-model.html#overview","title":"Overview","text":"<p>The <code>DataType</code> object defines the data type for attributes, method parameters, and return values within a resource. This documentation provides a detailed explanation of the fields and usage of the <code>DataType</code> object.</p> <p>YAML Structure</p> <pre><code>Type:\n  Name: \n  Category: value|resource|reference\n  Generics:\n    - Name: \n      Category: \n      Generics:\n        - Name: \n          Category: \n</code></pre> <p>Summary</p> <ul> <li><code>Name</code>: The name of the data type.</li> <li><code>Category</code>: The category of the data type. Can be <code>value</code>, <code>resource</code>, or <code>reference</code>.</li> <li><code>Generics</code>: Specifies the generic parameters for the data type.</li> </ul> <p>Fields</p> <ul> <li>Name: <code>String</code></li> <li>Category: <code>Enum</code></li> <li>Generics: <code>[]DataType</code></li> </ul> <p>Required Fields</p> <ul> <li><code>Name</code></li> </ul>"},{"location":"guides/schemas/object/resource/data-type-object-model.html#field-descriptions","title":"Field Descriptions","text":""},{"location":"guides/schemas/object/resource/data-type-object-model.html#name","title":"<code>Name</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: The name of the data type. Can be a value type, another resource, or a reference type.</li> </ul> <p>Usage</p> <p>Specifies the name of the data type.</p> <p>Notes</p> <ul> <li>Value types are built-in types such as <code>Int</code>, <code>String</code>, etc. You can see all Value Types</li> <li>Resource types refer to existing resources in Pars.</li> <li>Reference types refer to types defined in external packages or frameworks.</li> </ul> <p>Example</p> <pre><code>Type:\n  Name: String\n</code></pre>"},{"location":"guides/schemas/object/resource/data-type-object-model.html#category","title":"<code>Category</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>Enum</code></li> <li>Type: <code>enum</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: <code>value</code>, <code>resource</code>, <code>reference</code></li> <li>Description: Specifies the category of the data type.</li> </ul> <p>Usage</p> <p>Defines the category of the data type.</p> <p>Notes</p> <ul> <li><code>value</code>: Built-in types like <code>Int</code>, <code>String</code>.</li> <li><code>resource</code>: Existing resources in Pars.</li> <li><code>reference</code>: External types from frameworks or packages.</li> </ul> <p>Example</p> <pre><code>Type:\n  Category: value\n</code></pre>"},{"location":"guides/schemas/object/resource/data-type-object-model.html#generics","title":"<code>Generics</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>[]DataType</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Specifies the generic parameters for the data type.</li> </ul> <p>Usage</p> <p>Defines the generic parameters for the data type</p> <p>Notes</p> <ul> <li>Used for complex types that require generic parameters.</li> </ul> <p>Example</p> <pre><code>Type:\n  Name: List\n  Generics:\n  - Name: String\n    Category: value\n</code></pre>"},{"location":"guides/schemas/object/resource/data-type-object-model.html#examples","title":"Examples","text":"Example <pre><code>Type:\n  Name: Dictionary\n  Category: reference\n  Generics:\n  - Name: String\n    Category: value\n  - Name: Int\n    Category: value\n</code></pre> <p>This document provides detailed information about the <code>DataType</code> object used in Pars. The <code>DataType</code> object is defined with specific fields that help in structuring and managing different value types within resources, method parameters, and return values.</p> <p> </p>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html","title":"Object Resource Object Model","text":""},{"location":"guides/schemas/object/resource/object-resource-object-model.html#overview","title":"Overview","text":"<p>YAML Structure</p> <pre><code>Type: Resource\nKind: Object\nName:  \nMetadata:\nSpecifications:\n  Name: \n  Set: \n  Layers: \n  - Name:\n    Sections:\n      - Name:\n        Classes:\n        Attributes:\n        Options:\n        Labels:\n        Methods:\n  Labels: \n  Attributes: \n    - Name: \n    - Name: \n      Type: \n        Name: \n        Category: resource\n      Labels: \n      Category: value|resource|reference\n      Common: \n      Generics: \n        - Name: \n          Category: \n          Generics: \n            - Name: \n              Category: \n  Methods: \n    - Name: \n      Options: \n      Labels: \n      Parameters: \n      Returns: \n      Code: \n      Common: false\n</code></pre> <p>Summary</p> <ul> <li><code>Type</code>: Must always be <code>Resource</code>.</li> <li><code>Kind</code>: Should be <code>Object</code>.</li> <li><code>Name</code>: Unique identifier for the resource.</li> <li><code>Metadata</code>: Contains <code>Tags</code> for labeling and categorization.</li> <li><code>Specifications</code>:<ul> <li><code>Name</code>: Instance name used in development and generation.</li> <li><code>Set</code>: Optional. Used to group resources, similar to projects.</li> <li><code>Layers</code>: Defines layers where only the name is specified.</li> <li><code>Labels</code>: Key-value pairs for filtering and selection.</li> <li><code>Attributes</code>: Defines the fields of the resource.</li> <li><code>Methods</code>: Function definitions of the resource.</li> </ul> </li> </ul> <p>Fields</p> <ul> <li>Type: <code>Resource</code></li> <li>Kind: <code>Object</code></li> <li>Name: <code>String</code></li> <li>Metadata: <code>Metadata</code></li> <li>Specifications: <code>Specifications</code></li> </ul> <p>Required Fields</p> <ul> <li><code>Type</code></li> <li><code>Kind</code></li> <li><code>Name</code></li> <li><code>Specifications.Name</code></li> </ul>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#field-descriptions","title":"Field Descriptions","text":""},{"location":"guides/schemas/object/resource/object-resource-object-model.html#type","title":"<code>Type</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Must be <code>Resource</code></li> <li>Description: Specifies the type of the model.</li> </ul> <p>Usage</p> <p>The <code>Type</code> field identifies the model type as a Resource.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>Resource</code>.</li> </ul> <p>Example</p> <pre><code>Type: Resource\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#kind","title":"<code>Kind</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Must be <code>Object</code></li> <li>Description: Specifies the kind of the resource.</li> </ul> <p>Usage</p> <p>The <code>Kind</code> field identifies the resource type as an Object.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>Object</code>.</li> </ul> <p>Example</p> <pre><code>Kind: Object\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#name","title":"<code>Name</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Any string value that ensures uniqueness within the environment.</li> <li>Description: A unique identifier for the resource, assigned by the developer. This name should be unique within the selected environment.</li> </ul> <p>Usage</p> <p>The <code>Name</code> is used to identify the resource model and must align with the project architecture and plan.</p> <p>Notes</p> <ul> <li>Ensure the <code>Name</code> is unique to avoid conflicts.</li> </ul> <p>Example</p> <pre><code>Name: UserResource\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#metadata","title":"<code>Metadata</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An object containing metadata about the resource.</li> </ul>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#metadatatags","title":"<code>Metadata.Tags</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>[]string</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Labels for the resource, used for filtering, grouping, and selection purposes.</li> </ul> <p>Usage</p> <p>Use <code>Tags</code> to categorize and manage resources more effectively.</p> <p>Notes</p> <ul> <li><code>Tags</code> can be used for filtering and organizing resources based on specific criteria.</li> </ul> <p>Examples</p> <pre><code>Metadata:\n  tags:\n  - backend\n  - user\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specifications","title":"<code>Specifications</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: Contains specific details about the resource instance.</li> </ul>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsname","title":"<code>Specifications.Name</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: The name given to the resource instance. This is used during development or generation processes. While the name in the header identifies the model, the name in the specifications identifies the instance of the resource.</li> </ul> <p>Usage</p> <p>This <code>Name</code> is used to reference the specific instance of the resource.</p> <p>Notes</p> <ul> <li>Different from the header <code>Name</code>, which identifies the model.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Name: User\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsset","title":"<code>Specifications.Set</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An optional field used to group resources, similar to projects.</li> </ul> <p>Usage</p> <p>Use <code>Set</code> to group related resources together.</p> <p>Notes</p> <ul> <li>Useful for managing related resources in a microservices architecture or monolithic application.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Set: EShopping\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationslayers","title":"<code>Specifications.Layers</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>array</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Defines layers where only the name is specified.</li> </ul> <p>Usage</p> <p>Specifies layers to organize the resource's structure.</p> <p>Notes</p> <ul> <li>Similar to the layers in projects, but only the name is specified without path and package information.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  layers:\n  - Name: Controllers\n  - Name: Services\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationslayersname","title":"<code>Specifications.Layers.Name</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: The name of the layer, used as an identifier in Pars and in code generation.</li> </ul> <p>Usage</p> <p>Specifies the <code>Name</code> of the layer.</p> <p>Notes</p> <ul> <li>The <code>Name</code> should be compliant with the naming conventions of the target programming language.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  layers:\n  - Name: Controllers\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationslayerssections","title":"<code>Specifications.Layers.Sections</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>array</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Additional sections for complex structures.</li> </ul> <p>Usage</p> <p>Specifies additional sections for complex resource structures in layer.</p> <p>Notes</p> <ul> <li>Sections can contain nested classes, attributes, options, labels, and methods.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  layers:\n    - Name: Validation\n      Sections:\n      - Name: ValidatorSection\n        Classes:\n        - Name: Address\n          Attributes:\n          - Name: street\n          - Name: city\n          Methods:\n          - Name: validate\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationslabels","title":"<code>Specifications.Labels</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>object</code></li> <li>Type: <code>map</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Key-value pairs for filtering and selection.</li> </ul> <p>Usage</p> <p>Specifies labels to manage and organize resources based on key-value pairs.</p> <p>Notes</p> <ul> <li>Labels can be used for filtering and selection in future decision-making processes.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Labels:\n    environment: production\n    module: user\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsattributes","title":"<code>Specifications.Attributes</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>array</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Defines the fields of the resource, corresponding to properties in a class.</li> </ul> <p>Usage</p> <p>Specifies the attributes of the resource.</p> <p>Notes</p> <ul> <li>Attributes can be defined inline with just the name or as objects for more advanced configurations.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Attributes:\n  - Name: firstName\n  - Name: age\n    Type:\n      Name: Int\n      Category: value\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsattributesname","title":"<code>Specifications.Attributes.Name</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: The name of the attribute, used as an identifier in Pars and in code generation.</li> </ul> <p>Usage</p> <p>Specifies the <code>Name</code> of the attribute.</p> <p>Notes</p> <ul> <li>The <code>Name</code> should be compliant with the naming conventions of the target programming language.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Attributes:\n  - Name: firstName\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsattributestype","title":"<code>Specifications.Attributes.Type</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>DataType</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Specifies the data type of the attribute.</li> </ul> <p>Usage</p> <p>Defines the data type of the attribute.</p> <p>Notes</p> <ul> <li>Inline for value types or as an object for advanced configurations.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Attributes:\n  - Name: age\n    Type:\n      Name: Int\n      Category: value\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsattributescommon","title":"<code>Specifications.Attributes.Common</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>boolean</code></li> <li>Type: <code>boolean</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>true</code></li> <li>Description: Indicates whether the attribute is common and generally usable.</li> </ul> <p>Usage</p> <p>Specifies if the attribute is common or specialized.</p> <p>Notes</p> <ul> <li>Default value is <code>true</code>.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Attributes:\n  - Name: fullName\n    Common: false\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsmethods","title":"<code>Specifications.Methods</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>array</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Defines the methods of the resource.</li> </ul> <p>Usage</p> <p>Specifies the methods of the resource.</p> <p>Notes</p> <ul> <li>Methods can be defined inline or as objects for more advanced configurations.</li> </ul>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsmethodsname","title":"<code>Specifications.Methods.Name</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: The name of the method.</li> </ul> <p>Usage</p> <p>Specifies the name of the method.</p> <p>Notes</p> <ul> <li>The <code>Name</code> should be compliant with the naming conventions of the target programming language.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Methods:\n  - Name: calculateAge\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsmethodsoptions","title":"<code>Specifications.Methods.Options</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Additional options for the method.</li> </ul> <p>Usage</p> <p>Specifies additional options for the method.</p> <p>Example</p> <pre><code>Specifications:\n  Methods:\n  - Name: calculateAge\n    Options:\n      async: true\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsmethodslabels","title":"<code>Specifications.Methods.Labels</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>object</code></li> <li>Type: <code>map</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Labels for the method.</li> </ul> <p>Usage</p> <p>Specifies labels to manage and organize methods based on key-value pairs.</p> <p>Notes</p> <ul> <li>Labels can be used for filtering and selection in future decision-making processes.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Methods:\n  - Name: calculateAge\n    Labels:\n      utility: true\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsmethodsparameters","title":"<code>Specifications.Methods.Parameters</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>array</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Defines the parameters of the method.</li> </ul> <p>Usage</p> <p>Specifies the parameters of the method.</p> <p>Notes</p> <ul> <li>Parameters can be defined inline or as objects for more advanced configurations.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Methods:\n  - Name: calculateAge\n    Parameters:\n    - Name: birthDate\n      Type:\n        Name: Date\n        Category: value\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsmethodsparametersname","title":"<code>Specifications.Methods.Parameters.Name</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: The name of the parameter, used as an identifier in Pars and in code generation.</li> </ul> <p>Usage</p> <p>Specifies the <code>Name</code> of the parameter.</p> <p>Notes</p> <ul> <li>The <code>Name</code> should be compliant with the naming conventions of the target programming language.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Methods:\n    Parameters:\n    - Name: firstName\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsmethodsparameterstype","title":"<code>Specifications.Methods.Parameters.Type</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>DataType</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Specifies the data type of the parameter.</li> </ul> <p>Usage</p> <p>Defines the data type of the parameter.</p> <p>Notes</p> <ul> <li>Inline for value types or as an object for advanced configurations.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Methods:\n    Parameters:\n    - Name: age\n      Type:\n        Name: Int\n        Category: value\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsmethodsreturns","title":"<code>Specifications.Methods.Returns</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>array</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Defines the return values of the method.</li> </ul> <p>Usage</p> <p>Specifies the return values of the method.</p> <p>Notes</p> <ul> <li>Return values can be defined inline or as objects for more advanced configurations.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Methods:\n  - Name: calculateAge\n    Returns:\n    - Name: age\n      Type:\n        Name: Int\n        Category: value\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsmethodsreturnsname","title":"<code>Specifications.Methods.Returns.Name</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: The name of the return, used as an identifier in Pars and in code generation.</li> </ul> <p>Usage</p> <p>Specifies the <code>Name</code> of the return.</p> <p>Notes</p> <ul> <li>The <code>Name</code> should be compliant with the naming conventions of the target programming language.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Methods:\n    Returns:\n    - Name: firstName\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsmethodsreturnstype","title":"<code>Specifications.Methods.Returns.Type</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>DataType</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Specifies the data type of the return.</li> </ul> <p>Usage</p> <p>Defines the data type of the return.</p> <p>Notes</p> <ul> <li>Inline for value types or as an object for advanced configurations.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Methods:\n    Returns:\n    - Name: age\n      Type:\n        Name: Int\n        Category: value\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsmethodscode","title":"<code>Specifications.Methods.Code</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: The code of the method.</li> </ul> <p>Usage</p> <p>Specifies the body of the method.</p> <p>Example</p> <pre><code>Specifications:\n  Methods:\n  - Name: calculateAge\n    Code: |\n      return new Date().getFullYear() - birthDate.getFullYear();\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#specificationsmethodscommon","title":"<code>Specifications.Methods.Common</code>","text":"<p>Definition</p> <ul> <li>Datatype: <code>boolean</code></li> <li>Type: <code>boolean</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>true</code></li> <li>Description: Indicates whether the method is common and generally usable.</li> </ul> <p>Usage</p> <p>Specifies if the method is common or specialized.</p> <p>Notes</p> <ul> <li>Default value is <code>true</code>.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Methods:\n  - Name: calculateAge\n    Common: true\n</code></pre>"},{"location":"guides/schemas/object/resource/object-resource-object-model.html#examples","title":"Examples","text":"Example <pre><code>Type: Resource\nKind: Object\nName: UserResource\nMetadata:\ntags: [user, resource]\nSpecifications:\nName: User\nSet: EShopping\nlayers:\n- Name: Controllers\n  Sections:\n  - Name: AddressSection\n      Classes:\n      - Name: Address\n      Attributes:\n      - Name: street\n      - Name: city\n      Methods:\n      - Name: validate\n- Services\nLabels:\n    environment: production\n    module: user\nAttributes:\n- Name: firstName\n    Type:\n    Name: String\n    Category: value\n    Labels:\n    Required: true\n    Common: true\n- Name: lastName\n    Type:\n    Name: String\n    Category: value\n    Labels:\n    Required: true\n    Common: true\n- Name: age\n    Type:\n    Name: Int\n    Category: value\n    Labels:\n    Required: true\n    Common: true\n- Name: address\n    Type:\n    Name: AddressResource\n    Category: resource\n    Labels:\n    Required: false\n    Common: true\nMethods:\n- Name: getFullName\n    Options:\n    async: false\n    Labels:\n    utility: true\n    Parameters:\n    - Name: title\n    Type:\n        Name: String\n        Category: value\n    Returns:\n    - Name: fullName\n    Type:\n        Name: String\n        Category: value\n    Code: |\n    return `${title} ${this.firstName} ${this.lastName}`;\n    Common: true\n</code></pre> <p>This document provides detailed information about the <code>Object Resource</code> model used in Pars. The <code>Object Resource</code> model is defined with specific fields and sections that help in structuring and managing different resources.</p> <p> </p>"},{"location":"guides/schemas/object/task/task-object-model.html","title":"Task Object Model","text":""},{"location":"guides/schemas/object/template/code-template-context-object.html","title":"Code Template Context","text":""},{"location":"guides/schemas/object/template/code-template-context-object.html#overview","title":"Overview","text":"<p>Summary</p> <p> </p>"},{"location":"guides/schemas/object/template/code-template-design.html","title":"Shared Template Design","text":""},{"location":"guides/schemas/object/template/code-template-design.html#overview","title":"Overview","text":"<p>The <code>Design</code> component is a crucial part of the template generation process. It defines the structure, layout, and coding conventions that the generated code will follow. This ensures that the generated code is clean, maintainable, and consistent with project standards.</p>"},{"location":"guides/schemas/object/template/code-template-design.html#purpose","title":"Purpose","text":"<p>The primary purpose of the <code>Design</code> component is to outline the blueprint for the code templates. It provides a standardized framework that guides how the dynamic content will be inserted into the template. This helps in maintaining uniformity across different parts of the codebase and ensures that best practices are followed.</p>"},{"location":"guides/schemas/object/template/code-template-design.html#structure","title":"Structure","text":""},{"location":"guides/schemas/object/template/code-template-design.html#usage","title":"Usage","text":"<p>The <code>Design</code> component is used as follows:</p> <ol> <li>Define the Template Structure: Begin by outlining the overall structure of the template. This includes identifying where dynamic content will be placed and ensuring the layout adheres to coding standards.</li> <li>Specify Placeholders: Insert placeholders in the template where dynamic content will be substituted. These placeholders are marked using a specific syntax (e.g., <code>{{...}}</code>).</li> <li>Maintain Coding Conventions: Ensure that the template follows the project's coding conventions, including naming standards, indentation, and commenting practices.</li> <li>Integrate with Context Data: The design relies on context data to fill in the placeholders. This context data is provided during the template generation process and includes details like resource names, attributes, and additional configurations.</li> <li>Facilitate Reusability and Consistency: By standardizing the template design, it becomes easier to reuse the template across different projects or parts of the project, ensuring consistency and reducing redundancy.</li> </ol>"},{"location":"guides/schemas/object/template/code-template-design.html#benefits","title":"Benefits","text":"<ul> <li>Consistency: Ensures that all generated code follows the same structure and conventions.</li> <li>Maintainability: Makes it easier to update and maintain the code by adhering to a standardized template.</li> <li>Efficiency: Speeds up the development process by providing a ready-made structure that developers can use to quickly generate necessary code components.</li> <li>Quality: Helps in maintaining a high standard of code quality by embedding best practices within the template design.</li> </ul>"},{"location":"guides/schemas/object/template/code-template-design.html#examples","title":"Examples","text":"Example <pre><code>using System;\nusing System.Collections.Generic;\n{{- range $a := .SectionData.Imports }}\nusing {{$a.Package}};\n{{- end }}\n\nnamespace {{.SectionData.Package}}\n{\n    public class {{.Resource.Name}}Service\n    {\n        private readonly IRepository&lt;{{.Resource.Name}}&gt; _repository;\n\n        public {{.Resource.Name}}Service(IRepository&lt;{{.Resource.Name}}&gt; repository)\n        {\n            _repository = repository;\n        }\n\n        public IEnumerable&lt;{{.Resource.Name}}&gt; GetAll()\n        {\n            return _repository.GetAll();\n        }\n\n        public {{.Resource.Name}} GetById(Guid id)\n        {\n            return _repository.GetById(id);\n        }\n\n        public void Create({{.Resource.Name}} entity)\n        {\n            _repository.Add(entity);\n        }\n\n        public void Update({{.Resource.Name}} entity)\n        {\n            _repository.Update(entity);\n        }\n\n        public void Delete(Guid id)\n        {\n            _repository.Remove(id);\n        }\n    }\n}\n</code></pre> <p>This document provides an overview of the <code>Design</code> component, explaining its structure, purpose, usage, and benefits. It serves as a guide for developers to understand the importance of the design in the template generation process and how to effectively utilize it to produce clean, maintainable code.</p> <p> </p>"},{"location":"guides/schemas/object/template/code-template-functions.html","title":"Shared Template Functions","text":""},{"location":"guides/schemas/object/template/code-template-functions.html#overview","title":"Overview","text":""},{"location":"guides/schemas/object/template/code-template-object-model.html","title":"Code Template Object Model","text":""},{"location":"guides/schemas/object/template/code-template-object-model.html#overview","title":"Overview","text":"<p>YAML Structure</p> <pre><code>Type: Template\nKind: Code\nName: \nMetadata:\n  Tags:\nSpecifications:\n  Name: \n  Output:\n  Set: \n  Layers:\n    - Name:\n      Sections:\n        - Classes:\n  Workspace: None\n  Template:\n    Code: |\n      // Your code template goes here\n</code></pre> <p>Summary</p> <ul> <li><code>Type</code>: Must always be <code>Template</code>.</li> <li><code>Kind</code>: Should be <code>Code</code>.</li> <li><code>Name</code>: Unique identifier for the template.</li> <li><code>Metadata</code>: Contains <code>Tags</code> for labeling and categorization.</li> <li><code>Specifications</code>:<ul> <li><code>Name</code>: Instance name used in development and generation.</li> <li><code>Output</code>: Specifies the output file name, can be dynamically set (e.g., <code>{{Resource.Name}}.ts</code>).</li> <li><code>Set</code>: Similar to resource model set, indicates which project group it belongs to.</li> <li><code>Layers</code>: Specifies which layers it applies to.</li> <li><code>Sections</code>: Specifies which sections it applies to, with filtering using classes.</li> <li><code>Workspace</code>: Specifies the workspace where the template is defined. Default is <code>None</code>.</li> <li><code>Template.Code</code>: Defines the code template. Can be multiline.</li> </ul> </li> </ul> <p>Fields</p> <ul> <li>Type: <code>Template</code></li> <li>Kind: <code>Code</code></li> <li>Name: <code>String</code></li> <li>Metadata: <code>Metadata</code></li> <li>Specifications: <code>Specifications</code></li> </ul> <p>Required Fields</p> <ul> <li><code>Type</code></li> <li><code>Kind</code></li> <li><code>Name</code></li> <li><code>Specifications.Name</code></li> </ul>"},{"location":"guides/schemas/object/template/code-template-object-model.html#field-descriptions","title":"Field Descriptions","text":""},{"location":"guides/schemas/object/template/code-template-object-model.html#type","title":"<code>Type</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>Template</code></li> <li>Valid values: Must be <code>Template</code></li> <li>Description: Specifies the type of the model.</li> </ul> <p>Usage</p> <p>The <code>Type</code> field identifies the model type as a Template.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>Template</code>.</li> </ul> <p>Example</p> <pre><code>Type: Template\n</code></pre>"},{"location":"guides/schemas/object/template/code-template-object-model.html#kind","title":"<code>Kind</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>Code</code></li> <li>Valid values: Must be <code>Code</code></li> <li>Description: Specifies the kind of the template.</li> </ul> <p>Usage</p> <p>The <code>Kind</code> field identifies the resource type as an Code.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>Code</code>.</li> </ul> <p>Example</p> <pre><code>Kind: Code\n</code></pre>"},{"location":"guides/schemas/object/template/code-template-object-model.html#name","title":"<code>Name</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Any string value that ensures uniqueness within the environment.</li> <li>Description: A unique identifier for the template, assigned by the developer. This name should be unique within the selected environment.</li> </ul> <p>Usage</p> <p>The <code>Name</code> is used to identify the template and must align with the project architecture and plan.</p> <p>Notes</p> <ul> <li>Ensure the <code>Name</code> is unique to avoid conflicts.</li> </ul> <p>Example</p> <pre><code>Name: DtoTemplate\n</code></pre>"},{"location":"guides/schemas/object/template/code-template-object-model.html#metadata","title":"<code>Metadata</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An object containing metadata about the resource.</li> </ul>"},{"location":"guides/schemas/object/template/code-template-object-model.html#metadatatags","title":"<code>Metadata.Tags</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>[]string</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Labels for the resource, used for filtering, grouping, and selection purposes.</li> </ul> <p>Usage</p> <p>Use <code>Tags</code> to categorize and manage resources more effectively.</p> <p>Notes</p> <ul> <li><code>Tags</code> can be used for filtering and organizing resources based on specific criteria.</li> </ul> <p>Examples</p> <pre><code>Metadata:\n  Tags:\n  - dto\n  - template\n</code></pre>"},{"location":"guides/schemas/object/template/code-template-object-model.html#specifications","title":"<code>Specifications</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: Contains specific details about the template  instance.</li> </ul>"},{"location":"guides/schemas/object/template/code-template-object-model.html#specificationsname","title":"<code>Specifications.Name</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: The name given to the template instance. This is used during development or generation processes.</li> </ul> <p>Usage</p> <p>This <code>Name</code> is used to reference the specific instance of the template.</p> <p>Notes</p> <ul> <li>Different from the header <code>Name</code>, which identifies the model.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Name: ResponseDto\n</code></pre>"},{"location":"guides/schemas/object/template/code-template-object-model.html#specificationsset","title":"<code>Specifications.Set</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An optional field used to group resources, similar to projects.</li> </ul> <p>Usage</p> <p>Use <code>Set</code> to group related resources together.</p> <p>Notes</p> <ul> <li>Useful for managing related resources in a microservices architecture or monolithic application.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Set: EShopping\n</code></pre>"},{"location":"guides/schemas/object/template/code-template-object-model.html#specificationsoutput","title":"<code>Specifications.Output</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: Specifies the output file name. Can be dynamically set using templates.</li> </ul> <p>Usage</p> <p>The <code>Output</code> field specifies the name of the output file. It can use dynamic values from the resource using template syntax.</p> <p>Notes</p> <ul> <li>Used to define reusable code templates for common and standard operations.</li> <li>Can be imported and used in other templates.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Output: '{{.Resource.Name}}Dto.ts'\n</code></pre>"},{"location":"guides/schemas/object/template/code-template-object-model.html#specificationsworkspace","title":"<code>Specifications.Workspace</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>None</code></li> <li>Description: Specifies the workspace where the template is defined.</li> </ul> <p>Usage</p> <p>The <code>Workspace</code> field identifies the workspace in which the template is defined.</p> <p>Notes</p> <ul> <li>If not specified, the default value is None.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Workspace: CommonWorkspace\n</code></pre>"},{"location":"guides/schemas/object/template/code-template-object-model.html#specificationslayers","title":"<code>Specifications.Layers</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>array</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Defines layers where only the name is specified.</li> </ul> <p>Usage</p> <p>Specifies layers to organize the resource's structure.</p> <p>Notes</p> <ul> <li>Similar to the layers in projects, but only the name is specified without path and package information.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Layers:\n  - Name: Controllers\n  - Name: Services\n</code></pre>"},{"location":"guides/schemas/object/template/code-template-object-model.html#specificationslayerssections","title":"<code>Specifications.Layers.Sections</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>array</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Specifies which sections the template applies to, with filtering using classes.</li> </ul> <p>Usage</p> <p>The <code>Sections</code> field specifies which sections the template should be applied to. It can filter within sections using classes.</p> <p>Example</p> <pre><code>Specifications:\n  Layers:\n    - Name: Controllers\n      Sections:\n        - Classes:\n          - ResponseDto\n</code></pre>"},{"location":"guides/schemas/object/template/code-template-object-model.html#specificationstemplatecode","title":"<code>Specifications.Template.Code</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: Defines the code template. Can be multiline.</li> </ul> <p>Usage</p> <p>The <code>Code</code> field allows for the definition of a multiline code template.</p> <p>Notes</p> <ul> <li>Used to define reusable code templates for common and standard operations.</li> <li>Can be imported and used in other templates.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Template:\n    Code: |\n      // This is a shared template\n      // Define your reusable code here\n      function exampleFunction() {\n        console.log(\"Hello, World!\");\n      }\n</code></pre>"},{"location":"guides/schemas/object/template/code-template-object-model.html#examples","title":"Examples","text":"Example <pre><code>Type: Template\nKind: Code\nName: ResponseDto\nMetadata:\nTags:\nSpecifications:\n  Name: ResponseDto\n  Output: '{{template \"ResourceNameTemplate\" .}}.cs'\n  Set: EShopping\n  Layers:\n  - Name: Dtos\n    Sections:\n      - Classes:\n        - ResponseDto\n  Template:\n      Code: |\n      // This is a code template for ResponseDto\n      public class {{.name}} {\n          public string Name { get; set; }\n          public string Description { get; set; }\n      }\n</code></pre> <p>This document provides detailed information about the <code>Data Resource</code> model used in Pars. The <code>Data Resource</code> model is defined with specific fields that help in structuring and managing different data resources. The <code>data</code> field allows for flexible and YAML-compliant data definitions.</p> <p> </p>"},{"location":"guides/schemas/object/template/file-template-context-object.html","title":"Shared Template Context","text":""},{"location":"guides/schemas/object/template/file-template-context-object.html#overview","title":"Overview","text":"<p>YAML Structure</p> <p>Summary</p> <p> </p>"},{"location":"guides/schemas/object/template/file-template-design.html","title":"Shared Template Design","text":""},{"location":"guides/schemas/object/template/file-template-design.html#overview","title":"Overview","text":"<p>Summary</p> <p> </p>"},{"location":"guides/schemas/object/template/file-template-functions.html","title":"Shared Template Functions","text":""},{"location":"guides/schemas/object/template/file-template-functions.html#overview","title":"Overview","text":"<p>Summary</p> <p> </p>"},{"location":"guides/schemas/object/template/file-template-object-model.html","title":"File Template Object Model","text":""},{"location":"guides/schemas/object/template/file-template-object-model.html#overview","title":"Overview","text":"<p>YAML Structure</p> <pre><code>Type: Template\nKind: File\nName: \nMetadata:\n  Tags:\nSpecifications:\n  Name: \n  Output:\n  Set: \n  Layers:\n    - Name: \n      Sections:\n        - Classes:\n  Workspace: None\n  Template:\n    Content: |\n      // Your file content template goes here\n</code></pre> <p>Summary</p> <ul> <li><code>Type</code>: Must always be <code>Template</code>.</li> <li><code>Kind</code>: Should be <code>File</code>.</li> <li><code>Name</code>: Unique identifier for the template.</li> <li><code>Metadata</code>: Contains <code>Tags</code> for labeling and categorization.</li> <li><code>Specifications</code>:<ul> <li><code>Name</code>: Instance name used in development and generation.</li> <li><code>Output</code>: Specifies the output file name, can be dynamically set (e.g., <code>{{Resource.Name}}.json</code>).</li> <li><code>Set</code>: Similar to resource model set, indicates which project group it belongs to.</li> <li><code>Layers</code>: Specifies which layers it applies to.</li> <li><code>Sections</code>: Specifies which sections it applies to, with filtering using classes.</li> <li><code>Workspace</code>: Specifies the workspace where the template is defined. Default is <code>None</code>.</li> <li><code>Template.Content</code>: Defines the file content template. Can be multiline.</li> </ul> </li> </ul> <p>Fields</p> <ul> <li>type: <code>Template</code></li> <li>kind: <code>File</code></li> <li>name: <code>String</code></li> <li>metadata: <code>Metadata</code></li> <li>specifications: <code>Specifications</code></li> </ul> <p>Required Fields</p> <ul> <li><code>Type</code></li> <li><code>Kind</code></li> <li><code>Name</code></li> <li><code>specifications.name</code></li> </ul>"},{"location":"guides/schemas/object/template/file-template-object-model.html#field-descriptions","title":"Field Descriptions","text":""},{"location":"guides/schemas/object/template/file-template-object-model.html#type","title":"<code>Type</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>Template</code></li> <li>Valid values: Must be <code>Template</code></li> <li>Description: Specifies the type of the model.</li> </ul> <p>Usage</p> <p>The <code>Type</code> field identifies the model type as a Template.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>Template</code>.</li> </ul> <p>Example</p> <pre><code>Type: Template\n</code></pre>"},{"location":"guides/schemas/object/template/file-template-object-model.html#kind","title":"<code>Kind</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>File</code></li> <li>Valid values: Must be <code>File</code></li> <li>Description: Specifies the kind of the template.</li> </ul> <p>Usage</p> <p>The <code>Kind</code> field identifies the resource type as an File.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>File</code>.</li> </ul> <p>Example</p> <pre><code>Kind: File\n</code></pre>"},{"location":"guides/schemas/object/template/file-template-object-model.html#name","title":"<code>Name</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Any string value that ensures uniqueness within the environment.</li> <li>Description: A unique identifier for the template, assigned by the developer. This name should be unique within the selected environment.</li> </ul> <p>Usage</p> <p>The <code>Name</code> is used to identify the template and must align with the project architecture and plan.</p> <p>Notes</p> <ul> <li>Ensure the <code>Name</code> is unique to avoid conflicts.</li> </ul> <p>Example</p> <pre><code>Name: DtoTemplate\n</code></pre>"},{"location":"guides/schemas/object/template/file-template-object-model.html#metadata","title":"<code>Metadata</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An object containing metadata about the resource.</li> </ul>"},{"location":"guides/schemas/object/template/file-template-object-model.html#metadatatags","title":"<code>Metadata.Tags</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>[]string</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Labels for the resource, used for filtering, grouping, and selection purposes.</li> </ul> <p>Usage</p> <p>Use <code>Tags</code> to categorize and manage resources more effectively.</p> <p>Notes</p> <ul> <li><code>Tags</code> can be used for filtering and organizing resources based on specific criteria.</li> </ul> <p>Examples</p> <pre><code>Metadata:\n  Tags:\n  - dto\n  - template\n</code></pre>"},{"location":"guides/schemas/object/template/file-template-object-model.html#specifications","title":"<code>Specifications</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: Contains specific details about the template  instance.</li> </ul>"},{"location":"guides/schemas/object/template/file-template-object-model.html#specificationsname","title":"<code>Specifications.Name</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: The name given to the template instance. This is used during development or generation processes.</li> </ul> <p>Usage</p> <p>This <code>Name</code> is used to reference the specific instance of the template.</p> <p>Notes</p> <ul> <li>Different from the header <code>Name</code>, which identifies the model.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Name: ResponseDto\n</code></pre>"},{"location":"guides/schemas/object/template/file-template-object-model.html#specificationsset","title":"<code>Specifications.Set</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An optional field used to group resources, similar to projects.</li> </ul> <p>Usage</p> <p>Use <code>Set</code> to group related resources together.</p> <p>Notes</p> <ul> <li>Useful for managing related resources in a microservices architecture or monolithic application.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Set: EShopping\n</code></pre>"},{"location":"guides/schemas/object/template/file-template-object-model.html#specificationsoutput","title":"<code>Specifications.Output</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: Specifies the output file name. Can be dynamically set using templates.</li> </ul> <p>Usage</p> <p>The <code>Output</code> field specifies the name of the output file. It can use dynamic values from the resource using template syntax.</p> <p>Notes</p> <ul> <li>Used to define reusable file templates for common and standard operations.</li> <li>Can be imported and used in other templates.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Output: '{{.Resource.Name}}Dto.ts'\n</code></pre>"},{"location":"guides/schemas/object/template/file-template-object-model.html#specificationsworkspace","title":"<code>Specifications.Workspace</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>None</code></li> <li>Description: Specifies the workspace where the template is defined.</li> </ul> <p>Usage</p> <p>The <code>Workspace</code> field identifies the workspace in which the template is defined.</p> <p>Notes</p> <ul> <li>If not specified, the default value is None.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Workspace: CommonWorkspace\n</code></pre>"},{"location":"guides/schemas/object/template/file-template-object-model.html#specificationslayers","title":"<code>Specifications.Layers</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>array</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Defines layers where only the name is specified.</li> </ul> <p>Usage</p> <p>Specifies layers to organize the resource's structure.</p> <p>Notes</p> <ul> <li>Similar to the layers in projects, but only the name is specified without path and package information.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Layers:\n  - Name: Controllers\n  - Name: Services\n</code></pre>"},{"location":"guides/schemas/object/template/file-template-object-model.html#specificationslayerssections","title":"<code>Specifications.Layers.Sections</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>array</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Specifies which sections the template applies to, with filtering using classes.</li> </ul> <p>Usage</p> <p>The <code>Sections</code> field specifies which sections the template should be applied to. It can filter within sections using classes.</p> <p>Example</p> <pre><code>Specifications:\n  Layers:\n    - Name: Controllers\n      Sections:\n        - Classes:\n          - ResponseDto\n</code></pre>"},{"location":"guides/schemas/object/template/file-template-object-model.html#specificationstemplatecontent","title":"<code>Specifications.Template.Content</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: Defines the content template. Can be multiline.</li> </ul> <p>Usage</p> <p>The <code>Content</code> field allows for the definition of a multiline content template.</p> <p>Notes</p> <ul> <li>Used to define reusable content templates for common and standard operations.</li> <li>Can be imported and used in other templates.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Template:\n    Content: |\n      {\n        \"name\": \"{{.Resource.Name}}\",\n        \"description\": \"This is a data template for {{.Resource.Name}}\"\n      }\n</code></pre>"},{"location":"guides/schemas/object/template/file-template-object-model.html#examples","title":"Examples","text":"Example <pre><code>Type: Template\nKind: File\nName: ResponseDto\nMetadata:\nTags:\nSpecifications:\n  Name: ResponseDto\n  Output: '{{template \"ResourceNameTemplate\" .}}.json'\n  Set: EShopping\n  Layers:\n  - Name: Dtos\n    Sections:\n      - Classes:\n        - ResponseDto\n  Template:\n      Content: |\n      {\n          \"name\": \"{{.Resource.Name}}\",\n          \"description\": \"This is a data template for {{.Resource.Name}}\"\n      }\n</code></pre> <p>This document provides detailed information about the <code>File Template</code> model used in Pars. The <code>File Template</code> model is defined with specific fields that help in structuring and managing different file templates. The <code>data</code> field allows for flexible and YAML-compliant data definitions.</p> <p> </p>"},{"location":"guides/schemas/object/template/shared-template-context-object.html","title":"Shared Template Context","text":""},{"location":"guides/schemas/object/template/shared-template-context-object.html#overview","title":"Overview","text":"<p>Summary</p> <p> </p>"},{"location":"guides/schemas/object/template/shared-template-design.html","title":"Shared Template Design","text":""},{"location":"guides/schemas/object/template/shared-template-design.html#overview","title":"Overview","text":"<p>Summary</p> <p> </p>"},{"location":"guides/schemas/object/template/shared-template-functions.html","title":"Shared Template Functions","text":""},{"location":"guides/schemas/object/template/shared-template-functions.html#overview","title":"Overview","text":"<p>Summary</p> <p> </p>"},{"location":"guides/schemas/object/template/shared-template-object-model.html","title":"Shared Template Object Model","text":""},{"location":"guides/schemas/object/template/shared-template-object-model.html#overview","title":"Overview","text":"<p>YAML Structure</p> <pre><code>Type: Template\nKind: Shared\nName: \nMetadata:\n  Tags:\nSpecifications:\n  Name: \n  Workspace: \n  Template:\n    Content: |\n      // Your template content goes here\n</code></pre> <p>Summary</p> <ul> <li><code>Type</code>: Must always be <code>Template</code>.</li> <li><code>Kind</code>: Should be <code>Shared</code>.</li> <li><code>Name</code>: Unique identifier for the template.</li> <li><code>Metadata</code>: Contains <code>Tags</code> for labeling and categorization.</li> <li><code>Specifications</code>:<ul> <li><code>Name</code>: Instance name used in development and generation.</li> <li><code>Workspace</code>: Specifies the workspace where the template is defined. Default is <code>None</code>.</li> <li><code>Template</code>: Defines the template.</li> </ul> </li> </ul> <p>Fields</p> <ul> <li>Type: <code>Template</code></li> <li>Kind: <code>Shared</code></li> <li>Name: <code>String</code></li> <li>Metadata: <code>Metadata</code></li> <li>Specifications: <code>Specifications</code></li> </ul> <p>Required Fields</p> <ul> <li><code>Type</code></li> <li><code>Kind</code></li> <li><code>Name</code></li> <li><code>Specifications.Name</code></li> </ul>"},{"location":"guides/schemas/object/template/shared-template-object-model.html#field-descriptions","title":"Field Descriptions","text":""},{"location":"guides/schemas/object/template/shared-template-object-model.html#type","title":"<code>Type</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Must be <code>Template</code></li> <li>Description: Specifies the type of the model.</li> </ul> <p>Usage</p> <p>The <code>Type</code> field identifies the model type as a Template.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>Template</code>.</li> </ul> <p>Example</p> <pre><code>Type: Template\n</code></pre>"},{"location":"guides/schemas/object/template/shared-template-object-model.html#kind","title":"<code>Kind</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>fixed-value</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Must be <code>Shared</code></li> <li>Description: Specifies the kind of the resource.</li> </ul> <p>Usage</p> <p>The <code>Kind</code> field identifies the resource type as an Shared.</p> <p>Notes</p> <ul> <li>This field is mandatory and must always be set to <code>Shared</code>.</li> </ul> <p>Example</p> <pre><code>Kind: Shared\n</code></pre>"},{"location":"guides/schemas/object/template/shared-template-object-model.html#name","title":"<code>Name</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Valid values: Any string value that ensures uniqueness within the environment.</li> <li>Description: A unique identifier for the resource, assigned by the developer. This name should be unique within the selected environment.</li> </ul> <p>Usage</p> <p>The <code>Name</code> is used to identify the resource model and must align with the project architecture and plan.</p> <p>Notes</p> <ul> <li>Ensure the <code>Name</code> is unique to avoid conflicts.</li> </ul> <p>Example</p> <pre><code>Name: UserResource\n</code></pre>"},{"location":"guides/schemas/object/template/shared-template-object-model.html#metadata","title":"<code>Metadata</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An object containing metadata about the resource.</li> </ul>"},{"location":"guides/schemas/object/template/shared-template-object-model.html#metadatatags","title":"<code>Metadata.Tags</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>[]string</code></li> <li>Type: <code>list</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: Labels for the resource, used for filtering, grouping, and selection purposes.</li> </ul> <p>Usage</p> <p>Use <code>Tags</code> to categorize and manage resources more effectively.</p> <p>Notes</p> <ul> <li><code>Tags</code> can be used for filtering and organizing resources based on specific criteria.</li> </ul> <p>Examples</p> <pre><code>Metadata:\n  Tags:\n  - catalog\n  - category\n</code></pre>"},{"location":"guides/schemas/object/template/shared-template-object-model.html#specifications","title":"<code>Specifications</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>object</code></li> <li>Type: <code>structured-data</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: Contains specific details about the resource instance.</li> </ul>"},{"location":"guides/schemas/object/template/shared-template-object-model.html#specificationsname","title":"<code>Specifications.Name</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: The name given to the resource instance. This is used during development or generation processes. While the name in the header identifies the model, the name in the specifications identifies the instance of the resource.</li> </ul> <p>Usage</p> <p>This <code>Name</code> is used to reference the specific instance of the resource.</p> <p>Notes</p> <ul> <li>Different from the header <code>Name</code>, which identifies the model.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Name: Categories\n</code></pre>"},{"location":"guides/schemas/object/template/shared-template-object-model.html#specificationsset","title":"<code>specifications.Set</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>none</code></li> <li>Description: An optional field used to group resources, similar to projects.</li> </ul> <p>Usage</p> <p>Use <code>Set</code> to group related resources together.</p> <p>Notes</p> <ul> <li>Useful for managing related resources in a microservices architecture or monolithic application.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  set: EShopping\n</code></pre>"},{"location":"guides/schemas/object/template/shared-template-object-model.html#specificationsworkspace","title":"<code>specifications.Workspace</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Optional</li> <li>Default: <code>None</code></li> <li>Description: Specifies the workspace where the template is defined.</li> </ul> <p>Usage</p> <p>The <code>Workspace</code> field identifies the workspace in which the template is defined.</p> <p>Notes</p> <ul> <li>If not specified, the default value is None.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Workspace: CommonWorkspace\n</code></pre>"},{"location":"guides/schemas/object/template/shared-template-object-model.html#specificationstemplatecontent","title":"<code>specifications.Template.Content</code>","text":"<p>Definition</p> <ul> <li>DataType: <code>String</code></li> <li>Type: <code>text</code></li> <li>Multiplicity: Required</li> <li>Default: <code>none</code></li> <li>Description: Defines the code template. Can be multiline.</li> </ul> <p>Usage</p> <p>The <code>Content</code> field allows for the definition of a multiline code template. You can use 6251a85a-47d0-11ee-be56-0242ac120002:_:shared-template-context-object.html::a0d4f8ff399758d210db96823bc89d23 <p>Notes</p> <ul> <li>Used to define reusable code templates for common and standard operations.</li> <li>Can be imported and used in other templates.</li> </ul> <p>Example</p> <pre><code>Specifications:\n  Template:\n    Content: |\n      // This is a shared template\n      // Define your reusable code here\n      function exampleFunction() {\n        console.log(\"Hello, World!\");\n      }\n</code></pre>"},{"location":"guides/schemas/object/template/shared-template-object-model.html#examples","title":"Examples","text":"Example <pre><code>Type: Template\nKind: Shared\nName: ResourceNameTemplate\nMetadata:\nTags:\nSpecifications:\n  Name: ResourceNameTemplate\n  Workspace: CommonWorkspace\n  Template:\n      Content: |\n      // This is a shared template\n      // Define your reusable code here\n      function exampleFunction() {\n          console.log(\"Hello, World!\");\n      }\n</code></pre> <p>This document provides detailed information about the <code>Data Resource</code> model used in Pars. The <code>Data Resource</code> model is defined with specific fields that help in structuring and managing different data resources. The <code>data</code> field allows for flexible and YAML-compliant data definitions.</p> <p> </p>"},{"location":"references/index.html","title":"References","text":""},{"location":"samples/index.html","title":"Samples","text":""},{"location":"samples/admonitions.html","title":"Admonitions","text":""},{"location":"samples/admonitions.html#features","title":"Features","text":""},{"location":"samples/admonitions.html#adding-title","title":"Adding Title","text":"<p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#removing-title","title":"Removing Title","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#collapsable","title":"Collapsable","text":"Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#collapsable-initially-expanded","title":"Collapsable (Initially expanded)","text":"Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#use-cases","title":"Use Cases","text":""},{"location":"samples/admonitions.html#link-on-header","title":"Link on Header","text":"Recommended: configuration validation and auto-complete <p>In order to minimize friction and maximize productivity, Material for MkDocs provides its own [schema.json]<sup>1</sup> for <code>mkdocs.yml</code>. If your editor supports YAML schema validation, it's definitely recommended to set it up:</p>"},{"location":"samples/admonitions.html#tabbing-in-content","title":"Tabbing in Content","text":"Recommended <p>In order to minimize friction and maximize productivity, Material for MkDocs provides its own [schema.json]<sup>1</sup> for <code>mkdocs.yml</code>. If your editor supports YAML schema validation, it's definitely recommended to set it up:</p> Visual Studio CodeOther <ol> <li>Install [<code>vscode-yaml</code>][vscode-yaml] for YAML language support.</li> <li> <p>Add the schema under the <code>yaml.schemas</code> key in your user or     workspace [<code>settings.json</code>][settings.json]:</p> <ol> <li>This setting is necessary if you plan to use [icons and emojis],     or Visual Studio Code will show errors on certain lines.</li> </ol> </li> </ol> <ol> <li>Ensure your editor of choice has support for YAML schema validation.</li> <li> <p>Add the following lines at the top of <code>mkdocs.yml</code>:</p> <pre><code># yaml-language-server: $schema=https://squidfunk.github.io/mkdocs-material/schema.json\n</code></pre> </li> </ol>"},{"location":"samples/admonitions.html#code-block-in-content","title":"Code Block in Content","text":"Recommended <p>In order to minimize friction and maximize productivity, Material for MkDocs provides its own [schema.json]<sup>1</sup> for <code>mkdocs.yml</code>. If your editor supports YAML schema validation, it's definitely recommended to set it up:</p> <pre><code># yaml-language-server: $schema=https://squidfunk.github.io/mkdocs-material/schema.json\n</code></pre>"},{"location":"samples/admonitions.html#footnote-in-content","title":"Footnote in content","text":"Recommended <p>In order to minimize friction and maximize productivity, Material for MkDocs provides its own [schema.json]<sup>1</sup> for <code>mkdocs.yml</code>. If your editor supports YAML schema validation, it's definitely recommended to set it up:</p>"},{"location":"samples/admonitions.html#footnote-in-header","title":"Footnote in Header","text":"Recommended<sup>1</sup> <p>In order to minimize friction and maximize productivity, Material for MkDocs provides its own [schema.json]<sup>1</sup> for <code>mkdocs.yml</code>. If your editor supports YAML schema validation, it's definitely recommended to set it up:</p>"},{"location":"samples/admonitions.html#types","title":"Types","text":""},{"location":"samples/admonitions.html#note","title":"Note","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#abstract","title":"Abstract","text":"<p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#info","title":"Info","text":"<p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#tip","title":"Tip","text":"<p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#success","title":"Success","text":"<p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#question","title":"Question","text":"<p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#warning","title":"Warning","text":"<p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#failure","title":"Failure","text":"<p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#danger","title":"Danger","text":"<p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#bug","title":"Bug","text":"<p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#example","title":"Example","text":"<p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"samples/admonitions.html#quote","title":"Quote","text":"<p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p> See Global flags and Common flags</p> <p> If you don't specify workspace name, by default <code>pars</code> get current workspace details</p> <p> <code>path</code> flag should be used alone, if you set this flag, you will get only path</p> <p> </p> <ol> <li> <p>If you're a MkDocs plugin or Markdown extension author and your project works with Material for MkDocs, you're very much invited to contribute a schema for your [extension] or [plugin] as part of a pull request on GitHub. If you already have a schema defined, or wish to self-host your schema to reduce duplication, you can add it via [$ref].\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"samples/annotations.html","title":"Annotations","text":""},{"location":"samples/annotations.html#basic","title":"Basic","text":"<p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol>"},{"location":"samples/annotations.html#admonition-with-annotations","title":"Admonition with annotations","text":"<p>Phasellus posuere in sem ut cursus (1)</p> <p>Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> I'm an annotation!</li> <li> I'm an annotation as well!</li> </ol>"},{"location":"samples/annotations.html#in-content-tabs","title":"In content tabs","text":"Tab 1Tab 2 <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation!</li> </ol> <p>Phasellus posuere in sem ut cursus (1)</p> <ol> <li> I'm an annotation as well!</li> </ol>"},{"location":"samples/annotations.html#html-with-annotations","title":"HTML with annotations","text":"<p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation!</li> </ol>"},{"location":"samples/annotations.html#codeblock-annotations","title":"Codeblock annotations","text":"<pre><code>theme:\n  icon:\n    annotation: material/arrow-right-circle # (1)!\n</code></pre> <ol> <li>Enter a few keywords to find the perfect icon using our [icon search] and     click on the shortcode to copy it to your clipboard:</li> </ol>"},{"location":"samples/block-admonitions.html","title":"Block admonitions","text":""},{"location":"samples/buttons.html","title":"Buttons","text":""},{"location":"samples/buttons.html#basic","title":"Basic","text":"<p>Subscribe to our newsletter</p>"},{"location":"samples/buttons.html#button-primary","title":"Button, primary","text":"<p>Subscribe to our newsletter</p>"},{"location":"samples/buttons.html#button-with-icon","title":"Button with icon","text":"<p>Send </p> <p> </p>"},{"location":"samples/caret-mark-tilde.html","title":"Caret, Mark & Tilde","text":""},{"location":"samples/caret-mark-tilde.html#caret","title":"Caret","text":""},{"location":"samples/caret-mark-tilde.html#insert-underline","title":"Insert (Underline)","text":"<p>Insert me</p>"},{"location":"samples/caret-mark-tilde.html#superscript","title":"Superscript","text":"<p>H<sup>2</sup>0</p> <p>text<sup>a superscript</sup></p>"},{"location":"samples/caret-mark-tilde.html#mark","title":"Mark","text":""},{"location":"samples/caret-mark-tilde.html#marking-highlight","title":"Marking (Highlight)","text":"<p>mark me</p> <p>smart==mark</p>"},{"location":"samples/caret-mark-tilde.html#tilde","title":"Tilde","text":""},{"location":"samples/caret-mark-tilde.html#delete-strikethrough","title":"Delete (Strikethrough)","text":"<p>Delete me</p>"},{"location":"samples/caret-mark-tilde.html#subscript","title":"Subscript","text":"<p>CH<sub>3</sub>CH<sub>2</sub>OH</p> <p>text<sub>a subscript</sub></p>"},{"location":"samples/caret-mark-tilde.html#superscript_1","title":"Superscript","text":"<p>A<sup>T</sup>A</p> <p> </p>"},{"location":"samples/code-blocks.html","title":"Code blocks","text":""},{"location":"samples/code-blocks.html#common","title":"Common","text":""},{"location":"samples/code-blocks.html#basic","title":"Basic","text":"<pre><code>import foo.bar\n</code></pre>"},{"location":"samples/code-blocks.html#with-title","title":"With Title","text":"sample.py<pre><code>import foo.bar\n</code></pre>"},{"location":"samples/code-blocks.html#no-copy","title":"No Copy","text":"<pre><code>import foo.bar\n</code></pre>"},{"location":"samples/code-blocks.html#code-block-with-annotation","title":"Code block with annotation","text":"<pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"samples/code-blocks.html#code-block-with-annotation-stripped","title":"Code block with annotation, stripped","text":"<pre><code># (1)!\n</code></pre> <ol> <li>Look ma, less line noise!</li> </ol>"},{"location":"samples/code-blocks.html#embedding-external-files","title":"Embedding external files","text":"<pre><code>last 4 years\n</code></pre>"},{"location":"samples/code-blocks.html#line-number","title":"Line Number","text":""},{"location":"samples/code-blocks.html#basic_1","title":"Basic","text":"<pre><code>import foo.bar\n</code></pre>"},{"location":"samples/code-blocks.html#highlighting-inline-code-blocks","title":"Highlighting inline code blocks","text":"<p>The <code>range()</code> function is used to generate a sequence of numbers.</p>"},{"location":"samples/code-blocks.html#custom-line-number-start","title":"Custom Line Number Start","text":"<pre><code>import foo.bar\n</code></pre>"},{"location":"samples/code-blocks.html#nth-line","title":"Nth Line","text":"<pre><code>\"\"\"Some file.\"\"\"\nimport foo.bar\nimport boo.baz\nimport foo.bar.baz\n</code></pre>"},{"location":"samples/code-blocks.html#special-lines","title":"Special Lines","text":"<pre><code>\"\"\"Some file.\"\"\"\nimport foo.bar\nimport boo.baz\nimport foo.bar.baz\n</code></pre>"},{"location":"samples/code-blocks.html#highlight-lines","title":"Highlight Lines","text":""},{"location":"samples/code-blocks.html#basic_2","title":"Basic","text":"<pre><code>\"\"\"Some file.\"\"\"\nimport foo.bar\nimport boo.baz\nimport foo.bar.baz\n</code></pre>"},{"location":"samples/code-blocks.html#highlight-lines-with-line-numbers","title":"Highlight Lines with Line Numbers","text":"<pre><code>\"\"\"Some file.\"\"\"\nimport foo.bar\nimport boo.baz\nimport foo.bar.baz\n</code></pre>"},{"location":"samples/code-blocks.html#highlight-ranges","title":"Highlight Ranges","text":"<pre><code>import foo\nimport boo.baz\nimport foo.bar.baz\n\nclass Foo:\n   def __init__(self):\n       self.foo = None\n       self.bar = None\n       self.baz = None\n</code></pre>"},{"location":"samples/code-blocks.html#highlight-ranges-with-line-numbers","title":"Highlight Ranges With Line Numbers","text":"<pre><code>import foo\nimport boo.baz\nimport foo.bar.baz\n\nclass Foo:\n   def __init__(self):\n       self.foo = None\n       self.bar = None\n       self.baz = None\n</code></pre>"},{"location":"samples/code-blocks.html#title","title":"Title","text":""},{"location":"samples/code-blocks.html#adding-titles","title":"Adding Titles","text":"My Cool Header<pre><code>import foo.bar\nimport boo.baz\nimport foo.bar.baz\n</code></pre>"},{"location":"samples/code-blocks.html#automatic-titles","title":"Automatic Titles","text":"<pre><code>import foo.bar\nimport boo.baz\nimport foo.bar.baz\n</code></pre>"},{"location":"samples/code-blocks.html#undesired-automatic-title","title":"Undesired Automatic Title","text":"<pre><code>&gt;&gt;&gt; 3 + 3\n6\n</code></pre>"},{"location":"samples/code-blocks.html#custom-fences","title":"Custom Fences","text":""},{"location":"samples/code-blocks.html#flow-chart","title":"Flow Chart","text":"<pre><code>graph TD\n    A[Hard] --&gt;|Text| B(Round)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result 1]\n    C --&gt;|Two| E[Result 2]</code></pre>"},{"location":"samples/code-blocks.html#diff-comparer","title":"Diff Comparer","text":"<pre><code>- list1 = [15, 32, 4, 32, 99]\n+ list1 = [10, 20, 4, 45, 99]\n\nmx = max(list1[0], list1[1]) \nsecondmax = min(list1[0], list1[1]) \nn = len(list1)\nfor i in range(2,n): \n-   # sample comment\n    if list1[i] &gt; mx: \n        secondmax = mx\n        mx = list1[i] \n    elif list1[i] &gt; secondmax and \\\n        mx != list1[i]: \n        secondmax = list1[i]\n    elif mx == secondmax and \\\n        secondmax != list1[i]:\n        secondmax = list1[i]\n\nprint(\"Second highest number is : \",\\\n    str(secondmax))\n</code></pre>"},{"location":"samples/code-blocks.html#folder-tree","title":"Folder Tree","text":""},{"location":"samples/code-blocks.html#basic_3","title":"Basic","text":"<pre><code>.\n\u251c\u2500 .icons/                             # Bundled icon sets\n\u251c\u2500 assets/\n\u2502  \u251c\u2500 images/                          # Images and icons\n\u2502  \u251c\u2500 javascripts/                     # JavaScript files\n\u2502  \u2514\u2500 stylesheets/                     # Style sheets\n\u251c\u2500 partials/\n\u2502  \u251c\u2500 integrations/                    # Third-party integrations\n\u2502  \u2502  \u251c\u2500 analytics/                    # Analytics integrations\n\u2502  \u2502  \u2514\u2500 analytics.html                # Analytics setup\n\u2502  \u251c\u2500 languages/                       # Translation languages\n\u2502  \u251c\u2500 actions.html                     # Actions\n\u2502  \u251c\u2500 alternate.html                   # Site language selector\n\u2502  \u251c\u2500 comments.html                    # Comment system (empty by default)\n\u2502  \u251c\u2500 consent.html                     # Consent\n\u2502  \u251c\u2500 content.html                     # Page content\n\u2502  \u251c\u2500 copyright.html                   # Copyright and theme information\n\u2502  \u251c\u2500 feedback.html                    # Was this page helpful?\n\u2502  \u251c\u2500 footer.html                      # Footer bar\n\u2502  \u251c\u2500 header.html                      # Header bar\n\u2502  \u251c\u2500 icons.html                       # Custom icons\n\u2502  \u251c\u2500 language.html                    # Translation setup\n\u2502  \u251c\u2500 logo.html                        # Logo in header and sidebar\n\u2502  \u251c\u2500 nav.html                         # Main navigation\n\u2502  \u251c\u2500 nav-item.html                    # Main navigation item\n\u2502  \u251c\u2500 pagination.html                  # Pagination (used for blog)\n\u2502  \u251c\u2500 palette.html                     # Color palette toggle\n\u2502  \u251c\u2500 post.html                        # Blog post excerpt\n\u2502  \u251c\u2500 progress.html                    # Progress indicator\n\u2502  \u251c\u2500 search.html                      # Search interface\n\u2502  \u251c\u2500 social.html                      # Social links\n\u2502  \u251c\u2500 source.html                      # Repository information\n\u2502  \u251c\u2500 source-file.html                 # Source file information\n\u2502  \u251c\u2500 tabs.html                        # Tabs navigation\n\u2502  \u251c\u2500 tabs-item.html                   # Tabs navigation item\n\u2502  \u251c\u2500 tags.html                        # Tags\n\u2502  \u251c\u2500 toc.html                         # Table of contents\n\u2502  \u251c\u2500 toc-item.html                    # Table of contents item\n\u2502  \u2514\u2500 top.html                         # Back-to-top button\n\u251c\u2500 404.html                            # 404 error page\n\u251c\u2500 base.html                           # Base template\n\u251c\u2500 blog.html                           # Blog index page\n\u251c\u2500 blog-archive.html                   # Blog archive index page\n\u251c\u2500 blog-category.html                  # Blog category index page\n\u251c\u2500 blog-post.html                      # Blog post page\n\u2514\u2500 main.html                           # Default page\n</code></pre>"},{"location":"samples/code-blocks.html#file-tree-plugin","title":"File Tree Plugin","text":"<pre>test<code>.\n\n                \u2514\u2500\u2500 samples/\n                {title}.7z {title}.zip {title}.rar {title}.tar.gz\n            \n                    \u251c\u2500\u2500 ApexSolutions.yaml\n                View\n            \n                    \u251c\u2500\u2500 NeptuneDev.yaml\n                \n            \n                    \u251c\u2500\u2500 OrionTech.yaml\n                \n            \n                    \u251c\u2500\u2500 PinnacleSoftware.yaml\n                \n            \n                    \u251c\u2500\u2500 QuantumProjects.yaml\n                \n            \n                    \u251c\u2500\u2500 StratosSystems.yaml\n                \n            \n                    \u2514\u2500\u2500 VertexInnovations.yaml\n                \n            </code></pre>"},{"location":"samples/colors.html","title":"Colors","text":"<code>red</code> <code>pink</code> <code>purple</code> <code>deep purple</code> <code>indigo</code> <code>blue</code> <code>light blue</code> <code>cyan</code> <code>teal</code> <code>green</code> <code>light green</code> <code>lime</code> <code>yellow</code> <code>amber</code> <code>orange</code> <code>deep orange</code> <code>brown</code> <code>grey</code> <code>blue grey</code> <code>black</code> <code>white</code>"},{"location":"samples/critics.html","title":"Critics","text":""},{"location":"samples/critics.html#text-with-suggested-changes","title":"Text with suggested changes","text":"<p>Text can be deleted and replacement text added. This can also be combined into onea single operation. Highlighting is also possible and comments can be added inline.</p> <p>Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.</p> <p> </p>"},{"location":"samples/diagrams.html","title":"Diagrams","text":"<p>(https://mermaid.js.org/syntax/flowchart.html)</p>"},{"location":"samples/diagrams.html#flow-chart","title":"Flow chart","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"samples/diagrams.html#sequence-diagram","title":"Sequence diagram","text":"<pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"samples/diagrams.html#class-diagram","title":"Class diagram","text":"<pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }</code></pre>"},{"location":"samples/diagrams.html#entity-relationship-diagram","title":"Entity-relationship diagram","text":"<pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    string name\n    int pricePerUnit\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"},{"location":"samples/emojis.html","title":"Emojis","text":""},{"location":"samples/emojis.html#colorized","title":"Colorized","text":""},{"location":"samples/emojis.html#with-animations","title":"With animations","text":""},{"location":"samples/emojis.html#list","title":"List","text":"<p>People</p> :bowtie: <code>:bowtie:</code> <code>:smile:</code> <code>:laughing:</code> <code>:blush:</code> <code>:smiley:</code> <code>:relaxed:</code> <code>:smirk:</code> <code>:heart_eyes:</code> <code>:kissing_heart:</code> <code>:kissing_closed_eyes:</code> <code>:flushed:</code> <code>:relieved:</code> <code>:satisfied:</code> <code>:grin:</code> <code>:wink:</code> <code>:stuck_out_tongue_winking_eye:</code> <code>:stuck_out_tongue_closed_eyes:</code> <code>:grinning:</code> <code>:kissing:</code> <code>:kissing_smiling_eyes:</code> <code>:stuck_out_tongue:</code> <code>:sleeping:</code> <code>:worried:</code> <code>:frowning:</code> <code>:anguished:</code> <code>:open_mouth:</code> <code>:grimacing:</code> <code>:confused:</code> <code>:hushed:</code> <code>:expressionless:</code> <code>:unamused:</code> <code>:sweat_smile:</code> <code>:sweat:</code> <code>:disappointed_relieved:</code> <code>:weary:</code> <code>:pensive:</code> <code>:disappointed:</code> <code>:confounded:</code> <code>:fearful:</code> <code>:cold_sweat:</code> <code>:persevere:</code> <code>:cry:</code> <code>:sob:</code> <code>:joy:</code> <code>:astonished:</code> <code>:scream:</code> :neckbeard: <code>:neckbeard:</code> <code>:tired_face:</code> <code>:angry:</code> <code>:rage:</code> <code>:triumph:</code> <code>:sleepy:</code> <code>:yum:</code> <code>:mask:</code> <code>:sunglasses:</code> <code>:dizzy_face:</code> <code>:imp:</code> <code>:smiling_imp:</code> <code>:neutral_face:</code> <code>:no_mouth:</code> <code>:innocent:</code> <code>:alien:</code> <code>:yellow_heart:</code> <code>:blue_heart:</code> <code>:purple_heart:</code> <code>:heart:</code> <code>:green_heart:</code> <code>:broken_heart:</code> <code>:heartbeat:</code> <code>:heartpulse:</code> <code>:two_hearts:</code> <code>:revolving_hearts:</code> <code>:cupid:</code> <code>:sparkling_heart:</code> <code>:sparkles:</code> <code>:star:</code> <code>:star2:</code> <code>:dizzy:</code> <code>:boom:</code> <code>:collision:</code> <code>:anger:</code> <code>:exclamation:</code> <code>:question:</code> <code>:grey_exclamation:</code> <code>:grey_question:</code> <code>:zzz:</code> <code>:dash:</code> <code>:sweat_drops:</code> <code>:notes:</code> <code>:musical_note:</code> <code>:fire:</code> <code>:hankey:</code> <code>:poop:</code> <code>:shit:</code> <code>:+1:</code> <code>:thumbsup:</code> <code>:-1:</code> <code>:thumbsdown:</code> <code>:ok_hand:</code> <code>:punch:</code> :facepunch: <code>:facepunch:</code> <code>:fist:</code> <code>:v:</code> <code>:wave:</code> :hand: <code>:hand:</code> <code>:raised_hand:</code> <code>:open_hands:</code> <code>:point_up:</code> <code>:point_down:</code> <code>:point_left:</code> <code>:point_right:</code> <code>:raised_hands:</code> <code>:pray:</code> <code>:point_up_2:</code> <code>:clap:</code> <code>:muscle:</code> <code>:metal:</code> :fu: <code>:fu:</code> <code>:walking:</code> <code>:runner:</code> :running: <code>:running:</code> <code>:couple:</code> <code>:family:</code> <code>:two_men_holding_hands:</code> <code>:two_women_holding_hands:</code> <code>:dancer:</code> <code>:dancers:</code> <code>:ok_woman:</code> <code>:no_good:</code> <code>:information_desk_person:</code> <code>:raising_hand:</code> :bride_with_veil: <code>:bride_with_veil:</code> <code>:person_with_pouting_face:</code> <code>:person_frowning:</code> <code>:bow:</code> <code>:couplekiss:</code> <code>:couple_with_heart:</code> <code>:massage:</code> <code>:haircut:</code> <code>:nail_care:</code> <code>:boy:</code> <code>:girl:</code> <code>:woman:</code> <code>:man:</code> <code>:baby:</code> <code>:older_woman:</code> <code>:older_man:</code> <code>:person_with_blond_hair:</code> <code>:man_with_gua_pi_mao:</code> <code>:man_with_turban:</code> <code>:construction_worker:</code> <code>:cop:</code> <code>:angel:</code> <code>:princess:</code> <code>:smiley_cat:</code> <code>:smile_cat:</code> <code>:heart_eyes_cat:</code> <code>:kissing_cat:</code> <code>:smirk_cat:</code> <code>:scream_cat:</code> <code>:crying_cat_face:</code> <code>:joy_cat:</code> <code>:pouting_cat:</code> <code>:japanese_ogre:</code> <code>:japanese_goblin:</code> <code>:see_no_evil:</code> <code>:hear_no_evil:</code> <code>:speak_no_evil:</code> <code>:guardsman:</code> <code>:skull:</code> <code>:feet:</code> <code>:lips:</code> <code>:kiss:</code> <code>:droplet:</code> <code>:ear:</code> <code>:eyes:</code> <code>:nose:</code> <code>:tongue:</code> <code>:love_letter:</code> <code>:bust_in_silhouette:</code> <code>:busts_in_silhouette:</code> <code>:speech_balloon:</code> <code>:thought_balloon:</code> :feelsgood: <code>:feelsgood:</code> :finnadie: <code>:finnadie:</code> :goberserk: <code>:goberserk:</code> :godmode: <code>:godmode:</code> :hurtrealbad: <code>:hurtrealbad:</code> :rage1: <code>:rage1:</code> :rage2: <code>:rage2:</code> :rage3: <code>:rage3:</code> :rage4: <code>:rage4:</code> :suspect: <code>:suspect:</code> :trollface: <code>:trollface:</code> <p>Nature</p> <code>:sunny:</code> <code>:umbrella:</code> <code>:cloud:</code> <code>:snowflake:</code> <code>:snowman:</code> <code>:zap:</code> <code>:cyclone:</code> <code>:foggy:</code> <code>:ocean:</code> <code>:cat:</code> <code>:dog:</code> <code>:mouse:</code> <code>:hamster:</code> <code>:rabbit:</code> <code>:wolf:</code> <code>:frog:</code> <code>:tiger:</code> <code>:koala:</code> <code>:bear:</code> <code>:pig:</code> <code>:pig_nose:</code> <code>:cow:</code> <code>:boar:</code> <code>:monkey_face:</code> <code>:monkey:</code> <code>:horse:</code> <code>:racehorse:</code> <code>:camel:</code> <code>:sheep:</code> <code>:elephant:</code> <code>:panda_face:</code> <code>:snake:</code> <code>:bird:</code> <code>:baby_chick:</code> <code>:hatched_chick:</code> <code>:hatching_chick:</code> <code>:chicken:</code> <code>:penguin:</code> <code>:turtle:</code> <code>:bug:</code> <code>:honeybee:</code> <code>:ant:</code> <code>:beetle:</code> <code>:snail:</code> <code>:octopus:</code> <code>:tropical_fish:</code> <code>:fish:</code> <code>:whale:</code> <code>:whale2:</code> <code>:dolphin:</code> <code>:cow2:</code> <code>:ram:</code> <code>:rat:</code> <code>:water_buffalo:</code> <code>:tiger2:</code> <code>:rabbit2:</code> <code>:dragon:</code> <code>:goat:</code> <code>:rooster:</code> <code>:dog2:</code> <code>:pig2:</code> <code>:mouse2:</code> <code>:ox:</code> <code>:dragon_face:</code> <code>:blowfish:</code> <code>:crocodile:</code> <code>:dromedary_camel:</code> <code>:leopard:</code> <code>:cat2:</code> <code>:poodle:</code> <code>:paw_prints:</code> <code>:bouquet:</code> <code>:cherry_blossom:</code> <code>:tulip:</code> <code>:four_leaf_clover:</code> <code>:rose:</code> <code>:sunflower:</code> <code>:hibiscus:</code> <code>:maple_leaf:</code> <code>:leaves:</code> <code>:fallen_leaf:</code> <code>:herb:</code> <code>:mushroom:</code> <code>:cactus:</code> <code>:palm_tree:</code> <code>:evergreen_tree:</code> <code>:deciduous_tree:</code> <code>:chestnut:</code> <code>:seedling:</code> <code>:blossom:</code> <code>:ear_of_rice:</code> <code>:shell:</code> <code>:globe_with_meridians:</code> <code>:sun_with_face:</code> <code>:full_moon_with_face:</code> <code>:new_moon_with_face:</code> <code>:new_moon:</code> <code>:waxing_crescent_moon:</code> <code>:first_quarter_moon:</code> <code>:waxing_gibbous_moon:</code> <code>:full_moon:</code> <code>:waning_gibbous_moon:</code> <code>:last_quarter_moon:</code> <code>:waning_crescent_moon:</code> <code>:last_quarter_moon_with_face:</code> <code>:first_quarter_moon_with_face:</code> :moon: <code>:moon:</code> <code>:earth_africa:</code> <code>:earth_americas:</code> <code>:earth_asia:</code> <code>:volcano:</code> <code>:milky_way:</code> <code>:partly_sunny:</code> :octocat: <code>:octocat:</code> :squirrel: <code>:squirrel:</code> <p>Objects</p> <code>:bamboo:</code> <code>:gift_heart:</code> <code>:dolls:</code> <code>:school_satchel:</code> <code>:mortar_board:</code> <code>:flags:</code> <code>:fireworks:</code> <code>:sparkler:</code> <code>:wind_chime:</code> <code>:rice_scene:</code> <code>:jack_o_lantern:</code> <code>:ghost:</code> <code>:santa:</code> <code>:christmas_tree:</code> <code>:gift:</code> <code>:bell:</code> <code>:no_bell:</code> <code>:tanabata_tree:</code> <code>:tada:</code> <code>:confetti_ball:</code> <code>:balloon:</code> <code>:crystal_ball:</code> <code>:cd:</code> <code>:dvd:</code> <code>:floppy_disk:</code> <code>:camera:</code> <code>:video_camera:</code> <code>:movie_camera:</code> <code>:computer:</code> <code>:tv:</code> :iphone: <code>:iphone:</code> :phone: <code>:phone:</code> <code>:telephone:</code> <code>:telephone_receiver:</code> <code>:pager:</code> <code>:fax:</code> <code>:minidisc:</code> <code>:vhs:</code> <code>:sound:</code> <code>:speaker:</code> <code>:mute:</code> <code>:loudspeaker:</code> <code>:mega:</code> <code>:hourglass:</code> <code>:hourglass_flowing_sand:</code> <code>:alarm_clock:</code> <code>:watch:</code> <code>:radio:</code> <code>:satellite:</code> <code>:loop:</code> <code>:mag:</code> <code>:mag_right:</code> <code>:unlock:</code> <code>:lock:</code> <code>:lock_with_ink_pen:</code> <code>:closed_lock_with_key:</code> <code>:key:</code> <code>:bulb:</code> <code>:flashlight:</code> <code>:high_brightness:</code> <code>:low_brightness:</code> <code>:electric_plug:</code> <code>:battery:</code> <code>:calling:</code> <code>:email:</code> <code>:mailbox:</code> <code>:postbox:</code> <code>:bath:</code> <code>:bathtub:</code> <code>:shower:</code> <code>:toilet:</code> <code>:wrench:</code> <code>:nut_and_bolt:</code> <code>:hammer:</code> <code>:seat:</code> <code>:moneybag:</code> <code>:yen:</code> <code>:dollar:</code> <code>:pound:</code> <code>:euro:</code> <code>:credit_card:</code> <code>:money_with_wings:</code> <code>:e-mail:</code> <code>:inbox_tray:</code> <code>:outbox_tray:</code> <code>:envelope:</code> <code>:incoming_envelope:</code> <code>:postal_horn:</code> <code>:mailbox_closed:</code> <code>:mailbox_with_mail:</code> <code>:mailbox_with_no_mail:</code> <code>:door:</code> <code>:smoking:</code> <code>:bomb:</code> <code>:gun:</code> :hocho: <code>:hocho:</code> <code>:pill:</code> <code>:syringe:</code> <code>:page_facing_up:</code> <code>:page_with_curl:</code> <code>:bookmark_tabs:</code> <code>:bar_chart:</code> <code>:chart_with_upwards_trend:</code> <code>:chart_with_downwards_trend:</code> <code>:scroll:</code> <code>:clipboard:</code> <code>:calendar:</code> <code>:date:</code> <code>:card_index:</code> <code>:file_folder:</code> <code>:open_file_folder:</code> <code>:scissors:</code> <code>:pushpin:</code> <code>:paperclip:</code> <code>:black_nib:</code> <code>:pencil2:</code> <code>:straight_ruler:</code> <code>:triangular_ruler:</code> <code>:closed_book:</code> <code>:green_book:</code> <code>:blue_book:</code> <code>:orange_book:</code> <code>:notebook:</code> <code>:notebook_with_decorative_cover:</code> <code>:ledger:</code> <code>:books:</code> <code>:bookmark:</code> <code>:name_badge:</code> <code>:microscope:</code> <code>:telescope:</code> <code>:newspaper:</code> <code>:football:</code> <code>:basketball:</code> <code>:soccer:</code> <code>:baseball:</code> <code>:tennis:</code> <code>:8ball:</code> <code>:rugby_football:</code> <code>:bowling:</code> <code>:golf:</code> <code>:mountain_bicyclist:</code> <code>:bicyclist:</code> <code>:horse_racing:</code> <code>:snowboarder:</code> <code>:swimmer:</code> <code>:surfer:</code> <code>:ski:</code> <code>:spades:</code> <code>:hearts:</code> <code>:clubs:</code> <code>:diamonds:</code> <code>:gem:</code> <code>:ring:</code> <code>:trophy:</code> <code>:musical_score:</code> <code>:musical_keyboard:</code> <code>:violin:</code> <code>:space_invader:</code> <code>:video_game:</code> <code>:black_joker:</code> <code>:flower_playing_cards:</code> <code>:game_die:</code> <code>:dart:</code> <code>:mahjong:</code> <code>:clapper:</code> <code>:memo:</code> <code>:pencil:</code> <code>:book:</code> <code>:art:</code> <code>:microphone:</code> <code>:headphones:</code> <code>:trumpet:</code> <code>:saxophone:</code> <code>:guitar:</code> :shoe: <code>:shoe:</code> <code>:sandal:</code> <code>:high_heel:</code> <code>:lipstick:</code> <code>:boot:</code> <code>:shirt:</code> :tshirt: <code>:tshirt:</code> <code>:necktie:</code> <code>:womans_clothes:</code> <code>:dress:</code> <code>:running_shirt_with_sash:</code> <code>:jeans:</code> <code>:kimono:</code> <code>:bikini:</code> <code>:ribbon:</code> <code>:tophat:</code> <code>:crown:</code> <code>:womans_hat:</code> <code>:mans_shoe:</code> <code>:closed_umbrella:</code> <code>:briefcase:</code> <code>:handbag:</code> <code>:pouch:</code> <code>:purse:</code> <code>:eyeglasses:</code> <code>:fishing_pole_and_fish:</code> <code>:coffee:</code> <code>:tea:</code> <code>:sake:</code> <code>:baby_bottle:</code> <code>:beer:</code> <code>:beers:</code> <code>:cocktail:</code> <code>:tropical_drink:</code> <code>:wine_glass:</code> <code>:fork_and_knife:</code> <code>:pizza:</code> <code>:hamburger:</code> <code>:fries:</code> <code>:poultry_leg:</code> <code>:meat_on_bone:</code> <code>:spaghetti:</code> <code>:curry:</code> <code>:fried_shrimp:</code> <code>:bento:</code> <code>:sushi:</code> <code>:fish_cake:</code> <code>:rice_ball:</code> <code>:rice_cracker:</code> <code>:rice:</code> <code>:ramen:</code> <code>:stew:</code> <code>:oden:</code> <code>:dango:</code> <code>:egg:</code> <code>:bread:</code> <code>:doughnut:</code> <code>:custard:</code> <code>:icecream:</code> <code>:ice_cream:</code> <code>:shaved_ice:</code> <code>:birthday:</code> <code>:cake:</code> <code>:cookie:</code> <code>:chocolate_bar:</code> <code>:candy:</code> <code>:lollipop:</code> <code>:honey_pot:</code> <code>:apple:</code> <code>:green_apple:</code> <code>:tangerine:</code> <code>:lemon:</code> <code>:cherries:</code> <code>:grapes:</code> <code>:watermelon:</code> <code>:strawberry:</code> <code>:peach:</code> <code>:melon:</code> <code>:banana:</code> <code>:pear:</code> <code>:pineapple:</code> <code>:sweet_potato:</code> <code>:eggplant:</code> <code>:tomato:</code> <code>:corn:</code> <p>Places</p> <code>:house:</code> <code>:house_with_garden:</code> <code>:school:</code> <code>:office:</code> <code>:post_office:</code> <code>:hospital:</code> <code>:bank:</code> <code>:convenience_store:</code> <code>:love_hotel:</code> <code>:hotel:</code> <code>:wedding:</code> <code>:church:</code> <code>:department_store:</code> <code>:european_post_office:</code> <code>:city_sunrise:</code> <code>:city_sunset:</code> <code>:japanese_castle:</code> <code>:european_castle:</code> <code>:tent:</code> <code>:factory:</code> <code>:tokyo_tower:</code> <code>:japan:</code> <code>:mount_fuji:</code> <code>:sunrise_over_mountains:</code> <code>:sunrise:</code> <code>:stars:</code> <code>:statue_of_liberty:</code> <code>:bridge_at_night:</code> <code>:carousel_horse:</code> <code>:rainbow:</code> <code>:ferris_wheel:</code> <code>:fountain:</code> <code>:roller_coaster:</code> <code>:ship:</code> <code>:speedboat:</code> :boat: <code>:boat:</code> <code>:sailboat:</code> <code>:rowboat:</code> <code>:anchor:</code> <code>:rocket:</code> <code>:airplane:</code> <code>:helicopter:</code> <code>:steam_locomotive:</code> <code>:tram:</code> <code>:mountain_railway:</code> <code>:bike:</code> <code>:aerial_tramway:</code> <code>:suspension_railway:</code> <code>:mountain_cableway:</code> <code>:tractor:</code> <code>:blue_car:</code> <code>:oncoming_automobile:</code> :car: <code>:car:</code> <code>:red_car:</code> <code>:taxi:</code> <code>:oncoming_taxi:</code> <code>:articulated_lorry:</code> <code>:bus:</code> <code>:oncoming_bus:</code> <code>:rotating_light:</code> <code>:police_car:</code> <code>:oncoming_police_car:</code> <code>:fire_engine:</code> <code>:ambulance:</code> <code>:minibus:</code> <code>:truck:</code> <code>:train:</code> <code>:station:</code> <code>:train2:</code> <code>:bullettrain_front:</code> <code>:bullettrain_side:</code> <code>:light_rail:</code> <code>:monorail:</code> <code>:railway_car:</code> <code>:trolleybus:</code> <code>:ticket:</code> <code>:fuelpump:</code> <code>:vertical_traffic_light:</code> <code>:traffic_light:</code> <code>:warning:</code> <code>:construction:</code> <code>:beginner:</code> <code>:atm:</code> <code>:slot_machine:</code> <code>:busstop:</code> <code>:barber:</code> <code>:hotsprings:</code> <code>:checkered_flag:</code> <code>:crossed_flags:</code> <code>:izakaya_lantern:</code> <code>:moyai:</code> <code>:circus_tent:</code> <code>:performing_arts:</code> <code>:round_pushpin:</code> <code>:triangular_flag_on_post:</code> <code>:jp:</code> <code>:kr:</code> <code>:cn:</code> <code>:us:</code> <code>:fr:</code> <code>:es:</code> <code>:it:</code> <code>:ru:</code> <code>:gb:</code> :uk: <code>:uk:</code> <code>:de:</code> <p>Symbols</p> <code>:one:</code> <code>:two:</code> <code>:three:</code> <code>:four:</code> <code>:five:</code> <code>:six:</code> <code>:seven:</code> <code>:eight:</code> <code>:nine:</code> <code>:keycap_ten:</code> <code>:1234:</code> <code>:zero:</code> <code>:hash:</code> <code>:symbols:</code> <code>:arrow_backward:</code> <code>:arrow_down:</code> <code>:arrow_forward:</code> <code>:arrow_left:</code> <code>:capital_abcd:</code> <code>:abcd:</code> <code>:abc:</code> <code>:arrow_lower_left:</code> <code>:arrow_lower_right:</code> <code>:arrow_right:</code> <code>:arrow_up:</code> <code>:arrow_upper_left:</code> <code>:arrow_upper_right:</code> <code>:arrow_double_down:</code> <code>:arrow_double_up:</code> <code>:arrow_down_small:</code> <code>:arrow_heading_down:</code> <code>:arrow_heading_up:</code> <code>:leftwards_arrow_with_hook:</code> <code>:arrow_right_hook:</code> <code>:left_right_arrow:</code> <code>:arrow_up_down:</code> <code>:arrow_up_small:</code> <code>:arrows_clockwise:</code> <code>:arrows_counterclockwise:</code> <code>:rewind:</code> <code>:fast_forward:</code> <code>:information_source:</code> <code>:ok:</code> <code>:twisted_rightwards_arrows:</code> <code>:repeat:</code> <code>:repeat_one:</code> <code>:new:</code> <code>:top:</code> <code>:up:</code> <code>:cool:</code> <code>:free:</code> <code>:ng:</code> <code>:cinema:</code> <code>:koko:</code> <code>:signal_strength:</code> <code>:u5272:</code> <code>:u5408:</code> <code>:u55b6:</code> <code>:u6307:</code> <code>:u6708:</code> <code>:u6709:</code> <code>:u6e80:</code> <code>:u7121:</code> <code>:u7533:</code> <code>:u7a7a:</code> <code>:u7981:</code> <code>:sa:</code> <code>:restroom:</code> <code>:mens:</code> <code>:womens:</code> <code>:baby_symbol:</code> <code>:no_smoking:</code> <code>:parking:</code> <code>:wheelchair:</code> <code>:metro:</code> <code>:baggage_claim:</code> <code>:accept:</code> <code>:wc:</code> <code>:potable_water:</code> <code>:put_litter_in_its_place:</code> <code>:secret:</code> <code>:congratulations:</code> <code>:m:</code> <code>:passport_control:</code> <code>:left_luggage:</code> <code>:customs:</code> <code>:ideograph_advantage:</code> <code>:cl:</code> <code>:sos:</code> <code>:id:</code> <code>:no_entry_sign:</code> <code>:underage:</code> <code>:no_mobile_phones:</code> <code>:do_not_litter:</code> <code>:non-potable_water:</code> <code>:no_bicycles:</code> <code>:no_pedestrians:</code> <code>:children_crossing:</code> <code>:no_entry:</code> <code>:eight_spoked_asterisk:</code> <code>:eight_pointed_black_star:</code> <code>:heart_decoration:</code> <code>:vs:</code> <code>:vibration_mode:</code> <code>:mobile_phone_off:</code> <code>:chart:</code> <code>:currency_exchange:</code> <code>:aries:</code> <code>:taurus:</code> <code>:gemini:</code> <code>:cancer:</code> <code>:leo:</code> <code>:virgo:</code> <code>:libra:</code> <code>:scorpius:</code> <code>:sagittarius:</code> <code>:capricorn:</code> <code>:aquarius:</code> <code>:pisces:</code> <code>:ophiuchus:</code> <code>:six_pointed_star:</code> <code>:negative_squared_cross_mark:</code> <code>:a:</code> <code>:b:</code> <code>:ab:</code> <code>:o2:</code> <code>:diamond_shape_with_a_dot_inside:</code> <code>:recycle:</code> <code>:end:</code> <code>:on:</code> <code>:soon:</code> <code>:clock1:</code> <code>:clock130:</code> <code>:clock10:</code> <code>:clock1030:</code> <code>:clock11:</code> <code>:clock1130:</code> <code>:clock12:</code> <code>:clock1230:</code> <code>:clock2:</code> <code>:clock230:</code> <code>:clock3:</code> <code>:clock330:</code> <code>:clock4:</code> <code>:clock430:</code> <code>:clock5:</code> <code>:clock530:</code> <code>:clock6:</code> <code>:clock630:</code> <code>:clock7:</code> <code>:clock730:</code> <code>:clock8:</code> <code>:clock830:</code> <code>:clock9:</code> <code>:clock930:</code> <code>:heavy_dollar_sign:</code> <code>:copyright:</code> <code>:registered:</code> <code>:tm:</code> <code>:x:</code> :heavy_exclamation_mark: <code>:heavy_exclamation_mark:</code> <code>:bangbang:</code> <code>:interrobang:</code> <code>:o:</code> <code>:heavy_multiplication_x:</code> <code>:heavy_plus_sign:</code> <code>:heavy_minus_sign:</code> <code>:heavy_division_sign:</code> <code>:white_flower:</code> <code>:100:</code> <code>:heavy_check_mark:</code> <code>:ballot_box_with_check:</code> <code>:radio_button:</code> <code>:link:</code> <code>:curly_loop:</code> <code>:wavy_dash:</code> <code>:part_alternation_mark:</code> <code>:trident:</code> :black_square: <code>:black_square:</code> :white_square: <code>:white_square:</code> <code>:white_check_mark:</code> <code>:black_square_button:</code> <code>:white_square_button:</code> <code>:black_circle:</code> <code>:white_circle:</code> <code>:red_circle:</code> :large_blue_circle: <code>:large_blue_circle:</code> <code>:large_blue_diamond:</code> <code>:large_orange_diamond:</code> <code>:small_blue_diamond:</code> <code>:small_orange_diamond:</code> <code>:small_red_triangle:</code> <code>:small_red_triangle_down:</code> :shipit: <code>:shipit:</code> <p> </p>"},{"location":"samples/emphasis.html","title":"Emphasis","text":""},{"location":"samples/emphasis.html#whitespace","title":"Whitespace","text":"<p>This * won't emphasize *</p> <p>This will emphasize</p>"},{"location":"samples/emphasis.html#nested-token","title":"Nested Token","text":"<p>I'm italic and bold I am just bold.</p> <p>I'm bold and italic! I am just italic.</p>"},{"location":"samples/emphasis.html#prioritize-best","title":"Prioritize Best","text":"<p>I'm italic. I'm bold and italic. I'm also just italic.</p>"},{"location":"samples/emphasis.html#consecutive-token","title":"Consecutive Token","text":"<p>A lot of underscores____________is okay</p>"},{"location":"samples/emphasis.html#smart-break","title":"Smart Break","text":"<p>This will all be bold __because of the placement of the center underscores.</p> <p>This will all be bold __ because of the placement of the center underscores.</p> <p>This will NOT all be bold because of the placement of the center underscores.__</p> <p>This will all be bold_ because of the token is less than that of the surrounding.</p>"},{"location":"samples/emphasis.html#floating-token","title":"Floating Token","text":"<p>All will * be italic</p> <p>All will *be italic</p> <p>All will not be italic*</p> <p>All will not ** be italic</p> <p>All will * be bold</p> <p>All will *be bold</p> <p>All will not* be bold**</p> <p>All will not *** be bold</p> <p> </p>"},{"location":"samples/fences.html","title":"Fences","text":"<pre><code>a fenced block\n</code></pre> <pre><code>a fenced block\n\nwith blank lines\n</code></pre> <ul> <li> <pre><code>a fenced block\n</code></pre></li> </ul> Definition <pre><code>a fenced block\n</code></pre> <p>Paragraph.</p> <pre><code>a fenced block\n</code></pre> <p>Another paragraph.</p> <pre><code>import hello_world\n</code></pre> <p>============================================================ T   Tp  Sp  D   Dp  S   D7  T</p> <p>A   F#m Bm  E   C#m D   E7  A A#  Gm  Cm  F   Dm  D#  F7  A# B\u266d  Gm  Cm  F   Dm  E\u266dm F7  B\u266d</p> <p> </p>"},{"location":"samples/foot-notes.html","title":"Foot notes","text":""},{"location":"samples/foot-notes.html#reference-basic","title":"Reference, Basic","text":"<p>Lorem ipsum<sup>1</sup> dolor sit amet, consectetur adipiscing elit.<sup>2</sup></p>"},{"location":"samples/foot-notes.html#content-basic","title":"Content, Basic","text":"<ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> </ol>"},{"location":"samples/forms.html","title":"Input Basic","text":""},{"location":"samples/grids.html","title":"Grids","text":""},{"location":"samples/grids.html#basic","title":"Basic","text":"<ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> </ul>"},{"location":"samples/grids.html#card-grid-complex-example","title":"Card grid, complex example","text":"<ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul>"},{"location":"samples/grids.html#card-grid-blocks","title":"Card grid, blocks","text":"<p> HTML for content and structure</p> <p> JavaScript for interactivity</p> <p> CSS for text running out of boxes</p> <p> Internet Explorer ... huh?</p>"},{"location":"samples/grids.html#generic-grid","title":"Generic grid","text":"Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> Content tabs<pre><code>=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n</code></pre>"},{"location":"samples/headers.html","title":"Headers","text":""},{"location":"samples/headers.html#basic-header","title":"Basic Header","text":"<p>##Not a Header</p>"},{"location":"samples/headers.html#inline-code-block-header","title":"<code>Inline Code Block</code> Header","text":""},{"location":"samples/headers.html#header-with-linklink","title":"Header With (Link)[Link]","text":""},{"location":"samples/headers.html#header-with-custom-toc-title","title":"Header With Custom TOC Title","text":""},{"location":"samples/headers.html#header-with-custom-toc-title_1","title":"Header With Custom TOC Title","text":""},{"location":"samples/headers.html#header-with-footnote","title":"Header With FootNote <sup>1</sup>","text":""},{"location":"samples/headers.html#header-with-annotation-1","title":"Header With Annotation (1)","text":"<ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"samples/headers.html#related-header-parent","title":"Related Header - Parent","text":""},{"location":"samples/headers.html#related-header---parent","title":"Related Header - Child","text":"<ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> </ol>"},{"location":"samples/hooks.html","title":"Hooks","text":""},{"location":"samples/hooks.html#labels","title":"Labels","text":""},{"location":"samples/icons-colors.html","title":"Icons colors","text":""},{"location":"samples/icons-colors.html#basic","title":"Basic","text":""},{"location":"samples/icons-colors.html#with-animations","title":"with animations","text":""},{"location":"samples/image.html","title":"Image","text":""},{"location":"samples/image.html#basic","title":"Basic","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.  </p>"},{"location":"samples/image.html#align-left","title":"Align - Left","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.  </p>"},{"location":"samples/image.html#align-right","title":"Align - Right","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.  </p>"},{"location":"samples/image.html#image-size","title":"Image, size","text":""},{"location":"samples/image.html#image-with-caption","title":"Image with caption","text":"Image caption"},{"location":"samples/image.html#image-lazy-loaded","title":"Image, lazy-loaded","text":""},{"location":"samples/image.html#image-different-for-light-and-dark-mode","title":"Image, different for light and dark mode","text":""},{"location":"samples/keyboard-keys.html","title":"Keyboard keys","text":""},{"location":"samples/keyboard-keys.html#basic","title":"Basic","text":"<p>Ctrl+Alt+Del</p>"},{"location":"samples/keyboard-keys.html#keys","title":"Keys","text":""},{"location":"samples/keyboard-keys.html#alphanumeric-and-space-keys","title":"Alphanumeric and Space Keys","text":"Name Display Aliases <code>0</code> 0 <code>1</code> 1 <code>2</code> 2 <code>3</code> 3 <code>4</code> 4 <code>5</code> 5 <code>6</code> 6 <code>7</code> 7 <code>8</code> 8 <code>9</code> 9 <code>a</code> A <code>b</code> B <code>c</code> C <code>d</code> D <code>e</code> E <code>f</code> F <code>g</code> G <code>h</code> H <code>i</code> I <code>j</code> J <code>k</code> K <code>l</code> L <code>m</code> M <code>n</code> N <code>o</code> O <code>p</code> P <code>q</code> Q <code>r</code> R <code>s</code> S <code>t</code> T <code>u</code> U <code>v</code> V <code>w</code> W <code>x</code> X <code>y</code> Y <code>z</code> Z <code>space</code> Space <code>spc</code>"},{"location":"samples/keyboard-keys.html#punctuation-keys","title":"Punctuation Keys","text":"Name Display Aliases <code>backslash</code> \\ <code>bar</code> | <code>pipe</code> <code>brace-left</code> { <code>open-brace</code> <code>brace-right</code> } <code>close-bracket</code> <code>bracket-left</code> [ <code>open-bracket</code> <code>bracket-right</code> ] <code>close-bracket</code> <code>colon</code> : <code>comma</code> , <code>double-quote</code> \" <code>dblquote</code> <code>equal</code> = <code>exclam</code> ! <code>exclamation</code> <code>grave</code> ` <code>grave-accent</code> <code>greater</code> &gt; <code>greater-than</code>, <code>gt</code> <code>less</code> &lt; <code>less-than</code>, <code>lt</code> <code>minus</code> - <code>hyphen</code> <code>period</code> . <code>plus</code> + <code>question</code> ? <code>question-mark</code> <code>semicolon</code> ; <code>single-quote</code> ' <code>slash</code> / <code>tilde</code> ~ <code>underscore</code> _"},{"location":"samples/keyboard-keys.html#navigation-keys","title":"Navigation Keys","text":"Name Display Aliases <code>arrow-up</code> Up <code>up</code> <code>arrow-down</code> Down <code>down</code> <code>arrow-left</code> Left <code>left</code> <code>arrow-right</code> Right <code>right</code> <code>page-up</code> Page Up <code>prior</code>, <code>page-up</code>, <code>pg-up</code> <code>page-down</code> Page Down <code>next</code>, <code>page-dn</code>, <code>pg-dn</code> <code>home</code> Home <code>end</code> End <code>tab</code> Tab <code>tabulator</code>"},{"location":"samples/keyboard-keys.html#editing-keys","title":"Editing Keys","text":"Name Display Aliases <code>backspace</code> Backspace <code>back</code>, <code>bksp</code> <code>delete</code> Del <code>del</code> <code>insert</code> Ins <code>ins</code>"},{"location":"samples/keyboard-keys.html#action-keys","title":"Action Keys","text":"Name Display Aliases <code>break</code> Break <code>cancel</code> <code>caps-lock</code> Caps Lock <code>capital</code>, <code>cplk</code> <code>clear</code> Clear <code>clr</code> <code>eject</code> Eject <code>enter</code> Enter <code>return</code> <code>escape</code> Esc <code>esc</code> <code>help</code> Help <code>print-screen</code> Print Screen <code>prtsc</code> <code>scroll-lock</code> Scroll Lock <code>scroll</code>"},{"location":"samples/keyboard-keys.html#numeric-keypad-keys","title":"Numeric Keypad Keys","text":"Name Display Aliases <code>num0</code> Num 0 <code>num1</code> Num 1 <code>num2</code> Num 2 <code>num3</code> Num 3 <code>num4</code> Num 4 <code>num5</code> Num 5 <code>num6</code> Num 6 <code>num7</code> Num 7 <code>num8</code> Num 8 <code>num9</code> Num 9 <code>num-asterisk</code> Num * <code>multiply</code> <code>num-clear</code> Num Clear <code>num-delete</code> Num Del <code>num-del</code> <code>num-equal</code> Num = <code>num-lock</code> Num Lock <code>numlk</code>, <code>numlock</code> <code>num-minus</code> Num - <code>subtract</code> <code>num-plus</code> Num + <code>add</code> <code>num-separator</code> Num . <code>decimal</code>, <code>separator</code> <code>num-slash</code> Num / <code>divide</code> <code>num-enter</code> Num Enter"},{"location":"samples/keyboard-keys.html#modifier-keys","title":"Modifier keys","text":"Name Display Aliases <code>alt</code> Alt <code>left-alt</code> Left Alt <code>lalt</code> <code>right-alt</code> Right Alt <code>ralt</code> <code>alt-graph</code> AltGr <code>altgr</code> <code>command</code> Cmd <code>cmd</code> <code>left-command</code> Left Command <code>lcommand</code>, <code>lcmd</code>, <code>left-cmd</code> <code>right-command</code> Right Command <code>rcommand</code>, <code>rcmd</code>, <code>right-cmd</code> <code>control</code> Ctrl <code>ctrl</code> <code>left-control</code> Left Ctrl <code>lcontrol</code>, <code>lctrl</code>, <code>left-ctrl</code> <code>right-control</code> Right Ctrl <code>rcontrol</code>, <code>rctrl</code>, <code>right-ctrl</code> <code>function</code> Fn <code>fn</code> <code>meta</code> Meta <code>left-meta</code> Left Meta <code>lmeta</code> <code>right-meta</code> Right Meta <code>rmeta</code> <code>option</code> Option <code>opt</code> <code>left-option</code> Left Option <code>loption</code>, <code>lopt</code>, <code>left-opt</code> <code>right-option</code> Right Option <code>roption</code>, <code>ropt</code>, <code>right-opt</code> <code>shift</code> Shift <code>left-shift</code> Left Shift <code>lshift</code> <code>right-shift</code> Right Shift <code>rshift</code> <code>super</code> Super <code>left-super</code> Left Super <code>lsuper</code> <code>right-super</code> Right Super <code>rsuper</code> <code>windows</code> Win <code>win</code> <code>left-windows</code> Left Win <code>lwindows</code>, <code>left-win</code>, <code>lwin</code> <code>right-windows</code> Right Win <code>rwindows</code>, <code>right-win</code>, <code>rwin</code>"},{"location":"samples/keyboard-keys.html#function-keys","title":"Function keys","text":"Name Display Aliases <code>f1</code> F1 <code>f2</code> F2 <code>f3</code> F3 <code>f4</code> F4 <code>f5</code> F5 <code>f6</code> F6 <code>f7</code> F7 <code>f8</code> F8 <code>f9</code> F9 <code>f10</code> F10 <code>f11</code> F11 <code>f12</code> F12 <code>f13</code> F13 <code>f14</code> F14 <code>f15</code> F15 <code>f16</code> F16 <code>f17</code> F17 <code>f18</code> F18 <code>f19</code> F19 <code>f20</code> F20 <code>f21</code> F21 <code>f22</code> F22 <code>f23</code> F23 <code>f24</code> F24"},{"location":"samples/keyboard-keys.html#extra-keys","title":"Extra Keys","text":"Name Display Aliases <code>backtab</code> Back Tab <code>bktab</code> <code>browser-back</code> Browser Back <code>browser-favorites</code> Browser Favorites <code>favorites</code> <code>browser-forward</code> Browser Forward <code>forward</code> <code>browser-home</code> Browser Home <code>browser-refresh</code> Browser Refresh <code>refresh</code> <code>browser-search</code> Browser Search <code>search</code> <code>browser-stop</code> Browser Stop <code>copy</code> Copy <code>context-menu</code> Menu <code>apps</code>, <code>menu</code> <code>fingerprint</code> Fingerprint <code>fingerprint</code> <code>mail</code> Mail <code>launch-mail</code> <code>media</code> Media <code>launch-media</code> <code>media-next-track</code> Next Track <code>next-track</code> <code>media-pause</code> Pause <code>pause</code> <code>media-play</code> Play <code>play</code> <code>media-play-pause</code> Play/Pause <code>play-pause</code> <code>media-prev-track</code> Previous Track <code>prev-track</code> <code>media-stop</code> Stop <code>stop</code> <code>power</code> Power <code>print</code> Print <code>reset</code> Reset <code>select</code> Select <code>sleep</code> Sleep <code>volume-down</code> Volume Down <code>vol-down</code> <code>volume-mute</code> Mute <code>mute</code> <code>volume-up</code> Volume Up <code>vol-up</code> <code>zoom</code> Zoom"},{"location":"samples/keyboard-keys.html#mouse","title":"Mouse","text":"Name Display Aliases <code>left-button</code> Left Button <code>lbutton</code> <code>middle-button</code> Middle Button <code>mbutton</code> <code>right-button</code> Right Button <code>rbutton</code> <code>x-button1</code> X Button 1 <code>xbutton1</code> <code>x-button2</code> X Button 2 <code>xbutton2</code>"},{"location":"samples/linkings.html","title":"Linkings","text":""},{"location":"samples/linkings.html#simple","title":"Simple","text":"<p>Bracketed</p> <ul> <li>Basic Dotnet WebAPI Project</li> </ul>"},{"location":"samples/linkings.html#with-icon","title":"With icon","text":"<ul> <li> Azure</li> <li> Cloudflare Pages</li> <li> DigitalOcean</li> <li> Fly.io</li> <li> Netlify</li> <li> Vercel</li> <li> Codeberg Pages</li> </ul>"},{"location":"samples/lists.html","title":"Lists","text":""},{"location":"samples/lists.html#list-unordered","title":"List, unordered","text":"<ul> <li> <p>Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur   accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh   lacinia sed. Aenean in finibus diam.</p> <ul> <li>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.</li> <li>Nam vulputate tincidunt fringilla.</li> <li>Nullam dignissim ultrices urna non auctor.</li> </ul> </li> </ul>"},{"location":"samples/lists.html#list-ordered","title":"List, ordered","text":"<ol> <li> <p>Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis     sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis     nulla. Vivamus a pharetra leo.</p> <ol> <li> <p>Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet     quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a     ultricies libero efficitur sed.</p> </li> <li> <p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet     rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.</p> <ol> <li>Mauris dictum mi lacus</li> <li>Ut sit amet placerat ante</li> <li>Suspendisse ac eros arcu</li> </ol> </li> </ol> </li> </ol>"},{"location":"samples/lists.html#definition-list","title":"Definition List","text":"<code>Lorem ipsum dolor sit amet</code> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis.</p> <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p>"},{"location":"samples/lists.html#task-list","title":"Task list","text":"<ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul>"},{"location":"samples/lists.html#multiple-column-list","title":"Multiple Column List","text":"<ul> <li> Azure</li> <li> Cloudflare Pages</li> <li> DigitalOcean</li> <li> Fly.io</li> <li> Netlify</li> <li> Vercel</li> <li> Codeberg Pages</li> </ul>"},{"location":"samples/lists.html#list-for-definations","title":"List for definations","text":"<ul> <li> Firefox 31-52 \u2013 icons will render as little   boxes due to missing support for [mask images]. While this cannot be   polyfilled, it might be mitigated by hiding the icons altogether.</li> <li> Edge 16-18 \u2013 the spacing of some elements might   be a little off due to missing support for the [:is pseudo selector], which   can be mitigated with some additional effort.</li> <li> Internet Explorer - no support,   mainly due to missing support for [custom properties]. The last version of   Material for MkDocs to support Internet Explorer is   v1.0.0.</li> </ul>"},{"location":"samples/math.html","title":"Math","text":""},{"location":"samples/math.html#basic","title":"Basic","text":"\\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]"},{"location":"samples/math.html#inline","title":"Inline","text":"<p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\).</p> <p> </p>"},{"location":"samples/metas.html","title":"Welcome to MkDocs","text":"<pre><code>---\ntitle: Metas\ndate: 2024-01-31\nicon: material/emoticon-happy \nstatus: new\ndescription: Nullam urna elit, malesuada eget finibus ut, ac tortor. \ntags:\n  - HTML5\n  - JavaScript\n  - CSS\n  - php\n# template: custom.html\n---\n</code></pre>","tags":["HTML5","JavaScript","CSS","php"]},{"location":"samples/page.html","title":"Page","text":""},{"location":"samples/page.html#general","title":"General","text":""},{"location":"samples/page.html#comment","title":"Comment","text":"<p>https://squidfunk.github.io/mkdocs-material/setup/adding-a-comment-system/</p> <p> </p>"},{"location":"samples/progressbar.html","title":"Progressbar","text":"<p>[][_progressbar]{: .source-link }</p>"},{"location":"samples/progressbar.html#basic","title":"Basic","text":"<p> <p>0%</p> <p>5%</p> <p>25%</p> <p>45%</p> <p>65%</p> <p>85%</p> <p>100%</p> </p>"},{"location":"samples/progressbar.html#progress-bars-with-attributes","title":"Progress Bars with Attributes","text":"<p> <p>85%</p> <p>100%</p> </p> <p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> </p> <p> </p>"},{"location":"samples/referencing.html","title":"Referencing","text":""},{"location":"samples/referencing.html#youtube-video","title":"Youtube Video","text":"<p> How to set up Material for MkDocs by @james-willett \u2013  15m \u2013 Learn how to create and host a documentation site using Material for MkDocs on GitHub Pages in a step-by-step guide.</p> <p> </p>"},{"location":"samples/result.html","title":"Result","text":"Text with annotations<pre><code>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n{ .annotate }\n\n1.  :man_raising_hand: I'm an annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be expressed in Markdown.\n</code></pre> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> <p> </p>"},{"location":"samples/shortcodes.html","title":"Shortcodes","text":""},{"location":"samples/shortcodes.html#types","title":"Types","text":"v1.0.0 Versioning Default Computed Empty Computed Default Computed Default Required Metadata Multiple Optional Feature Experimental Plugin Extention <p><code>.zip</code> </p>"},{"location":"samples/shortcodes.html#usages","title":"Usages","text":""},{"location":"samples/shortcodes.html#in-the-footnotes","title":"In the Footnotes","text":""},{"location":"samples/smart-symbols.html","title":"Smart symbols","text":""},{"location":"samples/smart-symbols.html#smartsymbols","title":"SmartSymbols","text":"Markdown Result <code>(tm)</code> \u2122 <code>(c)</code> \u00a9 <code>(r)</code> \u00ae <code>c/o</code> \u2105 <code>+/-</code> \u00b1 <code>--&gt;</code> \u2192 <code>&lt;--</code> \u2190 <code>&lt;--&gt;</code> \u2194 <code>=/=</code> \u2260 <code>1/4, etc.</code> \u00bc, etc. <code>1st 2nd etc.</code> 1<sup>st</sup> 2<sup>nd</sup> etc."},{"location":"samples/snippets.html","title":"Snippets","text":""},{"location":"samples/snippets.html#inline-format","title":"Inline Format","text":""},{"location":"samples/snippets.html#basic","title":"Basic","text":"<p>last 4 years</p>"},{"location":"samples/snippets.html#single-line","title":"Single line","text":"<p>45.61.172.7 - - [14/Feb/2022:04:16:55 +0000] \"POST / HTTP/1.1\" 405 568 \"-\" </p>"},{"location":"samples/snippets.html#line-range","title":"Line range","text":"<p>45.61.172.7 - - [14/Feb/2022:04:16:55 +0000] \"POST / HTTP/1.1\" 405 568 \"-\"  45.137.21.134 - - [14/Feb/2022:04:18:57 +0000] \"GET /dispatch.asp HTTP/1.1\" 404 134 \"-\"  23.95.100.141 - - [14/Feb/2022:04:42:23 +0000] \"HEAD / HTTP/1.0\" 200 0 \"-\"</p>"},{"location":"samples/snippets.html#from-section","title":"From Section","text":""},{"location":"samples/snippets.html#block-format","title":"Block Format","text":""},{"location":"samples/snippets.html#basic_1","title":"Basic","text":"<p>last 4 years 107.189.10.196 - - [14/Feb/2022:03:48:55 +0000] \"POST /HNAP1/ HTTP/1.1\" 404 134 \"-\"  35.162.122.225 - - [14/Feb/2022:04:11:57 +0000] \"GET /.env HTTP/1.1\" 404 162 \"-\"  45.61.172.7 - - [14/Feb/2022:04:16:54 +0000] \"GET /.env HTTP/1.1\" 404 197 \"-\"  45.61.172.7 - - [14/Feb/2022:04:16:55 +0000] \"POST / HTTP/1.1\" 405 568 \"-\"  45.137.21.134 - - [14/Feb/2022:04:18:57 +0000] \"GET /dispatch.asp HTTP/1.1\" 404 134 \"-\"  23.95.100.141 - - [14/Feb/2022:04:42:23 +0000] \"HEAD / HTTP/1.0\" 200 0 \"-\" 217.138.222.101 - - [14/Feb/2022:07:38:40 +0000] \"GET /icons/ubuntu-logo.png HTTP/1.1\" 404 197 \"http://168.119.119.25/\"  217.138.222.101 - - [14/Feb/2022:07:38:42 +0000] \"GET /favicon.ico HTTP/1.1\" 404 197 \"http://168.119.119.25/\"  217.138.222.101 - - [14/Feb/2022:07:44:02 +0000] \"GET / HTTP/1.1\" 304 0 \"-\"  217.138.222.101 - - [14/Feb/2022:07:44:02 +0000] \"GET /icons/ubuntu-logo.png HTTP/1.1\" 404 197 \"http://168.119.119.25/\" </p>"},{"location":"samples/snippets.html#with-new-line","title":"With new line","text":"<p>last 4 years</p> <p>107.189.10.196 - - [14/Feb/2022:03:48:55 +0000] \"POST /HNAP1/ HTTP/1.1\" 404 134 \"-\"  35.162.122.225 - - [14/Feb/2022:04:11:57 +0000] \"GET /.env HTTP/1.1\" 404 162 \"-\"  45.61.172.7 - - [14/Feb/2022:04:16:54 +0000] \"GET /.env HTTP/1.1\" 404 197 \"-\"  45.61.172.7 - - [14/Feb/2022:04:16:55 +0000] \"POST / HTTP/1.1\" 405 568 \"-\"  45.137.21.134 - - [14/Feb/2022:04:18:57 +0000] \"GET /dispatch.asp HTTP/1.1\" 404 134 \"-\"  23.95.100.141 - - [14/Feb/2022:04:42:23 +0000] \"HEAD / HTTP/1.0\" 200 0 \"-\" 217.138.222.101 - - [14/Feb/2022:07:38:40 +0000] \"GET /icons/ubuntu-logo.png HTTP/1.1\" 404 197 \"http://168.119.119.25/\"  217.138.222.101 - - [14/Feb/2022:07:38:42 +0000] \"GET /favicon.ico HTTP/1.1\" 404 197 \"http://168.119.119.25/\"  217.138.222.101 - - [14/Feb/2022:07:44:02 +0000] \"GET / HTTP/1.1\" 304 0 \"-\"  217.138.222.101 - - [14/Feb/2022:07:44:02 +0000] \"GET /icons/ubuntu-logo.png HTTP/1.1\" 404 197 \"http://168.119.119.25/\" </p>"},{"location":"samples/snippets.html#single-line_1","title":"Single line","text":"<p>45.61.172.7 - - [14/Feb/2022:04:16:55 +0000] \"POST / HTTP/1.1\" 405 568 \"-\" </p>"},{"location":"samples/snippets.html#line-range_1","title":"Line range","text":"<p>45.61.172.7 - - [14/Feb/2022:04:16:55 +0000] \"POST / HTTP/1.1\" 405 568 \"-\"  45.137.21.134 - - [14/Feb/2022:04:18:57 +0000] \"GET /dispatch.asp HTTP/1.1\" 404 134 \"-\"  23.95.100.141 - - [14/Feb/2022:04:42:23 +0000] \"HEAD / HTTP/1.0\" 200 0 \"-\"</p>"},{"location":"samples/snippets.html#from-section_1","title":"From Section","text":""},{"location":"samples/tables.html","title":"Tables","text":""},{"location":"samples/tables.html#basic","title":"Basic","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"samples/tables.html#data-table-columns-aligned-to-left","title":"Data table, columns aligned to left","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"samples/tables.html#data-table-columns-centered","title":"Data table, columns centered","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"samples/tables.html#data-table-columns-aligned-to-right","title":"Data table, columns aligned to right","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"samples/tables.html#spanned-table","title":"Spanned Table","text":"Header 1 Header 2 Header 3 Value 1 :~~: Value 2 ~~ Value 3 _     =    _ ~~ Value 5 Value 6 Value 7 Value 8"},{"location":"samples/tables.html#data-table-with-icon","title":"Data table, With icon","text":"Browser Version Release date Usage desktop mobile overall  Chrome 49+ 03/2016 25.65% 38.33% 63.98%  Safari 10+ 09/2016 4.63% 14.96% 19.59%  Edge 79+ 01/2020 3.95% n/a 3.95%  Firefox 53+ 04/2017 3.40% .30% 3.70%  Opera 36+ 03/2016 1.44% .01% 1.45% 92.67%"},{"location":"samples/tables.html#data-table-with-caption","title":"Data table with caption","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <p>Table Caption</p>"},{"location":"samples/tables.html#import-table-from-file","title":"Import table from file","text":"<p>https://squidfunk.github.io/mkdocs-material/reference/data-tables/#import-table-from-file</p> <p> </p>"},{"location":"samples/tabs.html","title":"Tabs","text":""},{"location":"samples/tabs.html#simple","title":"Simple","text":"WindowsLinux/UnixMacOS"},{"location":"samples/tags.html","title":"Tag Icons","text":"<p>Search icons  icon search <pre><code>theme:\n    icon:\n    tag:\n        html: fontawesome/brands/html5\nextra:\n    tags:\n        HTML5: html\n</code></pre></p> <p> </p>","tags":["HTML5","JavaScript","CSS","php"]},{"location":"samples/tooltips.html","title":"Tooltips","text":""},{"location":"samples/tooltips.html#basic","title":"Basic","text":"<p>Hover me</p>"},{"location":"samples/tooltips.html#link-with-tooltip-reference-syntax","title":"Link with tooltip, reference syntax","text":"<p>Hover me</p>"},{"location":"samples/tooltips.html#icon-with-tooltip","title":"Icon with tooltip","text":""},{"location":"samples/files/group-models/001/readme.html","title":"Readme","text":"./samples/ :material-download:.zip :material-download:.rar :material-download:.7z :material-download:.tar.gz <pre><code>.\n\u251c\u2500 samples/\n\u2502  \u251c\u2500 ApexSolutions.yaml\n\u2502  \u251c\u2500 NeptuneDev.yaml\n\u2514\u2500\u2500\u2514\u2500 OrionTech.yaml\n</code></pre> ApexSolutions.yamlNeptuneDev.yamlOrionTech.yaml <pre><code>type: Group\nname: ApexSolutions\nspecifications:\n  name: ApexSolutions\n</code></pre> <pre><code>type: Group\nname: NeptuneDev\nspecifications:\n  name: NeptuneDev\n</code></pre> <pre><code>type: Group\nname: OrionTech\nspecifications:\n  name: OrionTech\n</code></pre>"},{"location":"samples/files/resource-models/001/readme.html","title":"Readme","text":"./samples/ :material-download:.zip :material-download:.rar :material-download:.7z :material-download:.tar.gz <pre><code>.\n\u251c\u2500 samples/\n\u2502  \u251c\u2500 ProductCategorySeedDataResource.yaml\n\u2502  \u251c\u2500 ProductBrandSeedDataResource.yaml\n\u2514\u2500\u2500\u2514\u2500 ProductSeedDataResource.yaml\n</code></pre> ProductCategorySeedDataResource.yamlProductBrandSeedDataResource.yamlProductSeedDataResource.yaml <pre><code>type: Resource\nkind: Data\nname: ProductCategory_SeedData\nmetadata:\nspecifications:\n  name: ProductCategory\n  set: EShopping\n  data:\n    - id: 0e56e7b1-1635-5733-a6c0-9b9328db5e3a\n      name: Shoes\n    - id: 84309aec-6025-5ab7-9e40-d19eb6d4c217\n      name: Smart Phone\n    - id: 671fd8be-295d-5484-8a2a-9661b2f940fb\n      name: Electronic\n</code></pre> <pre><code>type: Resource\nkind: Data\nname: ProductBrand_SeedData\nmetadata:\nspecifications:\n  name: ProductBrand\n  set: EShopping\n  data:\n    - id: 9ae4671e-8d35-522e-8315-dd562f19f102\n      name: Nike\n    - id: 00470e36-9c22-58e5-8436-93391a6f4baa\n      name: Apple\n    - id: 3f137853-eb58-52b3-a0f0-be81dbf690ef\n      name: Samsung\n    - id: 05a1fa28-d547-57fd-a66d-e9a3a31ca736\n      name: Adidas\n    - id: 153c2af3-3943-5f1b-aa67-d31c72f476e2\n      name: Sony\n</code></pre> <pre><code>type: Resource\nkind: Data\nname: Product_SeedData\nmetadata:\nspecifications:\n  name: Product\n  set: EShopping\n  data:\n    - id: 10b84b2b-7cc0-56c8-8cd2-708aa443d7a1\n      name: Nike Shoes\n      price: 3375\n      imageFile: images/products/nike-shoes.jpg\n      summary: \"Nike Shoes summ..\"\n      types:\n        id: 0e56e7b1-1635-5733-a6c0-9b9328db5e3a\n        name: Shoes\n      brands:\n        id: 9ae4671e-8d35-522e-8315-dd562f19f102\n        name: Nike\n      description: |\n        Nike, Inc. is an American multinational corporation that designs, develops, manufactures, and markets footwear, apparel, equipment, accessories, and services.\n\n    - id: 912d8b4b-8292-5d59-be48-ca198607637f\n      name: iPhone 15\n      price: 3375\n      imageFile: images/products/nike-shoes.jpg\n      summary: \"IPhone summ..\"\n      types:\n        id: 84309aec-6025-5ab7-9e40-d19eb6d4c217\n        name: Smart Phone\n      brands:\n        id: 00470e36-9c22-58e5-8436-93391a6f4baa\n        name: Apple\n      description: |\n        Apple Decription\n</code></pre>"},{"location":"samples/files/template-models/001/readme.html","title":"Readme","text":"./samples/ :material-download:.zip :material-download:.rar :material-download:.7z :material-download:.tar.gz <pre><code>.\n\u251c\u2500 samples/\n\u2502  \u251c\u2500 SeedFileYamlTemplate.yaml\n\u2502  \u251c\u2500 SeedFileJsonTemplate.yaml\n\u2514\u2500\u2500\u2514\u2500 SeedFileTxtTemplate.yaml\n</code></pre> SeedFileYamlTemplate.yamlSeedFileJsonTemplate.yamlSeedFileTxtTemplate.yaml <pre><code>type: Template\nkind: File\nname: SeedFileYaml_Template\nmetadata:\n  tags:\nspecifications:\n  name: SeedFile_Yaml\n  output: \"{{.Resource.Name}}.yaml\"\n  set: EShopping\n  layers:\n  template:\n    content: |\n      {{ .Resource.Data }}\n</code></pre> <pre><code>type: Template\nkind: File\nname: SeedFileJson_Template\nmetadata:\n  tags:\nspecifications:\n  name: SeedFile_Json\n  output: \"{{.Resource.Name}}.json\"\n  set: EShopping\n  layers:\n  template:\n    content: |\n      {{ prettifyjson (tojson .Resource.Data) }}\n</code></pre> <pre><code>type: Template\nkind: File\nname: SeedFileTxt_Template\nmetadata:\n  tags:\nspecifications:\n  name: SeedFile_Txt\n  output: \"{{.Resource.Name}}.txt\"\n  set: EShopping\n  layers:\n  template:\n    content: |\n      {{ .Resource.Data }}\n</code></pre>"},{"location":"samples/test/projectObjectModel.html","title":"YAML Documentation","text":""},{"location":"samples/test/projectObjectModel.html#type","title":"type","text":"<p>Value: <code>Project</code></p> <p>Description: This indicates the type of the entity described by this YAML file. In this case, it is a \"Project\".</p>"},{"location":"samples/test/projectObjectModel.html#kind","title":"kind","text":"<p>Value: <code>Application</code></p> <p>Description: This specifies the kind of project. Here, it is an \"Application\".</p>"},{"location":"samples/test/projectObjectModel.html#name","title":"name","text":"<p>Value: <code>EShopping.Catalog.Core</code></p> <p>Description: The name of the project. This name uniquely identifies the project within the scope of the EShopping catalog.</p>"},{"location":"samples/test/projectObjectModel.html#metadata","title":"metadata","text":"<p>tags: <code>None</code></p> <p>Description: This section is intended for any tags that might categorize or label the project. Currently, no tags are provided.</p>"},{"location":"samples/test/projectObjectModel.html#specifications","title":"specifications","text":""},{"location":"samples/test/projectObjectModel.html#name_1","title":"name","text":"<p>Value: <code>Catalog.Core</code></p> <p>Description: The name of the specific component or module within the project. Here, it refers to \"Catalog.Core\".</p>"},{"location":"samples/test/projectObjectModel.html#set","title":"set","text":"<p>Value: <code>EShopping</code></p> <p>Description: This specifies the set or group to which the project belongs. In this case, it belongs to \"EShopping\".</p>"},{"location":"samples/test/projectObjectModel.html#platform","title":"platform","text":"<p>Value: <code>dotnet</code></p> <p>Description: The platform on which the project is built or intended to run. Here, it is specified as \"dotnet\".</p>"},{"location":"samples/test/projectObjectModel.html#project_type","title":"project_type","text":"<p>Value: <code>library</code></p> <p>Description: This indicates the type of project, whether it is an application, library, service, etc. Here, it is a \"library\".</p>"},{"location":"samples/test/projectObjectModel.html#package","title":"package","text":"<p>Value: <code>Catalog.Core</code></p> <p>Description: The package name of the project. This typically corresponds to the namespace or module name in the codebase.</p>"},{"location":"samples/test/projectObjectModel.html#group","title":"group","text":"<p>Value: <code>EShoppingProject</code></p> <p>Description: The group or collection to which this project belongs. It helps in organizing related projects under a common banner. Here, it is \"EShoppingProject\".</p>"},{"location":"samples/test/projectObjectModel.html#path","title":"path","text":"<p>Value: <code>/Services/Catalog/Catalog.Core</code></p> <p>Description: The file system path where the project is located within the source code repository.</p>"},{"location":"samples/test/projectObjectModel.html#configuration","title":"configuration","text":""},{"location":"samples/test/projectObjectModel.html#layers","title":"layers","text":"<p>This section describes the various layers of the project configuration.</p>"},{"location":"samples/test/projectObjectModel.html#layer-1","title":"Layer 1","text":"<p>name: <code>Library:Data:BaseEntity</code></p> <p>Description: This describes a specific layer within the project. Here, it is a \"Library:Data:BaseEntity\", indicating it deals with base entities in the data layer of the library.</p> <p>path: <code>Entities</code></p> <p>Description: The path within the project where this layer's files are located. Here, it is \"Entities\".</p> <p>package: <code>Entities</code></p> <p>Description: The package name associated with this layer. This typically corresponds to a namespace or module within the project codebase.</p> <p> </p>"},{"location":"setup/index.html","title":"Releases","text":""},{"location":"setup/changelogs/v1.0.0.html","title":"1.0.0 August 4, 2024","text":""},{"location":"setup/changelogs/v1.0.0.html#general","title":"General","text":"<ul> <li>Initial release</li> </ul>"},{"location":"setup/changelogs/v1.0.5.html","title":"1.0.0 August 4, 2024","text":""},{"location":"setup/changelogs/v1.0.5.html#general","title":"General","text":"<ul> <li>Initial release</li> </ul>"},{"location":"setup/configuration/configuration.html","title":"Configuration","text":"","tags":["completion","bash","fish","powershell","zsh"]},{"location":"setup/configuration/configuration.html#auto-completion","title":"Auto Completion","text":"<p>See Completion Command for more details of 6251a85a-47d0-11ee-be56-0242ac120002:pars:Auto Completion:&lt;__None__&gt;:0aebfe7e77feb1acd44d78bf37f068d3 features</p> PowershellBashFishZsh <p>Print script <pre><code>pars completion powershell\n</code></pre></p> <p>Print script <pre><code>pars completion bash\n</code></pre></p> <p>Print script <pre><code>pars completion fish\n</code></pre></p> <p>Print script <pre><code>pars completion zsh\n</code></pre></p> <p> </p>","tags":["completion","bash","fish","powershell","zsh"]},{"location":"setup/downloads/achieve.html","title":"Achieve","text":""},{"location":"setup/downloads/linux.html","title":"Linux","text":""},{"location":"setup/downloads/macos.html","title":"MacOS","text":""},{"location":"setup/downloads/windows.html","title":"Windows","text":""},{"location":"setup/installation/installation.html","title":"Installation","text":"","tags":["installation"]},{"location":"setup/installation/uninstall.html","title":"Uninstall","text":"","tags":["uninstall"]},{"location":"setup/upgrade/upgrade-0xto1x.html","title":"Upgrade 1.x to 2.x","text":""},{"location":"setup/upgrade/upgrade.html","title":"Upgrade","text":""},{"location":"setup/upgrade/upgrade.html#title-upgrading-pars","title":"title: Upgrading Pars","text":""},{"location":"taslak/main.html","title":"Pars Documentation","text":""},{"location":"taslak/main.html#contents","title":"Contents","text":"<ul> <li>Pars Documentation</li> <li>Contents</li> <li>Getting Started</li> <li>Notes</li> <li>Features<ul> <li>Platforms</li> </ul> </li> <li>Todos</li> <li>Installation<ul> <li>Requirements</li> <li>Windows</li> <li>Linux (Debian/Ubuntu/Fedora/openSUSE)</li> <li>MacOS</li> <li>Docker</li> </ul> </li> <li>Configuration<ul> <li>Configuration File</li> <li>Environment Variables</li> </ul> </li> <li>Backup</li> <li>Restore</li> <li>Upgrade</li> <li>Uninstall</li> <li>Quickstart<ul> <li>Basic Commands</li> <li>Advanced Usage</li> <li>Samples</li> </ul> </li> <li>Releases</li> <li>Documentation</li> <li>Debugging and Troubleshooting<ul> <li>Errors</li> <li>Logging</li> <li>FAQ (Frequently Asked Questions)</li> </ul> </li> <li>Reporting Issues - Help<ul> <li>Bugs</li> <li>Feature Requests</li> <li>Questions</li> </ul> </li> <li>Stay in Touch<ul> <li>Share your story</li> <li>Subscribe for Updates</li> </ul> </li> <li>Additional Resources</li> <li>Contributing<ul> <li>Forking</li> <li>Creating Branch</li> <li>Changs</li> <li>Pull Request</li> </ul> </li> <li>License</li> <li>Community</li> <li>Contact</li> <li>History</li> <li>Support</li> <li>Thanks</li> <li>Contributors</li> <li>Backers</li> <li>Sponsors</li> </ul>"},{"location":"taslak/main.html#getting-started","title":"Getting Started","text":"<p>[Burada giri\u015f b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#notes","title":"Notes","text":"<p>[Burada giri\u015f b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#features","title":"Features","text":"<p>[Burada \u00f6zellikler b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#platforms","title":"Platforms","text":"<ul> <li>Dotnet</li> <li>NodeJS</li> <li>Angular</li> <li>Vue</li> <li>React</li> <li>Spring Boot</li> <li>Go</li> </ul>"},{"location":"taslak/main.html#todos","title":"Todos","text":""},{"location":"taslak/main.html#installation","title":"Installation","text":""},{"location":"taslak/main.html#requirements","title":"Requirements","text":"<p>[Burada \u00f6n ko\u015fullar b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#windows","title":"Windows","text":"<ul> <li>MSI</li> <li>.zip</li> <li>Choco</li> <li>Pacman</li> <li>CLI</li> </ul>"},{"location":"taslak/main.html#linux-debianubuntufedoraopensuse","title":"Linux (Debian/Ubuntu/Fedora/openSUSE)","text":"<ul> <li>yum</li> <li>apt-get</li> <li>.deb</li> <li>.rpm</li> <li>.tar.gz</li> <li>Snap</li> <li>CLI</li> </ul>"},{"location":"taslak/main.html#macos","title":"MacOS","text":"<ul> <li>brew</li> <li>.zip</li> <li>CLI</li> </ul>"},{"location":"taslak/main.html#docker","title":"Docker","text":"<ul> <li>Image</li> </ul> <p>[Burada ad\u0131m ad\u0131m kurulum b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#configuration","title":"Configuration","text":""},{"location":"taslak/main.html#configuration-file","title":"Configuration File","text":"<p>[Burada yap\u0131land\u0131rma dosyas\u0131 b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#environment-variables","title":"Environment Variables","text":"<p>[Burada \u00e7evresel de\u011fi\u015fkenler b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#backup","title":"Backup","text":""},{"location":"taslak/main.html#restore","title":"Restore","text":""},{"location":"taslak/main.html#upgrade","title":"Upgrade","text":""},{"location":"taslak/main.html#uninstall","title":"Uninstall","text":""},{"location":"taslak/main.html#quickstart","title":"Quickstart","text":""},{"location":"taslak/main.html#basic-commands","title":"Basic Commands","text":"<p>[Burada temel komutlar b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#advanced-usage","title":"Advanced Usage","text":"<p>[Burada geli\u015fmi\u015f kullan\u0131m b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#samples","title":"Samples","text":"<p>[Burada \u00f6rnek senaryolar b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#releases","title":"Releases","text":""},{"location":"taslak/main.html#documentation","title":"Documentation","text":"<p>[Burada  API dok\u00fcmantasyonuna yer verilecektir...]</p>"},{"location":"taslak/main.html#debugging-and-troubleshooting","title":"Debugging and Troubleshooting","text":""},{"location":"taslak/main.html#errors","title":"Errors","text":"<p>[Burada hata mesajlar\u0131 b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#logging","title":"Logging","text":"<p>[Burada loglama b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#faq-frequently-asked-questions","title":"FAQ (Frequently Asked Questions)","text":"<p>[Burada s\u0131k\u00e7a sorulan sorular b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#reporting-issues-help","title":"Reporting Issues - Help","text":""},{"location":"taslak/main.html#bugs","title":"Bugs","text":""},{"location":"taslak/main.html#feature-requests","title":"Feature Requests","text":""},{"location":"taslak/main.html#questions","title":"Questions","text":""},{"location":"taslak/main.html#stay-in-touch","title":"Stay in Touch","text":""},{"location":"taslak/main.html#share-your-story","title":"Share your story","text":""},{"location":"taslak/main.html#subscribe-for-updates","title":"Subscribe for Updates","text":""},{"location":"taslak/main.html#additional-resources","title":"Additional Resources","text":"<ul> <li>Official Website</li> <li>Source Code Repository - Github</li> <li>Issue Tracking</li> <li>Support - Open Collective</li> </ul>"},{"location":"taslak/main.html#contributing","title":"Contributing","text":""},{"location":"taslak/main.html#forking","title":"Forking","text":"<p>[Burada projeyi forklama b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#creating-branch","title":"Creating Branch","text":"<p>[Burada dal olu\u015fturma b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#changs","title":"Changs","text":"<p>[Burada de\u011fi\u015fiklik yapma b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#pull-request","title":"Pull Request","text":"<p>[Burada pull request olu\u015fturma b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#license","title":"License","text":""},{"location":"taslak/main.html#community","title":"Community","text":""},{"location":"taslak/main.html#contact","title":"Contact","text":"<p>[Burada ileti\u015fim ve destek b\u00f6l\u00fcm\u00fcne yer verilecektir...]</p>"},{"location":"taslak/main.html#history","title":"History","text":""},{"location":"taslak/main.html#support","title":"Support","text":""},{"location":"taslak/main.html#thanks","title":"Thanks","text":""},{"location":"taslak/main.html#contributors","title":"Contributors","text":""},{"location":"taslak/main.html#backers","title":"Backers","text":""},{"location":"taslak/main.html#sponsors","title":"Sponsors","text":""},{"location":"taslak/sample.html","title":"Pars","text":""},{"location":"taslak/sample.html#pars-guide-to-documentation","title":"Pars Guide to Documentation","text":"<p>See this project on readthedocs.org or read * user guide md * maintainer guide md * contrubitor guide md</p>"},{"location":"taslak/sample.html#getting-started","title":"Getting Started","text":"<ul> <li>Pars Guide to Documentation</li> <li>Getting Started</li> <li>Introduction</li> <li>Languages</li> <li>Features</li> <li>Future Features</li> <li>Requirements</li> <li>Installation</li> <li>Installing binaries<ul> <li>Linux</li> <li>Windows</li> <li>MacOS</li> </ul> </li> <li>Docker</li> <li>Building from Source</li> <li>Configuration</li> <li>Backup</li> <li>Restore</li> <li>Upgrade</li> <li>Uninstall</li> <li>Quickstart<ul> <li>Temel Komutlar</li> <li>\u00d6rnek Senaryo</li> </ul> </li> <li>Documentation</li> <li>Releases</li> <li>Currently Supported Platforms</li> <li>Contributing</li> <li>READMEs</li> <li>Reporting Issues - Help<ul> <li>Bugs</li> <li>Feature Requests</li> <li>Questions</li> </ul> </li> <li>Engage with us<ul> <li>Share your story</li> <li>Subscribe for Updates</li> </ul> </li> <li>History</li> <li>License</li> <li>Community</li> <li>Contact</li> <li>Thanks :purple_heart:</li> <li>Contributors</li> <li>Backers</li> <li>Support</li> <li>Sponsors</li> </ul> <p>Pars, geli\u015ftiricilerin g\u00fcnl\u00fck g\u00f6revlerini daha verimli bir \u015fekilde yapmalar\u0131na yard\u0131mc\u0131 olmak i\u00e7in tasarlanm\u0131\u015f a\u00e7\u0131k kaynakl\u0131 bir komut sat\u0131r\u0131 arac\u0131d\u0131r. Pars, \u00e7e\u015fitli otomasyon, veri i\u015fleme ve sistem y\u00f6netimi g\u00f6revlerini basitle\u015ftirir.</p> <p>Bu belge, <code>pars</code> komut sat\u0131r\u0131 uygulamas\u0131n\u0131n (CLI) kullan\u0131m\u0131n\u0131 a\u00e7\u0131klar. <code>pars</code>, geli\u015ftirici ara\u00e7lar\u0131, proje modelleme, kod generation ve di\u011fer yard\u0131mc\u0131 \u00e7\u00f6z\u00fcmler ile ilgili \u00e7e\u015fitli i\u015flemleri ger\u00e7ekle\u015ftirmek i\u00e7in kullan\u0131lan bir ara\u00e7t\u0131r.</p> <p>\u0130\u00e7erik:</p> <ol> <li>Giri\u015f:<ul> <li><code>pars</code> nedir?</li> <li>Neden <code>pars</code> kullanmal\u0131s\u0131n\u0131z?</li> <li><code>pars</code> \u00d6zellikleri</li> </ul> </li> <li>Kurulum:<ul> <li><code>pars</code> nas\u0131l kurulur?</li> </ul> </li> <li>Kullan\u0131m:<ul> <li>Temel Kullan\u0131m</li> <li>Komutlar<ul> <li><code>init</code></li> <li><code>workspace</code></li> <li><code>project</code></li> </ul> </li> <li>Se\u00e7enekler<ul> <li>K\u00fcresel Se\u00e7enekler</li> <li>Komut Se\u00e7enekleri</li> </ul> </li> </ul> </li> <li>\u00d6rnekler:<ul> <li>Basit bir \u00e7al\u0131\u015fma alan\u0131n\u0131 tan\u0131mlama</li> <li>T\u00fcm \u00e7al\u0131\u015fma alanlar\u0131n\u0131 listeleme</li> <li>Bir \u00e7al\u0131\u015fma alan\u0131n\u0131 kald\u0131rma</li> </ul> </li> <li>Yard\u0131m ve Destek:<ul> <li>Yard\u0131m alma</li> <li>Hata bildirimi</li> </ul> </li> <li>Ek:<ul> <li>Lisans</li> <li>Katk\u0131da Bulunma</li> </ul> </li> </ol>"},{"location":"taslak/sample.html#introduction","title":"Introduction","text":""},{"location":"taslak/sample.html#languages","title":"Languages","text":"<p>You can see in which language an app is written. Currently there are following languages:</p> <ul> <li>![c_icon] - C language.</li> <li>![cpp_icon] - C++ language.</li> <li>![c_sharp_icon] - C# language.</li> <li>![clojure_icon] - Clojure language.</li> <li>![coffee_script_icon] - CoffeeScript language.</li> <li>![css_icon] - CSS language.</li> <li>![go_icon] - Go language.</li> <li>![elm_icon] - Elm language.</li> <li>![haskell_icon] - Haskell language.</li> <li>![javascript_icon] - JavaScript language.</li> <li>![lua_icon] - Lua language.</li> <li>![objective_c_icon] - Objective-C language.</li> <li>![python_icon] - Python language.</li> <li>![ruby_icon] - Ruby language.</li> <li>![rust_icon] - Rust language.</li> <li>![shell_icon] - Shell language.</li> <li>![swift_icon] - Swift language.</li> <li>![typescript_icon] - TypeScript language.</li> <li></li> </ul>"},{"location":"taslak/sample.html#features","title":"Features","text":"<ul> <li>Kolay kurulum ve yap\u0131land\u0131rma</li> <li>Esnek ve geni\u015fletilebilir komut seti</li> <li>Y\u00fcksek performansl\u0131 veri i\u015fleme</li> <li>\u00c7oklu platform deste\u011fi (Windows, macOS, Linux)</li> </ul>"},{"location":"taslak/sample.html#future-features","title":"Future Features","text":""},{"location":"taslak/sample.html#requirements","title":"Requirements","text":""},{"location":"taslak/sample.html#installation","title":"Installation","text":""},{"location":"taslak/sample.html#installing-binaries","title":"Installing binaries","text":""},{"location":"taslak/sample.html#linux","title":"Linux","text":""},{"location":"taslak/sample.html#windows","title":"Windows","text":"<ul> <li>Download Source Code</li> <li>Installer</li> <li>Choco</li> <li>WGet</li> </ul>"},{"location":"taslak/sample.html#macos","title":"MacOS","text":""},{"location":"taslak/sample.html#docker","title":"Docker","text":""},{"location":"taslak/sample.html#building-from-source","title":"Building from Source","text":""},{"location":"taslak/sample.html#configuration","title":"Configuration","text":""},{"location":"taslak/sample.html#backup","title":"Backup","text":""},{"location":"taslak/sample.html#restore","title":"Restore","text":""},{"location":"taslak/sample.html#upgrade","title":"Upgrade","text":""},{"location":"taslak/sample.html#uninstall","title":"Uninstall","text":""},{"location":"taslak/sample.html#quickstart","title":"Quickstart","text":""},{"location":"taslak/sample.html#temel-komutlar","title":"Temel Komutlar","text":"<ul> <li> <p>Yard\u0131m Komutu: <pre><code>mycli --help\n</code></pre></p> </li> <li> <p>Versiyon Bilgisi: <pre><code>mycli --version\n</code></pre></p> </li> <li> <p>\u00d6rnek Komut: <pre><code>mycli run --task example\n</code></pre></p> </li> </ul>"},{"location":"taslak/sample.html#ornek-senaryo","title":"\u00d6rnek Senaryo","text":"<p>A\u015fa\u011f\u0131da, MyCLI'nin kullan\u0131m\u0131yla ilgili basit bir senaryo bulunmaktad\u0131r:</p> <pre><code># Dosyalar\u0131 listeleme\nmycli list --directory /path/to/directory\n\n# Veri dosyas\u0131n\u0131 i\u015fleme\nmycli process --input data.csv --output results.json\n</code></pre>"},{"location":"taslak/sample.html#documentation","title":"Documentation","text":"<ul> <li>OpenKM Knowledge Center</li> <li>Hardware and software requirements</li> <li>Installation</li> <li>Using the installer</li> <li>Troubleshooting</li> <li>Administration guide</li> <li>User guide</li> <li>Migration guide</li> <li>Development guide</li> <li>Known issues, limitations, troubleshooting, FAQ</li> <li> <p>Translation</p> </li> <li> <p>Changelog</p> </li> <li>Help</li> <li>Supporting a new browser or app</li> <li>Setting up for development</li> <li>Privacy policy</li> </ul>"},{"location":"taslak/sample.html#releases","title":"Releases","text":"<ul> <li>Version 1.1  - 2014-07-06: Added the option to enable/disable automatic updates occurring once a week</li> <li>Version 1.0 - 2013-09-15: Added automatic upgrade capability.</li> </ul>"},{"location":"taslak/sample.html#currently-supported-platforms","title":"Currently Supported Platforms","text":"<ul> <li>Dotnet</li> <li>Nodejs</li> <li>Angular</li> </ul>"},{"location":"taslak/sample.html#contributing","title":"Contributing","text":"<p>MyCLI a\u00e7\u0131k kaynakl\u0131 bir projedir ve katk\u0131lar\u0131n\u0131z\u0131 beklemektedir! Katk\u0131da bulunmak i\u00e7in \u015fu ad\u0131mlar\u0131 izleyebilirsiniz:</p> <ol> <li> <p>Projeyi Forklay\u0131n: <pre><code>git fork https://github.com/kullaniciadi/MyCLI.git\n</code></pre></p> </li> <li> <p>Yeni Bir Dal Olu\u015fturun: <pre><code>git checkout -b yeni-ozellik\n</code></pre></p> </li> <li> <p>De\u011fi\u015fikliklerinizi Yap\u0131n ve Commitleyin: <pre><code>git commit -am 'Yeni \u00f6zelli\u011fi ekle'\n</code></pre></p> </li> <li> <p>De\u011fi\u015fiklikleri Push Edin: <pre><code>git push origin yeni-ozellik\n</code></pre></p> </li> <li> <p>Pull Request Olu\u015fturun:     GitHub \u00fczerinde, ana depoya de\u011fi\u015fikliklerinizi i\u00e7eren bir Pull Request olu\u015fturun.</p> </li> </ol>"},{"location":"taslak/sample.html#readmes","title":"READMEs","text":"<p>In addition to the README you're reading right now, this repo includes other READMEs that describe the purpose of each subdirectory in more detail:</p> <ul> <li>content/README.md</li> <li>content/graphql/README.md</li> <li>content/rest/README.md</li> <li>contributing/README.md</li> <li>data/README.md</li> <li>data/reusables/README.md</li> <li>data/variables/README.md</li> <li>src/README.md</li> </ul>"},{"location":"taslak/sample.html#reporting-issues-help","title":"Reporting Issues - Help","text":"<p>OpenKM Open Source Community Edition is supported by developers and technical enthusiasts via the forum of the user community. If you want to raise an issue, please follow the below recommendations:  * Before you post a question, please search the question to see if someone has already reported it / asked for it.  * If the question does not already exist, create a new post.  * Please provide as much detailed information as possible with the issue report. We need to know the version of OpenKM, Operating System, browser and whatever you think might help us to understand the problem or question.</p>"},{"location":"taslak/sample.html#bugs","title":"Bugs","text":"<p>Please file an issue for bugs, missing documentation, or unexpected behavior.</p> <p>See Bugs</p>"},{"location":"taslak/sample.html#feature-requests","title":"Feature Requests","text":"<p>Please file an issue to suggest new features. Vote on feature requests by adding a \ud83d\udc4d.</p> <p>See Feature Requests</p>"},{"location":"taslak/sample.html#questions","title":"Questions","text":"<p>Have any other questions or need help? Please feel free to reach out to me on Mastodon or Twitter.</p>"},{"location":"taslak/sample.html#engage-with-us","title":"Engage with us","text":""},{"location":"taslak/sample.html#share-your-story","title":"Share your story","text":"<p>We\u2019d love to hear about [your experience][] and potentially feature it on our [Blog][].</p>"},{"location":"taslak/sample.html#subscribe-for-updates","title":"Subscribe for Updates","text":"<p>Once a month our marketing team releases an email update with news about product releases, company related topics, events and use cases. [Sign Up!][]</p>"},{"location":"taslak/sample.html#history","title":"History","text":"<p>This program was developed originally by Mauricio Piacentini (@piacentini) from Tabuleiro Producoes as the Arca Database Browser. The original version was used as a free companion tool to the Arca Database Xtra, a commercial product that embeds SQLite databases with some additional extensions to handle compressed and binary data.</p> <p>The original code was trimmed and adjusted to be compatible with standard SQLite 2.x databases. The resulting program was renamed SQLite Database Browser, and released into the Public Domain by Mauricio. Icons were contributed by Raquel Ravanini, also from Tabuleiro. Jens Miltner (@jmiltner) contributed the code to support SQLite 3.x databases for the 1.2 release.</p>"},{"location":"taslak/sample.html#license","title":"License","text":"<p>The GitHub product documentation in the assets, content, and data folders are licensed under a 6251a85a-47d0-11ee-be56-0242ac120002:_:LICENSE::bd65df08359be6848d6091f010f21bad. <p>All other code in this repository is licensed under the 6251a85a-47d0-11ee-be56-0242ac120002:_:LICENSE-CODE::f91c5e2f1ed606963d216dc6395fc6ca. <p>When using the GitHub logos, be sure to follow the GitHub logo guidelines.</p>"},{"location":"taslak/sample.html#community","title":"Community","text":""},{"location":"taslak/sample.html#contact","title":"Contact","text":"<p>We have a few channels for contact:</p> <ul> <li>Discord:</li> <li><code>#general</code> for those using Docusaurus.</li> <li><code>#contributors</code> for those wanting to contribute to the Docusaurus core.</li> <li>@docusaurus on Twitter</li> <li>GitHub Issues</li> <li>Stackoverflow</li> <li>Youtube</li> </ul>"},{"location":"taslak/sample.html#thanks","title":"Thanks","text":"<p>Thanks for all your contributions and efforts towards improving the GitHub documentation. We thank you for being part of our  community !</p>"},{"location":"taslak/sample.html#contributors","title":"Contributors","text":"<p>This project exists thanks to all the people who contribute. [6251a85a-47d0-11ee-be56-0242ac120002:_:CONTRIBUTING.md::4dbb18eba85c1d837a411d1bee446e90]."},{"location":"taslak/sample.html#backers","title":"Backers","text":"<p>Thank you to all our backers! \ud83d\ude4f Become a backer</p> <p></p>"},{"location":"taslak/sample.html#support","title":"Support","text":"<p>Hey friend! Help me out for a couple of !  </p>"},{"location":"taslak/sample.html#sponsors","title":"Sponsors","text":"<p>Support this project by becoming a sponsor. Your logo will show up here with a link to your website. Become a sponsor</p> <p> </p> <p>references * readmes   - https://github.com/github/docs/tree/main   - firstcontributions/first-contributions   - serhii-londar/open-source-mac-os-apps  #Graphics   - bevyengine/bevy   - nextcloud/server   - swagger-api/swagger-ui   - NvChad/NvChad   - luong-komorebi/Awesome-Linux-Software?tab=readme-ov-file   - bevyengine/bevy</p> <ul> <li> <p>https://docs.nextcloud.com/server/latest/developer_manual/</p> </li> <li> <p>installation</p> </li> <li>sqlitebrowser/sqlitebrowser</li> <li>releases</li> <li>jeromelebel/MongoHub-Mac</li> <li>features</li> <li>pbek/QOwnNotes</li> <li>CLI samples</li> <li>https://www.mkdocs.org/user-guide/cli/</li> <li>https://classic.yarnpkg.com/en/docs/cli/</li> </ul> <p> </p>"},{"location":"taslak/quick-start/all-commands.html","title":"All commands","text":"<ul> <li>Summary</li> <li>Purpose</li> <li>Exemplary Workflow</li> <li>Commands</li> <li>browse</li> <li>build</li> <li>test</li> <li>clean</li> <li>release</li> <li>distribute</li> <li>execute</li> <li>info</li> <li>open workspace</li> <li>open project</li> </ul>"},{"location":"taslak/quick-start/all-commands.html#summary","title":"Summary","text":"<p>Arguments usage defination for <code>foo bar</code> command * exactly once 'name' arg: <code>pars foo bar name</code> * exactly 3 'name' arg: <code>pars foo bar name1 name2 name3</code> * optional 'name' arg: <code>pars foo bar [name]</code> * at least 1 'name' arg: <code>pars foo bar name1 [name2]...</code> * at least 2 'name' arg: <code>pars foo bar name1 name2 [name3]...</code> * at most 1 'name' arg: <code>pars foo bar [name]</code> * at most 3 'name' arg: <code>pars foo bar name1 name2 [name3]</code> * unlimited 'name' arg: <code>pars foo bar name1 [name2] [name3]...</code></p>"},{"location":"taslak/quick-start/all-commands.html#purpose","title":"Purpose","text":""},{"location":"taslak/quick-start/all-commands.html#exemplary-workflow","title":"Exemplary Workflow","text":"<ul> <li>Initialize a workspace</li> <li>Create Project(s)</li> <li>Define Template(s)</li> <li>Attach Task(s)</li> <li>Design Resource(s)</li> </ul>"},{"location":"taslak/quick-start/all-commands.html#commands","title":"Commands","text":""},{"location":"taslak/quick-start/all-commands.html#browse","title":"browse","text":""},{"location":"taslak/quick-start/all-commands.html#build","title":"build","text":""},{"location":"taslak/quick-start/all-commands.html#test","title":"test","text":""},{"location":"taslak/quick-start/all-commands.html#clean","title":"clean","text":""},{"location":"taslak/quick-start/all-commands.html#release","title":"release","text":""},{"location":"taslak/quick-start/all-commands.html#distribute","title":"distribute","text":""},{"location":"taslak/quick-start/all-commands.html#execute","title":"execute","text":""},{"location":"taslak/quick-start/all-commands.html#info","title":"info","text":""},{"location":"taslak/quick-start/all-commands.html#open-workspace","title":"open workspace","text":""},{"location":"taslak/quick-start/all-commands.html#open-project","title":"open project","text":""},{"location":"tags.html","title":"Tags","text":""},{"location":"tags.html#css","title":"CSS","text":"<ul> <li>Metas</li> <li>Tags</li> </ul>"},{"location":"tags.html#html5","title":"HTML5","text":"<ul> <li>Metas</li> <li>Tags</li> </ul>"},{"location":"tags.html#javascript","title":"JavaScript","text":"<ul> <li>Metas</li> <li>Tags</li> </ul>"},{"location":"tags.html#application","title":"application","text":"<ul> <li>Application Project Concept</li> </ul>"},{"location":"tags.html#bash","title":"bash","text":"<ul> <li>Completion</li> <li>Completion Bash</li> <li>Configuring Pars</li> </ul>"},{"location":"tags.html#code","title":"code","text":"<ul> <li>Code Template Concept</li> </ul>"},{"location":"tags.html#completion","title":"completion","text":"<ul> <li>Completion</li> <li>Completion Bash</li> <li>Completion Fish</li> <li>Completion Powershell</li> <li>Completion Zsh</li> <li>Configuring Pars</li> </ul>"},{"location":"tags.html#describe","title":"describe","text":"<ul> <li>Group Describe</li> <li>Project Describe</li> <li>Workspace Describe</li> </ul>"},{"location":"tags.html#env","title":"env","text":"<ul> <li>Pars Commands</li> </ul>"},{"location":"tags.html#file","title":"file","text":"<ul> <li>File Template Concept</li> </ul>"},{"location":"tags.html#fish","title":"fish","text":"<ul> <li>Completion</li> <li>Completion Fish</li> <li>Configuring Pars</li> </ul>"},{"location":"tags.html#group","title":"group","text":"<ul> <li>Group Concept</li> <li>Group</li> <li>Group Describe</li> <li>Group List</li> <li>Group Submit</li> <li>Group Remove</li> <li>Group Submit</li> </ul>"},{"location":"tags.html#init","title":"init","text":"<ul> <li>Init</li> </ul>"},{"location":"tags.html#installation","title":"installation","text":"<ul> <li>Installing Pars</li> </ul>"},{"location":"tags.html#list","title":"list","text":"<ul> <li>Workspace List</li> <li>Group List</li> <li>Project List</li> <li>Resource List</li> <li>Template List</li> <li>Workspace List</li> </ul>"},{"location":"tags.html#log-level","title":"log-level","text":"<ul> <li>Pars Commands</li> </ul>"},{"location":"tags.html#loglevelenum","title":"logLevelEnum","text":"<ul> <li>Pars Commands</li> </ul>"},{"location":"tags.html#object","title":"object","text":"<ul> <li>Data Resource Concept</li> <li>Object Resource Concept</li> </ul>"},{"location":"tags.html#php","title":"php","text":"<ul> <li>Metas</li> <li>Tags</li> </ul>"},{"location":"tags.html#powershell","title":"powershell","text":"<ul> <li>Completion</li> <li>Completion Powershell</li> <li>Configuring Pars</li> </ul>"},{"location":"tags.html#project","title":"project","text":"<ul> <li>Application Project Concept</li> <li>Project Concept</li> <li>Project</li> <li>Project Describe</li> <li>Project List</li> <li>Project Remove</li> <li>Project Submit</li> </ul>"},{"location":"tags.html#remove","title":"remove","text":"<ul> <li>Group Remove</li> <li>Project Remove</li> <li>Resource Remove</li> <li>Template Remove</li> <li>Workspace Remove</li> </ul>"},{"location":"tags.html#resource","title":"resource","text":"<ul> <li>Data Resource Concept</li> <li>Object Resource Concept</li> <li>Resource Concept</li> <li>Resource</li> <li>Resource List</li> <li>Resource Remove</li> <li>Resource Submit</li> </ul>"},{"location":"tags.html#shared","title":"shared","text":"<ul> <li>Shared Template Concept</li> </ul>"},{"location":"tags.html#submit","title":"submit","text":"<ul> <li>Group Submit</li> <li>Group Submit</li> <li>Project Submit</li> <li>Resource Submit</li> <li>Template Submit</li> </ul>"},{"location":"tags.html#task","title":"task","text":"<ul> <li>Task Concept</li> </ul>"},{"location":"tags.html#template","title":"template","text":"<ul> <li>Code Template Concept</li> <li>File Template Concept</li> <li>Shared Template Concept</li> <li>Template Concept</li> <li>Template</li> <li>Template List</li> <li>Template Remove</li> <li>Template Submit</li> </ul>"},{"location":"tags.html#uninstall","title":"uninstall","text":"<ul> <li>Uninstall Pars</li> </ul>"},{"location":"tags.html#workspace","title":"workspace","text":"<ul> <li>Workspace Concept</li> <li>Workspace</li> <li>Workspace List</li> <li>Workspace</li> <li>Workspace Describe</li> <li>Workspace List</li> <li>Workspace Remove</li> </ul>"},{"location":"tags.html#zsh","title":"zsh","text":"<ul> <li>Completion</li> <li>Completion Zsh</li> <li>Configuring Pars</li> </ul>"}]}